WEBVTT

1
00:01:58.740 --> 00:01:59.960
Pooja Ranjan: Hey, Justin.

2
00:02:01.020 --> 00:02:03.260
Justin Traglia: Hey, good morning, Poocha. How are you doing?

3
00:02:03.770 --> 00:02:06.230
Pooja Ranjan: Good morning, I'm doing well, how about you?

4
00:02:06.810 --> 00:02:12.199
Justin Traglia: Doing good. You're aware that, I'll be leading today's call instead of, Will?

5
00:02:12.200 --> 00:02:19.710
Pooja Ranjan: Will, yeah, Will inform me, yes. So, I'm around, just let me know whenever you are ready to move over the stream.

6
00:02:20.220 --> 00:02:22.420
Justin Traglia: Okay. Sounds good. I'll probably do that, like…

7
00:02:22.720 --> 00:02:25.490
Justin Traglia: Maybe one minute's… one minute after.

8
00:02:25.870 --> 00:02:26.870
Justin Traglia: The call's scheduled.

9
00:02:26.870 --> 00:02:35.040
Pooja Ranjan: Yeah, if you could give a… if you could give me just 5 to 10 seconds, that would be good enough. A heads-up of 10 seconds should be good enough.

10
00:02:35.970 --> 00:02:36.850
Justin Traglia: That's fine.

11
00:02:38.510 --> 00:02:44.050
Justin Traglia: And, I might share my screen, I haven't decided yet. That's possible, correct?

12
00:02:44.320 --> 00:02:48.259
Pooja Ranjan: Yes, you should have all the permissions to share screen.

13
00:02:48.820 --> 00:02:49.460
Justin Traglia: Okay.

14
00:03:55.560 --> 00:03:57.020
Justin Traglia: Good morning.

15
00:03:57.180 --> 00:03:58.180
Justin Traglia: How's it going?

16
00:03:58.480 --> 00:04:01.420
potuz: Hello. Hi. Nice to see you back, Justin.

17
00:04:02.210 --> 00:04:03.340
Justin Traglia: Thank you, thank you.

18
00:04:04.140 --> 00:04:05.120
potuz: locations.

19
00:04:06.570 --> 00:04:09.080
Justin Traglia: Oh, yeah, it was a vacation. I was,

20
00:04:09.530 --> 00:04:11.400
Justin Traglia: At a friend's wedding in Korea.

21
00:04:11.760 --> 00:04:15.159
potuz: Oh, nice! Still jet lagged now.

22
00:04:15.160 --> 00:04:18.570
Justin Traglia: Oh, yeah. I'm also a little bit sick, but I'm fine.

23
00:04:18.570 --> 00:04:20.490
potuz: Oh, sorry to hear that.

24
00:04:21.110 --> 00:04:22.260
Justin Traglia: That's fine.

25
00:04:25.340 --> 00:04:27.220
potuz: Should be short today, hopefully.

26
00:04:28.420 --> 00:04:29.510
Justin Traglia: Sounds good.

27
00:04:29.510 --> 00:04:46.849
potuz: It'd be nice to go over the list of PRs that are open, and I think there's, yeah, and there's a couple of them that are missing, so I think the only technical discussion that I'm aware of is this issue of the header, like, keeping the header Francesco requested.

28
00:04:47.720 --> 00:04:48.990
potuz: To keep it.

29
00:04:49.120 --> 00:04:52.540
potuz: And some other people from lootstar also requested to keep it.

30
00:04:53.790 --> 00:04:59.489
Justin Traglia: This is, like, regarding instead of, like, they're renaming it to, Execution Payload Bid.

31
00:04:59.730 --> 00:05:07.460
potuz: Yeah, so when Terrence renamed it, then he also kept the previous notion of header just that empty.

32
00:05:08.470 --> 00:05:17.420
potuz: And that's the worst possible case. I would have been happy just, like, renaming it and… and not keeping the previous header, just removing it.

33
00:05:18.060 --> 00:05:18.530
Justin Traglia: Okay.

34
00:05:18.530 --> 00:05:28.510
potuz: But but it seems people prefer to keep it, so if you keep it, then I'd rather keep it and keep the functionality of it. It doesn't make any sense to…

35
00:05:28.960 --> 00:05:31.290
potuz: Keep the space and not use it.

36
00:05:32.900 --> 00:05:34.330
Justin Traglia: Yeah, we can discuss that.

37
00:05:36.180 --> 00:05:39.190
Justin Traglia: The other ones are just testing PRs, correct?

38
00:05:39.550 --> 00:05:48.989
potuz: There's… as far as I know, I haven't really checked yet, but I think there's one that is missing from Francesco and Fort Choice.

39
00:05:49.690 --> 00:05:50.450
potuz: And then…

40
00:05:50.450 --> 00:05:57.249
Justin Traglia: I think I… Okay. There's a possibility I merged it already.

41
00:05:57.970 --> 00:06:00.140
potuz: one of, like, Get Proposer had.

42
00:06:01.460 --> 00:06:07.390
potuz: I didn't even see if it was open. So you probably merged the one that was about equivocations.

43
00:06:09.220 --> 00:06:10.480
Justin Traglia: Yes, that's right.

44
00:06:10.480 --> 00:06:18.040
potuz: Yeah, that one I reviewed, that's… yeah, that's part of, like, state transition, that's fine. But there's one on Ford Choice, which is about, like, get the proposer head.

45
00:06:18.810 --> 00:06:22.399
Justin Traglia: Okay, and if it's not opened yet, of course, I haven't seen it.

46
00:06:22.640 --> 00:06:36.919
potuz: Yeah, I think it's, so Francesco shared a few times, like, both the proposer boost changes and the get proposer head, but I don't think it… he opened it as a PR. I think it was only the branch.

47
00:06:38.520 --> 00:06:40.439
Justin Traglia: Okay, makes sense.

48
00:06:40.760 --> 00:06:42.879
Justin Traglia: Pooja, can we start the stream?

49
00:06:42.880 --> 00:06:57.909
Pooja Ranjan: No, Justin, I am about to just warn you about this one. I would need a couple of more minutes. It seems like stream is not going through. I have been pre-streaming the call, but it doesn't seem like it's going through, so give me just one extra minute, and I will be back.

50
00:06:59.050 --> 00:07:00.790
Justin Traglia: No worries. We can wait.

51
00:07:27.470 --> 00:07:31.580
Pooja Ranjan: Akash, could you please check the backup? I have shared the links for you.

52
00:08:02.610 --> 00:08:06.830
Justin Traglia: Hi everyone. We're still just waiting for the stream to start. Just one more minute.

53
00:08:07.100 --> 00:08:08.260
Justin Traglia: Or two.

54
00:08:19.320 --> 00:08:21.099
Akash | ECH: Okay, we are good.

55
00:08:22.180 --> 00:08:23.569
Akash | ECH: What a shaming, yeah.

56
00:08:25.040 --> 00:08:26.619
Justin Traglia: Okay, so the stream has started?

57
00:08:27.780 --> 00:08:30.049
Akash | ECH: No, just let me know whenever.

58
00:08:30.440 --> 00:08:31.370
Akash | ECH: Oh, yeah.

59
00:08:31.370 --> 00:08:32.409
Justin Traglia: Please start it.

60
00:08:37.770 --> 00:08:38.989
Akash | ECH: Yeah, via layer.

61
00:08:39.809 --> 00:08:41.089
Justin Traglia: Okay, thank you.

62
00:08:41.299 --> 00:08:50.439
Justin Traglia: So hi everyone. Welcome to EPBS Breakout Call 23. I'll be subbing in for Will this week, who is busy participating in the

63
00:08:50.669 --> 00:08:52.819
Justin Traglia: ZKEVM AMA?

64
00:08:53.009 --> 00:08:55.619
Justin Traglia: I'll share the agenda right now.

65
00:08:56.769 --> 00:08:57.969
Justin Traglia: Here's a link.

66
00:09:00.159 --> 00:09:05.899
Justin Traglia: I think I'd like to start by discussing some of the open specification PRs for EPBS.

67
00:09:06.699 --> 00:09:10.399
Justin Traglia: All of which are actually from Terrence, by the way.

68
00:09:10.659 --> 00:09:17.979
Justin Traglia: Most of these are tests, but there is one, which is maybe… we need to chat about some.

69
00:09:18.629 --> 00:09:20.449
Justin Traglia: Let me share a link to it real quick.

70
00:09:22.589 --> 00:09:28.939
Justin Traglia: So this PR, is titled, Rename Execution Payload Header to Execution Payload Bid.

71
00:09:29.359 --> 00:09:32.449
Justin Traglia: Potus, you had some comments about it?

72
00:09:33.800 --> 00:09:49.820
terence: I can give a brief update. So, I believe Porter's has reviewed it, and, like, Poters is good with it, and, so there's a follow-up PR on top of that, meaning, I guess, like, more of a general discussion is just that

73
00:09:49.820 --> 00:10:03.449
terence: Like, previously, we basically replaced the, header with this notion of beep, but we still named it header, but that was in the same position in the state, and people generally didn't like the naming at all, right?

74
00:10:03.450 --> 00:10:14.690
terence: And therefore, so what I did was that in this PR, I essentially, replaced the name, but since the name is replaced, I'm changing it to a different field location.

75
00:10:14.710 --> 00:10:32.149
terence: But then the previous header is still there, it just essentially disturbed zero. But then, like, Francesco and Potus both have, like, good feedback on, like, okay, well, could we just essentially update the header during process payload, its execution payload, such that it's still same as today?

76
00:10:32.150 --> 00:10:36.700
terence: And also, because of that, we can also remove latest block hash, basically.

77
00:10:36.700 --> 00:10:53.430
terence: And such… so, but my PR only does the first part. My PR just essentially does the renaming, changing to a different field location, but it still starts to zero, so we basically want to merge this as it is, and Portos will open a subsequent PR that essentially updated

78
00:10:53.430 --> 00:11:09.779
terence: update the, header, send us to date during process payload, and remove the block hash. Supporters will do the second part, so… but then, I do… I… sorry, I was under the impression yesterday, I was in the wrong PR, that this has been merged, but it doesn't look at this has been merged.

79
00:11:09.780 --> 00:11:20.580
terence: And there's a bunch of conflict, so I will… yeah, this is my priority today, so I apologize for the confusion to POTUS. And, yeah, so my priority is to merge this today.

80
00:11:21.600 --> 00:11:31.120
terence: But I believe Portis was good with it a couple, a couple days ago already, but now it just has conflict, so…

81
00:11:31.350 --> 00:11:32.050
terence: Yeah.

82
00:11:32.300 --> 00:11:37.630
Justin Traglia: Yep. Yeah, we can fix those conflicts and merge this today. I don't see any issues with that.

83
00:11:38.560 --> 00:11:38.950
terence: Thank you.

84
00:11:38.950 --> 00:11:44.160
Justin Traglia: There were some more testing PRs. Is there any value in going over.

85
00:11:44.160 --> 00:12:04.119
terence: I can click over this. So, yes, withdraw, we can do. I just haven't had the time and the energy to do it. I think process withdraw is just really hard. And then, a couple days ago, or weeks ago, I was seeing Discord message that, like, French check still has some feedback, so I was one… so I had a question on whether, like.

86
00:12:04.120 --> 00:12:14.760
terence: yet the expected withdrawal will be refactored or something, such that it's easy to test, but doesn't look like it. So I'll… so… yeah, so… so I think I will pick this up.

87
00:12:14.760 --> 00:12:29.990
terence: again, it just, yeah, it's just really hard to test, because GET, because right now, GET Expatic withdraw has 3 different sweeps, and we put builders first, but after builder, there's, there's the pending one, and there's a full one.

88
00:12:29.990 --> 00:12:49.119
terence: Yeah, I just haven't had the time, but we should definitely add a test for that. And also, if anyone has time and energy, feel free to take over on that, but if not, I will pick it up. It just… it's… it's just a little bit of low priority right now, because I'd rather handle the… because I'd rather handle, the other PR first.

89
00:12:51.800 --> 00:12:52.540
Justin Traglia: Okay.

90
00:12:53.010 --> 00:12:55.520
Justin Traglia: And for the other testing PRs, I think…

91
00:12:55.520 --> 00:13:01.390
terence: test, yeah, I just want to open… so the first test is more like a, proof of concept.

92
00:13:01.440 --> 00:13:09.889
terence: I wanted… I wanted to… instead of writing tests for 4Choice specifically, I want to write down all the test cases first.

93
00:13:09.890 --> 00:13:23.500
terence: And then… and then have some sort of agreement on what the test scenarios are, because in EPBS, there is this notion of empty, so it kind of makes it slightly more tricky to cover all the test cases.

94
00:13:23.500 --> 00:13:43.260
terence: And, yeah, so I wanted to write down the test cases first, before I even write the SPAC code for that, before I can write a spec test. So I believe I shared the test cases on HackMD a couple weeks ago. I haven't gotten any feedback. I also want to look in McKay Hall on this as well, because I know he has been thinking about this along the line.

95
00:13:43.260 --> 00:13:51.209
terence: But I think it's slightly low priority. I think, like, this is not, like, a blocker for definite zero for Fortress tests, but yeah.

96
00:13:52.630 --> 00:13:53.080
Justin Traglia: Okay.

97
00:13:53.080 --> 00:13:54.470
terence: No, can you share that? No, I see.

98
00:13:54.680 --> 00:13:56.600
Justin Traglia: Could you share a link to that? Yeah, yeah.

99
00:13:56.600 --> 00:14:13.719
terence: I will share that, in a few minutes. Let's see, attestation processing test, so that one is important to review, supporters will review that hopefully soon. And then attestation pill or ability to reset test, yeah, that one is also important. So the… so the last two items on… are on both displayed.

100
00:14:14.690 --> 00:14:22.769
Justin Traglia: Okay, I agree. I guess the task items, we can probably merge the bottom three open PRs. Yeah.

101
00:14:22.770 --> 00:14:26.360
terence: Yeah, yeah, I just want to support this review, the last two.

102
00:14:27.590 --> 00:14:36.889
Justin Traglia: Okay. Is there any value in going over the merged PRs since the last breakout call? Or just, maybe this is, like, a good brief overview, just looking at them?

103
00:14:39.150 --> 00:14:52.650
terence: I don't think so. I think, like, the important things, like, some of those are actually structure changes, so it's, so, so, yeah, so those are important for Definite Zero. So, I think for Definite Zero.

104
00:14:52.650 --> 00:15:08.929
terence: I think it's more important to come into consensus on what is the structure, and what is the state transition function, so I wouldn't pay so much attention on, like, the forchery stuff, and then the… and then the timing, the preset, but yeah, but I think the merge PR are important for Definitely.

105
00:15:09.950 --> 00:15:11.450
Justin Traglia: Okay, cool.

106
00:15:11.920 --> 00:15:20.500
Justin Traglia: I guess this is a good opportunity to talk about DevNet Zero Sum. Potus, do you know, or what are your plans for DevNet Zero? Do you have any timelines?

107
00:15:20.890 --> 00:15:35.189
potuz: Yeah, so, we sort of, like, agreed to try to target, end of October, even if it's a single, client. That's starting to look, very tight, but I think we still can make it.

108
00:15:35.740 --> 00:15:41.420
potuz: Having said so, I mean, as we were talking before, the… this call started.

109
00:15:41.620 --> 00:15:49.410
potuz: There are 3 things that I can see would, affect Definite Zero that aren't merged

110
00:15:49.570 --> 00:15:58.000
potuz: on the spec yet. One is for choice, is this, get, proposer head. That's not so problematic, because that's not consensus breaking.

111
00:15:58.290 --> 00:16:14.950
potuz: But the other two are these decisions that, that are PRs that aren't even open. They're very minor, but, we still need to make a decision. One is what Terrence was mentioning, the fact that once we renamed the header for the bid.

112
00:16:15.340 --> 00:16:18.289
potuz: The question is where to put it.

113
00:16:19.100 --> 00:16:31.160
potuz: My personal preference was to put it in the header's place, like, even if it's renamed, just keep it there, and remove the header that is completely useless in the Peacon state.

114
00:16:31.380 --> 00:16:44.969
potuz: But I think Francesco did not like this, and I definitely know that the people from Lodestar did not like this, because they prefer to never remove things from structures.

115
00:16:45.080 --> 00:16:49.580
potuz: Since it's just a header, then it's… okay, so it's not so bad to keep it.

116
00:16:49.990 --> 00:17:01.050
potuz: But then if we keep it, it doesn't make any sense to have it as it is now, or as it will be when we merge Terrence SPR, that it would just keep it as a completely useless structure, we just empty it out.

117
00:17:01.050 --> 00:17:12.509
potuz: So I think we should agree on merging this thing, which would be to keep the header with the same functionality as today, remove the latest block hash, because it's going to be included in that header.

118
00:17:12.510 --> 00:17:15.470
potuz: And then add a new field, which is the bid.

119
00:17:15.470 --> 00:17:31.640
potuz: that's already added in Taren says PR. So I think I'll open a PR, to just keep the header. That should be very simple. It just keeps the header, it updates the header whenever we process a payload.

120
00:17:31.790 --> 00:17:37.270
potuz: And, so that's… Yeah, so that's another transition.

121
00:17:38.250 --> 00:17:41.649
potuz: And what else? That's it.

122
00:17:43.560 --> 00:17:45.859
Justin Traglia: How do, other client teams feel about this?

123
00:17:55.400 --> 00:17:57.929
ethDreamer (Mark): Lighthouse can do either pretty easily.

124
00:17:58.970 --> 00:18:03.720
Justin Traglia: Okay. And I see from Stefan at Techu. This sounds good to him, too.

125
00:18:04.420 --> 00:18:06.489
Justin Traglia: Okay, cool, yeah, please open the PR.

126
00:18:07.220 --> 00:18:14.110
potuz: There was another one that is escaping my mind now, and Terrence just mentioned it, and I'm blanking out.

127
00:18:14.510 --> 00:18:25.260
potuz: But there's… yeah, there's another issue, I'll just recall it in a second. But once we have those, I think we just freeze… oh, yeah, so this… there's… there's this issue.

128
00:18:28.630 --> 00:18:37.210
potuz: well, there's this issue of with, expected withdrawals that Terrence mentioned that, that it might be changed

129
00:18:37.770 --> 00:18:53.450
potuz: Francesco, and I think he was just, relaying a message from Barnabe, who was worried about the fact that you could just exploit… that you could exploit the fact that the builder's withdrawals are processed before the remaining ones.

130
00:18:53.810 --> 00:18:56.640
potuz: In Get Expected Withdrawals.

131
00:18:58.620 --> 00:19:07.850
potuz: It's sort of like a very weird attack to, like, try to cut the line to use those withdrawals, because those are, like, just one per block that you can just add.

132
00:19:07.920 --> 00:19:21.809
potuz: But anyways, I don't know how to change that, or… I mean, in principle, you could just move it in the end, but then it becomes a problem, and then the builders themselves have, have some charm, so it's not really clear how that's going to change.

133
00:19:21.990 --> 00:19:28.029
potuz: even if it's changed, I'm not against changing it, but the problem to me is that if we keep delaying

134
00:19:28.030 --> 00:19:48.989
potuz: setting this… freezing the spec for DevNet Zero in those kind of changes, then we're never going to make it by the end of October. So my proposal would be to keep the withdrawal pass as they are now. Whenever that's researched, and even if we merge now, a fix, we still keep the spec frozen as it is now, plus this thing of, like, adding the header.

135
00:19:48.990 --> 00:19:55.820
potuz: try to target them at zero, and then move on with the remaining items that are missing. One would be this

136
00:19:55.820 --> 00:20:11.539
potuz: overhaul of withdrawals. I think Alex Stokes also wanted to look at this in general, like, the spec is really horrible for withdrawals now. And also the builder spec. We need to look at the Beacon API, as Sean opened up PR, there's some reviews, I think it's good.

137
00:20:11.540 --> 00:20:28.619
potuz: So, the Beacon API, I don't think there's any contention, but the Builder API needs to be designed, but it's also outside of the spec for DevNet0. So my wish would be to set the scope for DevNet Zero now, as the spec is today, plus this issue of the header.

138
00:20:28.620 --> 00:20:34.969
potuz: Leave the withdrawals as they are, and start to actually start coding on our main branches.

139
00:20:37.230 --> 00:20:38.259
Justin Traglia: I agree with this.

140
00:20:38.260 --> 00:20:38.960
Francesco: So…

141
00:20:39.920 --> 00:20:50.770
Francesco: Question about withdrawals, they're not really skipping any line, right? Like, it's… there's… because it still uses Computexit, epoch and UpdateChurn for the…

142
00:20:51.140 --> 00:21:05.630
Francesco: Even for the builder stuff, it's just that among things that have the same exit at POC there first, which doesn't really seem much of an issue to me. Like, I know that I brought this up, but yep, then at least I looked at it more, and it didn't seem like an issue to me, and I think…

143
00:21:05.780 --> 00:21:09.920
Francesco: Barnabad looked at it, like, summarily, like, a while ago, so I don't know that…

144
00:21:10.490 --> 00:21:18.370
Francesco: we also, like, had, you know, deeper thoughts about this than this, so if… if, you know, this understanding is correct, I think, yeah, we can leave it like this.

145
00:21:23.530 --> 00:21:30.439
Justin Traglia: Okay. And how do other clients feel about the October .NET Zero timeline? Like.

146
00:21:30.800 --> 00:21:35.669
Justin Traglia: I know you only need or want one client, but it'd be nice to have two.

147
00:21:39.550 --> 00:21:42.230
Justin Traglia: I'm assuming the one client would be Prism, right, POTUS?

148
00:21:42.960 --> 00:21:46.849
potuz: It's not clear. Taku was more advanced than we were.

149
00:21:47.910 --> 00:22:00.790
Stefan Bratanov: Yeah, I'm not sure, we… I guess it depends. We've started doing some work with Lois, so it's possible October, but we haven't started on the more complicated part, so…

150
00:22:00.970 --> 00:22:02.209
Stefan Bratanov: Yeah, I'm not pleased.

151
00:22:02.390 --> 00:22:04.290
Stefan Bratanov: Not currently.

152
00:22:06.850 --> 00:22:07.560
Justin Traglia: Okay.

153
00:22:08.020 --> 00:22:13.259
Justin Traglia: Is there anything you need from, like, specs-wise? Like, a release with new tests and stuff?

154
00:22:14.740 --> 00:22:17.010
Justin Traglia: I'm assuming we'll have probably multiple by then.

155
00:22:17.420 --> 00:22:18.040
potuz: Yeah, they had…

156
00:22:18.040 --> 00:22:18.440
terence: popping.

157
00:22:18.440 --> 00:22:30.290
potuz: is going to change. So the Heather thing is going to change the state transition. So… so that's going to be my priority, even before reviewing Terrence's PR, is to have that PR with the Heather changed today.

158
00:22:30.970 --> 00:22:34.999
Justin Traglia: Okay. And if we get that merged and included in the next release.

159
00:22:35.140 --> 00:22:40.269
Justin Traglia: which I guess would be Beta Zero, then you could probably start working off of that soon, correct?

160
00:22:42.340 --> 00:22:42.970
potuz: Correct.

161
00:22:44.270 --> 00:22:44.900
Justin Traglia: Okay.

162
00:22:46.520 --> 00:22:51.060
Justin Traglia: Anything else about DevNet Zero? Or, yeah, POTUS.

163
00:22:53.210 --> 00:22:55.840
potuz: I'm nothing… Goodbye.

164
00:22:56.300 --> 00:23:05.429
Justin Traglia: That's fine. Let's move on to the next agenda item, then. Shane, are you here? To talk about the EPS Beacon API standardization?

165
00:23:06.260 --> 00:23:09.530
Shane Moore: Yeah, certainly, I'll drop, the PR in the chat.

166
00:23:09.650 --> 00:23:27.409
Shane Moore: And, yeah, as you mentioned for .NET Zero, yeah, I know some client teams will have a single process where, you know, they don't really use the Beacon API between the auditor client to the Beacon node to, you know, propose box and whatnot, but, at least other clients do, so that'd be very, good to have this at least, like, in a pretty good spot.

167
00:23:27.410 --> 00:23:30.039
Shane Moore: for, the DevNet Zero, and…

168
00:23:30.090 --> 00:23:39.640
Shane Moore: I was thinking it would probably be, like, a pre-release. I at least saw on the Beacon API, like GitHub, that you can… that they do support, like, pre-release versions, which is nice.

169
00:23:39.720 --> 00:23:55.749
Shane Moore: And I was… my first kind of question is, you know, how many people should we get… try to get reviews from? I just posted this already so far in the, like, ePBS channel, but maybe there's other forums where, you know, we could, move the needle as well.

170
00:23:56.610 --> 00:23:58.879
Shane Moore: was the normal process, I guess, is my question.

171
00:23:59.330 --> 00:24:01.949
Shane Moore: bug people. Witch people.

172
00:24:05.710 --> 00:24:14.240
terence: We're giving, our team, James and Radick, to also look into this, just because they are more on the Beacon API side from the Prism side, yeah.

173
00:24:14.930 --> 00:24:15.490
Shane Moore: B.

174
00:24:16.170 --> 00:24:19.310
Shane Moore: Yeah, I saw Ratic, took a look last night, appreciated that.

175
00:24:20.710 --> 00:24:26.219
Justin Traglia: If it were me, I'd probably just reach out to Nico, like, and just bother him about it.

176
00:24:26.790 --> 00:24:30.020
Shane Moore: Okay, yeah, he, he also, I think, commented…

177
00:24:30.540 --> 00:24:38.590
Shane Moore: on one thing as well. But yeah, I kind of thought, like, okay, maybe we need, like, Grandine and other folks as well, but if that's not the case, then… but sure.

178
00:24:38.590 --> 00:24:41.940
Justin Traglia: Feedback from client teams would be good, too.

179
00:24:42.400 --> 00:24:43.050
Shane Moore: Yeah.

180
00:24:44.440 --> 00:24:52.289
Shane Moore: Okay, I guess we can move into other questions, that are probably interesting to talk about.

181
00:24:52.510 --> 00:25:06.299
Shane Moore: So yeah, a lot of new APIs, as you can kind of tell. Like, we're gonna be able to get bids now, and also we're gonna be able to get envelopes, and sign, and then publish those guys to network, and payload attestations as well. We're gonna be able to get

182
00:25:06.300 --> 00:25:21.479
Shane Moore: PTC, duties, so those are the new things, but more interestingly, I think, is, like, the modifications to existing APIs. So, you know, we currently have, like, a GET block, and that GET block is cognizant if it's receiving a

183
00:25:21.480 --> 00:25:35.580
Shane Moore: blinded or unblinded, block, and the block comes back with blobs and, like, KZG commitments, and, now in Glowass world, it's simpler. We just get back, essentially, a beacon block, and it's never blinded or unblinded.

184
00:25:35.580 --> 00:25:49.800
Shane Moore: the question became, like, oh, do we keep this V3 endpoint currently that has, and just update the response object to get rid of this concept of blinded, unblinded, get rid of the blobs, or do we make, like, a V4 endpoint that's,

185
00:25:50.400 --> 00:25:59.989
Shane Moore: you know, obviously separate. So, you can see kind of pros and cons to both of these things. If you do the V4 endpoint, you can… I kind of think it's probably cleaner code,

186
00:25:59.990 --> 00:26:11.240
Shane Moore: Because if you think about, you know, just modifying produce block VT response, you're gonna have more, kind of, like, messy conditional logic, potentially, to try to handle, like, oh, are we receiving this

187
00:26:11.370 --> 00:26:22.720
Shane Moore: Like, unblinded, like, tag in the header, or not, and then have conditional logic based off of that, and it's supporting all the different previous, forks.

188
00:26:24.470 --> 00:26:43.409
Shane Moore: Whereas, if we kind of go with, like, the proof spotv4 response, then, it's, you know, obviously cleaner. We just have to put at the fork transition in the validator client that once you hit, you know, global SEPOC, switch over to the new endpoint. And yeah, I've definitely seen all these comments with,

189
00:26:43.900 --> 00:26:56.989
Shane Moore: like, it seems like preference so far is towards the produce block V4, and yeah, I'm totally cool either way. I spent a lot of time thinking about, like, A versus B, and couldn't decide in the end, so I figured I'd open up to everyone else, and yeah, figured I'd also ask on here if…

190
00:26:57.110 --> 00:27:05.970
Shane Moore: Anyone else has an opinion on, yeah, Averse B. Produce block V4 response, or produce block V3. Keep that as modified.

191
00:27:15.610 --> 00:27:22.490
Shane Moore: Pat says, Nico said before would be better, and yeah, I mean, we could totally roll with that if, if that's, like, kind of, like, consensus.

192
00:27:24.990 --> 00:27:27.029
Justin Traglia: Does anyone else have an opinion?

193
00:27:28.480 --> 00:27:29.270
Justin Traglia: Yep.

194
00:27:35.080 --> 00:27:38.890
Justin Traglia: Stefan also says that he thinks V4 sounds better.

195
00:27:39.280 --> 00:27:39.900
Shane Moore: Sweet.

196
00:27:41.590 --> 00:27:44.049
Justin Traglia: Okay, let's just proceed with V4, then.

197
00:27:44.660 --> 00:27:54.750
Shane Moore: Okay, cool, cool. And, I also noticed in the header that there's this incensus block value, field that goes back in the, like, produce block V3 response.

198
00:27:54.810 --> 00:28:07.069
Shane Moore: At least in my house, they don't seem to be using it. I'm curious if any of the other clients know if they use this field for anything. It kind of just tells you, the rewards that you would get from proposing a beacon block.

199
00:28:07.770 --> 00:28:10.690
Shane Moore: You know, transaction fees accumulated kind of thing.

200
00:28:14.490 --> 00:28:18.549
Shane Moore: I'm just asking because I don't know if I need to support this field or not, going forward.

201
00:28:18.710 --> 00:28:29.659
potuz: So I think… so there are two things about values. One is the value that you would get from a payload that we use to compare against the builder's, the builder's bid.

202
00:28:29.700 --> 00:28:43.859
potuz: But then there's also this value that you get from consensus when proposing a blog, and I think this is a request from Vouch. So, I don't know if the people that typically deal with Jim are here, but otherwise, I would just reach out to Jim.

203
00:28:44.500 --> 00:28:49.479
potuz: And ask him, because I assume that that's gonna be a hard request from Vouch.

204
00:28:50.610 --> 00:28:52.799
Shane Moore: Yeah, that was the one. That's the one I was talking about.

205
00:28:52.800 --> 00:28:59.200
potuz: Who's the best block from consensus side? And then he chooses this based on the value.

206
00:29:00.280 --> 00:29:04.070
Justin Traglia: Yeah, I believe, Jim is retired now, by the way, so…

207
00:29:04.070 --> 00:29:04.390
potuz: Wow.

208
00:29:04.390 --> 00:29:06.420
Justin Traglia: Christmas? Maybe I did not know.

209
00:29:06.740 --> 00:29:09.100
potuz: I think it's still in PG. Wow.

210
00:29:11.780 --> 00:29:15.590
Justin Traglia: Yeah, I forget who mentioned that, but yeah, he left a while ago.

211
00:29:17.290 --> 00:29:18.860
Shane Moore: Okay, Chris Barry, it seems.

212
00:29:19.400 --> 00:29:19.960
Justin Traglia: Yep.

213
00:29:21.390 --> 00:29:25.740
Shane Moore: Okay, yeah, it's good to know that there's probably some use case there.

214
00:29:25.970 --> 00:29:28.650
Shane Moore: Anything else that's kind of useful?

215
00:29:29.150 --> 00:29:31.100
Shane Moore: Anybody else in the comments part?

216
00:29:31.630 --> 00:29:34.109
Shane Moore: of… this task?

217
00:29:36.560 --> 00:29:37.629
Justin Traglia: Sorry, are you asking me to…

218
00:29:37.630 --> 00:29:52.939
Shane Moore: Oh, yeah, yeah, sorry. Do we need a new endpoint that could be used to signal creation and gossiping of data column sidecars by whoever's bid is included in the consensus block? Or perhaps this can be triggered after the call to release a signed execution payload envelope?

219
00:29:53.410 --> 00:30:10.080
Shane Moore: Yeah, I was curious, because, just didn't see anything, particularly in the spec that says, like, how we're gonna release blobs going forward. Maybe it's dealer's choice or whatnot, but, you know, it's typically, like, battery client-driven, or, like, well, builder… also be builder-driven as well, if, they win the bid. So…

220
00:30:10.310 --> 00:30:20.630
Shane Moore: Yeah, just curious how we plan on signaling blob release going forward, and if we need a new API for that, or kind of trigger it as, you know, like, hook into the envelope release.

221
00:30:20.810 --> 00:30:32.089
potuz: Can I ask, how is this, typically done by… I was surprised to see your comment in that, in that PR. How are clients that use the Beacon API doing this now?

222
00:30:32.310 --> 00:30:37.200
potuz: Because we… we release the blobs when we release the blob.

223
00:30:37.590 --> 00:30:39.520
potuz: So that, that, that triggers it.

224
00:30:39.820 --> 00:30:41.180
potuz: And that's it.

225
00:30:41.520 --> 00:30:43.549
potuz: I don't know how other clients do it.

226
00:30:45.790 --> 00:30:58.459
Shane Moore: Yeah, I mean, at least from reading through Lighthouse, it seems that, whenever you get the block back from the beacon node, it'll come back with the blobs, and then when you go to, like, sign it, and then release the block.

227
00:30:58.470 --> 00:31:09.699
Shane Moore: back to the beaconode, you also send the blobs back, and I'm pretty sure whenever you send it back, it triggers, creating these data column sidecars. I was thinking with Glow Ass, you know, we're not gonna…

228
00:31:09.760 --> 00:31:15.690
Shane Moore: have the blobs, necessarily, whenever we, you know, get the consensus block back, and…

229
00:31:16.430 --> 00:31:20.700
Shane Moore: get the successes block to the Valerie client, and then sign it and post it, so it's…

230
00:31:20.770 --> 00:31:25.369
potuz: But I guess my question is, why would you need… why do you need to have the blobs

231
00:31:25.580 --> 00:31:33.610
potuz: Anyway, even today, or even after gloss. So, after gloss, I would just request the payload envelope to sign.

232
00:31:33.880 --> 00:31:36.019
potuz: Get the payload envelope to sign.

233
00:31:36.200 --> 00:31:42.569
potuz: And then just post it, and never, never even ask for blobs at all.

234
00:31:42.940 --> 00:31:47.270
potuz: And just have the beacon node, whenever it's posting the payload envelope.

235
00:31:47.520 --> 00:31:52.380
potuz: also broadcast the blob sidecars. Build and broadcast the blob sidecars.

236
00:31:52.600 --> 00:31:56.099
Shane Moore: So I don't understand why there should be even a…

237
00:31:56.150 --> 00:32:03.890
potuz: A trading back and forth between the validator client and the beacon node for blocks.

238
00:32:06.650 --> 00:32:10.079
Shane Moore: Yeah, so I think what you're saying is go with that second option of…

239
00:32:10.220 --> 00:32:15.789
Shane Moore: Whenever you release the execution envelope, also trigger creating the column sidecars and gossiping those.

240
00:32:16.560 --> 00:32:17.400
potuz: Correct.

241
00:32:17.830 --> 00:32:21.150
Shane Moore: Yep. Okay, cool. That was, one of the ideas I was thinking.

242
00:32:21.650 --> 00:32:22.320
Shane Moore: Cool.

243
00:32:23.900 --> 00:32:24.470
potuz: I think, by the way.

244
00:32:24.470 --> 00:32:26.290
Shane Moore: I mean, it's nice, you don't need a new endpoint.

245
00:32:26.730 --> 00:32:29.960
Shane Moore: I think this is what we're doing now on Prism.

246
00:32:30.710 --> 00:32:31.270
Shane Moore: B.

247
00:32:36.070 --> 00:32:36.770
Shane Moore: Inc.

248
00:32:38.350 --> 00:32:38.910
Justin Traglia: Beautiful.

249
00:32:38.910 --> 00:32:39.540
Shane Moore: Anybody?

250
00:32:40.990 --> 00:32:46.260
Justin Traglia: No, I was just gonna ask if there's anything else you'd like to talk about regarding, API? Beacon API?

251
00:32:47.020 --> 00:32:49.380
Shane Moore: I think I'm good. Thank you, everyone.

252
00:32:50.580 --> 00:32:54.049
Justin Traglia: Okay, let's move on to the next topic. One second.

253
00:33:01.160 --> 00:33:05.490
Justin Traglia: I guess the next topic is Barath and his,

254
00:33:05.670 --> 00:33:10.709
Justin Traglia: Well, I posted some questions, but he wants to talk about, like, the impact to relays and,

255
00:33:11.100 --> 00:33:15.900
Justin Traglia: out-of-protocol software like MapBoost and CommitBoost. Marath, are you here?

256
00:33:16.290 --> 00:33:22.830
Bharath: Yeah, yeah, I'm here, like, yeah, so I was, like, I spent some time thinking about, like, how the Builder API could look like.

257
00:33:22.950 --> 00:33:26.800
Bharath: So, I mean, so, like, with EPBS, like…

258
00:33:26.980 --> 00:33:30.850
Bharath: I think one of the things I was thinking about is, so let's say there's, like.

259
00:33:30.960 --> 00:33:34.809
Bharath: We have, like, off-chain relays, which have not been, like, staked.

260
00:33:34.990 --> 00:33:39.099
Bharath: with the protocol. The design kind of gets, like, a little, like.

261
00:33:39.240 --> 00:33:42.829
Bharath: weird, right? Like, let's say you have an off-chain relay, who…

262
00:33:43.250 --> 00:33:58.869
Bharath: who, like, they have an execution payload header. You need kind of, like, four, like, API calls, right? In the sense, like, the validator first queries the relay, gets the header, creates a beacon block, and then, again, since the validator has to sign the,

263
00:33:59.330 --> 00:34:16.889
Bharath: execution payload envelope, which is created by, again, the off-chain relay. So, kind of, you have… I was thinking about, okay, there's gonna be a system with, like, 4 API calls. But, I think porters, like, you… in the chat and Discord, you mentioned one of the things that Prism is probably not gonna support, like, blind signing.

264
00:34:17.230 --> 00:34:18.670
Bharath: Like, in the sense that…

265
00:34:19.480 --> 00:34:32.240
Bharath: like, at least I… by my understanding, you wouldn't support, like, relays or builders which are not staked with the system. So I think one of the things, like, I wanna just, like, get some understanding is how are you people… how is the client team now thinking about,

266
00:34:32.840 --> 00:34:39.629
Bharath: off-chain relays with EPBS, right? Like, are the client teams very particular that

267
00:34:40.520 --> 00:34:45.220
Bharath: We only, like, have, like, a direct connection with builders who are staked.

268
00:34:45.360 --> 00:34:47.849
Bharath: Or are they also open to having, like.

269
00:34:48.020 --> 00:35:06.860
Bharath: supporting systems for off-chain relays, like, which are not staked in the system. Because, at least in my head, like, it kind of… for the off-chain relays, which are not staked, the design gets a little weird, like, the technical design gets weird, like, you know, you have a validator who poses, like, they're self-building, but…

270
00:35:06.870 --> 00:35:14.699
Bharath: they are kind of querying an off-chain relay and stuff like that. Whereas, you know, if you have… if you're only, like, having direct TCP connections.

271
00:35:14.710 --> 00:35:34.290
Bharath: with builders staked in the protocol, you know, like, it feels, like, kind of easier, you just get the execution payload header, and the builder is responsible for broadcasting the envelope to the PTC. So, I just wanted to get a sense of how the client teams are thinking about this. Do you want to support, like, off-chain relays, or are we specifically only want to support, like.

272
00:35:34.940 --> 00:35:41.489
Bharath: builders who are staked, and if somebody wants to support, like, a relay which is not staked, you have to fork your own client and make the changes, like…

273
00:35:48.020 --> 00:35:52.829
Justin Traglia: Maybe we can start with POTUS. POTUS, do you have any opinions on this?

274
00:35:52.830 --> 00:35:58.690
potuz: Oh, I don't know, we haven't talked to Prism, but, as a team, but I am

275
00:35:58.850 --> 00:36:05.599
potuz: Fairly certain that, we as a team would agree in not supporting this.

276
00:36:06.110 --> 00:36:17.690
potuz: And I don't see why the spec should specify this, even if clients were to support such a thing, I don't see why it would be specified, as it is not today.

277
00:36:20.840 --> 00:36:26.680
Justin Traglia: to be clear, this is, like, external third-party software, like MapBoost?

278
00:36:26.680 --> 00:36:30.129
potuz: Yeah, so signing something that you haven't produced.

279
00:36:32.240 --> 00:36:36.940
Bharath: And when you mean signing something you haven't produced, just, like, just for me to clear my head, like…

280
00:36:37.370 --> 00:36:43.150
Bharath: You mean, like, signing something which doesn't come from the protocol, like, from a stake builder or something?

281
00:36:43.880 --> 00:36:53.310
potuz: Signing, for example, an execution payload envelope that is blind, to which we only have a block hash, and we don't have the payload.

282
00:36:54.560 --> 00:36:55.450
Bharath: Hmm…

283
00:36:56.920 --> 00:37:02.599
Bharath: Got it. So, so you're generally saying, like, it's… you wouldn't want to, like, do that? Like, you would ideally wanna…

284
00:37:02.830 --> 00:37:05.580
Bharath: Only, like, support, like, talking to stake builders, like…

285
00:37:06.250 --> 00:37:14.170
potuz: Correct. I think that if… if the problem is, having to… to have some sort of off-protocol

286
00:37:14.550 --> 00:37:22.019
potuz: mechanism that would be supported by clients, like, at least PRESM, I think builders should…

287
00:37:23.320 --> 00:37:35.379
potuz: Try to pull together stake, get a relay that is staked, and provides this service for those builders that don't want to have staked themselves. And then you can even channel payments off protocol.

288
00:37:35.450 --> 00:37:47.469
potuz: on the execution layer, just agree to have a bid for, say, one way, and channel the payment on the execution layer. There's many… there's a lot of design around this, and all of that design

289
00:37:47.660 --> 00:37:51.739
potuz: I think it should be done… within the protocol.

290
00:37:51.980 --> 00:38:08.120
potuz: what we see as a CL client should be within the protocol, and whatever happens off protocol, well, it should specify whatever it is off protocol. I don't see why consensus clients should be specifying a way of getting a way over protocol.

291
00:38:09.100 --> 00:38:10.220
Bharath: Okay, okay.

292
00:38:10.350 --> 00:38:11.060
Bharath: Got it.

293
00:38:11.820 --> 00:38:15.290
Bharath: So you basically… Yeah, go for it, Justin, sir.

294
00:38:15.710 --> 00:38:19.070
Justin Traglia: I was gonna say, personally, I agree with Protus's take.

295
00:38:19.220 --> 00:38:23.039
Justin Traglia: It'd be really nice if everything was just in protocol, and

296
00:38:23.730 --> 00:38:27.159
Justin Traglia: Like, the idea of builders pulling together and just,

297
00:38:27.820 --> 00:38:30.890
Justin Traglia: Staking, like, a relay sounds ideal.

298
00:38:32.270 --> 00:38:36.170
Bharath: Yeah, that makes sense. Like, like, I didn't… do you guys see a world where, like.

299
00:38:36.340 --> 00:38:41.140
Bharath: Rather than just, like, a builder like Titan staking, it would mostly be, like, relay staking and…

300
00:38:41.330 --> 00:38:44.620
Bharath: Builders, like, are these, like, non-stake entities who, like.

301
00:38:44.970 --> 00:38:55.490
Bharath: who, you know, who go through these relays. I guess, you know, in today's world, you can also think of relays as builders. They're, like, we… they're kind of, like, interchangeable at a point, but I guess, like.

302
00:38:55.660 --> 00:39:03.469
Bharath: maybe somebody, like, an ultrasound would probably, like, stake, and, you know, other builders, like, submit through them. Like, do you guys see, like, something like that, like…

303
00:39:05.900 --> 00:39:08.300
Justin Traglia: Yeah, I mean, that's how I see it.

304
00:39:08.620 --> 00:39:11.179
Justin Traglia: Lorenza?

305
00:39:13.010 --> 00:39:23.660
Lorenzo: Hey, just want to add a comment from our perspective, well, I guess from Titan. I think someone was making a good point on the Discord that

306
00:39:23.890 --> 00:39:31.700
Lorenzo: in a lot of cases is, I guess, is partly, let's say, the capital that is required to be staked, but also the expected value of producing a block.

307
00:39:32.010 --> 00:39:33.949
Lorenzo: So, on a lot of blocks, the…

308
00:39:34.650 --> 00:39:37.290
Lorenzo: Let's say the builder either makes no money, or…

309
00:39:37.520 --> 00:39:43.600
Lorenzo: on average loses money, let's say, if he subsidizes, but let's say he makes no money, because even if there is, like.

310
00:39:43.940 --> 00:39:47.139
Lorenzo: a top-line profit, let's say, a lot of the

311
00:39:47.820 --> 00:39:56.090
Lorenzo: Of the profit actually is rebated to the apps, and the originator, so the builder itself, let's say, makes off and very little on the block.

312
00:39:56.340 --> 00:40:04.930
Lorenzo: So bidding on-chain when there is a chance for the block to be, let's say, not to land is negative expected value, so…

313
00:40:06.680 --> 00:40:15.479
Lorenzo: Yeah, I guess just… that's, I think, a good point from our perspective, whether clients are thinking about to support that or not, I guess, should be considered.

314
00:40:15.660 --> 00:40:20.159
Lorenzo: That being said, I do agree that maybe this exact protocol should not be

315
00:40:20.310 --> 00:40:23.530
Lorenzo: Let's say in the spec, if it's, cleaner.

316
00:40:28.950 --> 00:40:32.229
Justin Traglia: Thanks. How do other client teams feel about this?

317
00:40:35.620 --> 00:40:37.120
Justin Traglia: I don't want to call anyone out.

318
00:40:47.400 --> 00:40:50.900
Stefan Bratanov: Yes, I'm thankful here, so…

319
00:40:51.670 --> 00:41:00.479
Stefan Bratanov: How would then proposers connect to what builders? There would be a builder API change, I guess, to connect directly to Builder, or…

320
00:41:01.090 --> 00:41:08.629
Stefan Bratanov: Yeah, I understand how the local flow will work, but I'm not sure what the other one. Or there is no floor, I'd say.

321
00:41:09.200 --> 00:41:09.760
Stefan Bratanov: Design.

322
00:41:09.760 --> 00:41:11.620
Justin Traglia: Yeah, POTUS?

323
00:41:12.430 --> 00:41:21.460
potuz: I think… so, Stefan, we can… we can talk about this in a second. I think there's essentially no changes, but I think the question that,

324
00:41:21.460 --> 00:41:33.980
potuz: that Justin is asking you is how you guys feel about supporting not only, like, connecting directly to builders, but connecting directly to relays that are not builders, that are not state.

325
00:41:36.060 --> 00:41:44.550
Stefan Bratanov: Oh, so then we basically… we create a folder, create a bit of it?

326
00:41:44.680 --> 00:41:50.309
Stefan Bratanov: I don't know how it will work if the…

327
00:41:51.620 --> 00:41:53.309
Stefan Bratanov: I guess I'm just asking if, like…

328
00:41:53.310 --> 00:41:57.660
potuz: Justin, can I describe what would be the flow of blind signing?

329
00:41:58.470 --> 00:41:59.960
Justin Traglia: Sure, yeah, go for it.

330
00:42:00.730 --> 00:42:11.360
potuz: Okay, so the flow for blind sign-in would be like this. You start the slot, you request bids from relates, as you do today with MapBoost.

331
00:42:11.740 --> 00:42:23.980
potuz: The relay returns a bid, which is not signed, like the execution bid now, that would be signed by a builder. It would just come with a hash, everything but the signature.

332
00:42:24.130 --> 00:42:26.520
potuz: So the signature would be the point at infinity.

333
00:42:26.650 --> 00:42:28.940
potuz: So you choose the best bid.

334
00:42:29.110 --> 00:42:34.959
potuz: For yourself, you put the value to be zero, because you're… you're gonna be self-building.

335
00:42:35.420 --> 00:42:37.579
potuz: And you sign the block.

336
00:42:37.910 --> 00:42:39.590
potuz: And you submit the block.

337
00:42:41.260 --> 00:42:47.970
potuz: Okay? So at this point, the relay knows that their bid was chosen, and then you call them to request

338
00:42:48.190 --> 00:42:53.539
potuz: their payload envelope. They send you a blind payload envelope.

339
00:42:55.290 --> 00:42:58.969
potuz: So that means the payload envelope, but with the hash, not with the block itself.

340
00:42:59.570 --> 00:43:04.230
potuz: You sign the payload envelope as if you actually built it.

341
00:43:04.600 --> 00:43:17.069
potuz: Because you need to sign it because the bid did not include a signature, you submitted as if you were locally building. So you sign the payload envelope, and you send it back to the relay, as you do today when you send the block today.

342
00:43:17.120 --> 00:43:31.939
potuz: The relay reassembles the full payload envelope with your signature, but with the builder's payload, and broadcasts it. So that would be the flow that it would be required from clients to support if you want to have

343
00:43:32.010 --> 00:43:33.699
potuz: map boost, like, today.

344
00:43:34.000 --> 00:43:37.519
potuz: And I… I… what I'm saying is that Prism will not support this.

345
00:43:37.520 --> 00:43:47.999
Stefan Bratanov: Oh, yeah, yeah, this seems like a cut, just board. Yeah, yeah, it doesn't make sense. I think we also…

346
00:43:48.110 --> 00:43:51.100
Stefan Bratanov: We'll be against that, and it'll just complicate the implementation.

347
00:43:55.530 --> 00:43:57.129
Justin Traglia: I think I agree as well.

348
00:43:57.360 --> 00:44:02.420
Justin Traglia: Francesca, you left a comment in the chat. Would you like to… Talk?

349
00:44:04.000 --> 00:44:08.879
Francesco: Yeah, I mean, I… Don't understand why, if you wanted to support,

350
00:44:09.050 --> 00:44:18.449
Francesco: bidding in some way that doesn't require putting all of you at risk, essentially. Like, which, for example, could be the case if you want to…

351
00:44:18.750 --> 00:44:31.499
Francesco: I don't know, maybe make a bid that's much higher than the stake that you have, or just… I don't know, like, the… I guess if these issues that, the people from Titan were bringing up,

352
00:44:31.660 --> 00:44:33.999
Francesco: Proved to be, like, meaningful.

353
00:44:34.140 --> 00:44:47.489
Francesco: like, why would we do it in this complicated way that looks more like MethBoost today, versus just basically setting the bid value to zero, but still having the builder sign it already? Like, do the same exact flow as you would if you were…

354
00:44:47.490 --> 00:44:57.370
Francesco: Doing everything in protocol, quote-unquote, but with just the value being zero, and then you only just basically additionally require the real value to be specified, like, somewhere outside of that.

355
00:44:58.460 --> 00:45:09.499
Francesco: Of course, like, then, you know, it wouldn't… you wouldn't get the trustless payment thing and so on. But yeah, at least in my worldview, like, that's just really not a big deal, and really, trustless payments are mostly…

356
00:45:09.540 --> 00:45:26.619
Francesco: useful as a fallback, so I don't really… I mean, I guess there's two questions to this. Like, one is, like, if we did want to support something like this, why wouldn't we do it this way, versus, like, this, you know, basically thing that looks more like MavBoost, where you are actually signing with your own key. And then the other question is, like.

357
00:45:26.860 --> 00:45:33.839
Francesco: why wouldn't we support this? Like, to me, it seems like we actually should support this. But yeah.

358
00:45:37.360 --> 00:45:44.080
Justin Traglia: Lorenzo has a question about how would the value be specified, like, in a header. It'd be at a protocol.

359
00:45:44.080 --> 00:45:51.719
Francesco: Yeah, I mean, it could, I don't know, be that the API just has this… you get the bid, and next to the bid, you get some…

360
00:45:51.860 --> 00:46:11.370
Francesco: other value, and if the bid value is zero, this other value has to be set to something else. And of course, I mean, you will only ex- you will only accept such, you will only accept zero-value bids from, you know, actors that you trust in some way, like, maybe you have a whitelist or something like that. Like, similar to MavBoost today, just with a different flow.

361
00:46:14.860 --> 00:46:15.540
Justin Traglia: Got it.

362
00:46:16.550 --> 00:46:20.530
Justin Traglia: Do any other, devs have opinions on this?

363
00:46:21.000 --> 00:46:23.960
Justin Traglia: I mean, I would… I'm interested to hear what other people think.

364
00:46:35.380 --> 00:46:41.389
Justin Traglia: Okay. I guess we can chat more about this, offline, probably on Discord.

365
00:46:42.500 --> 00:46:43.290
Justin Traglia: Yeah.

366
00:46:46.480 --> 00:46:50.850
Justin Traglia: I think that's the last agenda item, unless we want to keep talking about this.

367
00:46:52.490 --> 00:46:53.500
Justin Traglia: A couple extraordin questions.

368
00:46:53.500 --> 00:46:57.300
Shane Moore: about, this, like, builder API that could be fun.

369
00:46:57.610 --> 00:46:59.250
Justin Traglia: So currently…

370
00:46:59.250 --> 00:47:13.009
Shane Moore: we were thinking that we would have, the bids back through, like, a direct HTTP, like, connection to the builder from the beacon node. That's one flow, and of course, you can get bids back from the PTP as well.

371
00:47:13.040 --> 00:47:19.389
Shane Moore: And I'm curious if we also want to support direct connection from Beacon Node to Builder through HTTPB.

372
00:47:19.580 --> 00:47:26.860
Shane Moore: To get back envelopes, if there's any benefit to that, or if we just purely plan to get envelopes through, P2P.

373
00:47:32.140 --> 00:47:35.169
potuz: You mean request an envelope from the builder?

374
00:47:35.870 --> 00:47:36.500
Shane Moore: Yeah.

375
00:47:36.700 --> 00:47:39.329
Shane Moore: Like, we're requesting bids from the builder, or would be.

376
00:47:39.330 --> 00:47:44.970
potuz: Besides, besides doing this thing of, like, going off protocol a la MapBoost, what would be the use of that?

377
00:47:45.640 --> 00:47:49.630
Shane Moore: I don't see one, that's why I was asking if we needed it at all. But, I don't know, just…

378
00:47:49.790 --> 00:47:57.910
Shane Moore: I know the original question was, like, what kind of modifications do we need to build our API? This was just something I thought could be worth talking about.

379
00:47:58.100 --> 00:47:59.689
Shane Moore: Maybe the answer is no use.

380
00:48:00.480 --> 00:48:09.449
potuz: So, I think… so not for the current tip, but, but I think for previous payloads, Enrico was,

381
00:48:09.820 --> 00:48:22.809
potuz: I don't know if he even opened it a while back, but I think there was, there were talks about having ways of requesting past blocks and past payloads, both by range and by hash.

382
00:48:22.950 --> 00:48:26.480
potuz: And that would be a way of getting from the builder such a thing.

383
00:48:31.880 --> 00:48:46.939
Shane Moore: And also, if we're gonna do, direct HTTP connections, to builders from the beacon node, would we support multiple, HTTP connections to multiple builders? Because I think right now most clients are just kind of hitting, like, one endpoint.

384
00:48:47.300 --> 00:49:03.860
Shane Moore: to try to get back whatever the relays have decided is, like, the best bid, for example. And now we're saying, like, yes, we can get bids through PTP, but most of it's gonna come through direct HTTP connections, and, like, are you managing… how many connections are you, gonna try to manage, I guess, is the question.

385
00:49:03.860 --> 00:49:08.689
potuz: Yeah, I think that… I think clients need to implement what MedBoost does today.

386
00:49:08.990 --> 00:49:12.069
potuz: I think clients would have to be MedBoost.

387
00:49:12.180 --> 00:49:26.150
potuz: You just put a list of builders that you're connecting to, you send the requests to those builders, the request looks like, it doesn't need… it does no longer need, builder registration.

388
00:49:26.560 --> 00:49:44.920
potuz: You request on the spot, you send the fee recipient that you are… I mean, again, we haven't decided on any of this. This is how I view the Builder API. The… you just send several requests to a list of whitelisted addresses that you have, builders can advertise them anywhere, it doesn't matter, because since you trust them anyways.

389
00:49:44.950 --> 00:49:50.910
potuz: because of trustless payment, you can just put the list however you want. You send in the request.

390
00:49:50.990 --> 00:50:04.749
potuz: the usual data, I am proposing the next block, this is my parent block root, this is my parent block hash, this is my gas limit, and this is my fee recipient. Please send me bids for this.

391
00:50:05.520 --> 00:50:16.599
potuz: And, well, that's it. You just have a timeout, and you choose whatever bid by whatever algorithm you want, which one is the best, but then you only take back bids that are already signed.

392
00:50:18.960 --> 00:50:19.740
Justin Traglia: That,

393
00:50:19.740 --> 00:50:24.890
potuz: There is a request from builders into having this request being signed.

394
00:50:25.250 --> 00:50:29.650
potuz: I think we should probably defer this discussion for later.

395
00:50:32.260 --> 00:50:39.760
Shane Moore: Yeah, I mean, DevNet Zero is supposed to be just for, like, self-building support, right? It's still the plan? So, yeah, this technically is kind of later scope.

396
00:50:40.040 --> 00:50:48.219
potuz: Correct. I think it's fine to have the builder API being correctly scoped, and we can do this now, but yeah, for DevNet0, it's only local building.

397
00:50:49.210 --> 00:50:49.930
Shane Moore: Boop.

398
00:50:51.200 --> 00:50:53.040
Justin Traglia: Chris, I think you wanted to say something?

399
00:50:53.040 --> 00:51:10.939
Chris Haug: Yeah. I'm curious with the two parts of the submitting, bids through the P2P, and then also the beacon, requesting direct bids, if we assume that mostly it will be the direct HTTP requests.

400
00:51:10.940 --> 00:51:17.979
Chris Haug: getting the winning bids, like, why are both needed? Why is the P2P broadcasting still required as well?

401
00:51:18.020 --> 00:51:23.170
Chris Haug: Or when do we expect that one to win, and not the HTTP request?

402
00:51:23.860 --> 00:51:24.690
Chris Haug: Photos?

403
00:51:25.900 --> 00:51:36.849
potuz: So there's many reasons to have this. The easiest one is because it's trivial, and it's not a GOS vector nor anything, but also, like, the thing is that this is actually decentralized.

404
00:51:36.910 --> 00:51:50.689
potuz: You don't need to advertise anything, we are going to have, like, people setting the floor price for bids. Like, Prism itself will be a builder that will be submitting bids this way.

405
00:51:50.900 --> 00:52:01.160
potuz: my home node would be doing this, and any home staker can do this. I mean, of course, we don't expect these, builders to win.

406
00:52:01.280 --> 00:52:19.640
potuz: The one situation where a loan staker might win a bid is someone that doesn't… that doesn't build often, like, not Titan, but I have some private information that will happen next block, then presumably I can win over the P2P side, because I can make a bid

407
00:52:19.640 --> 00:52:22.380
potuz: That, with information that no one else has.

408
00:52:22.490 --> 00:52:32.539
potuz: I don't think this is so important, but it is important to have a decentralized way as a fallback, because if there are only 2 builders, or 3 builders, they might be offline.

409
00:52:33.110 --> 00:52:43.899
potuz: We can always fall back to self-building, but eventually we were going to be in a place where self-building doesn't really work. We want to be in such a place, like, with just a blob count, for example.

410
00:52:44.370 --> 00:52:57.199
potuz: So, this allows anyone with a good connection to be a builder, and it's a good fallback mechanism. Since it's very cheap and trivial to implement, it didn't make any sense not to have it.

411
00:53:05.630 --> 00:53:22.770
Chris Haug: Yeah, I think it would be good to highlight in the spec, like, which parts bids are expected to come in, because currently the specs looks like… looks like most bids would come or win through the P2P, and to have both clearly specified, I think that would be helpful for us.

412
00:53:22.770 --> 00:53:34.020
potuz: API is what is missing. So, we haven't really specified yet the builder API, which specifies how validators will request bids from builders, and we need to do that, indeed.

413
00:53:34.670 --> 00:53:44.950
potuz: But just one extra point to your question on why the P2P side. If we have only 2 or 3 builders, then it's very easy to have a collusion and go off protocol.

414
00:53:45.840 --> 00:54:03.279
potuz: I don't know if it's easy, but… but it is plausible to, in a market with only one or two winning builders, to have an off-protocol system. That's why I'm also against what Francesco suggested, of having the payments coming off-protocol in a stressless manner.

415
00:54:03.470 --> 00:54:10.889
potuz: Because that sets itself for collusion. And then having a floor price at least sets a floor price.

416
00:54:14.480 --> 00:54:18.249
Bharath: So, like, basically when… The slot starts.

417
00:54:18.640 --> 00:54:33.200
Bharath: like, the client would query two bit pools, right? You have the one bit pool from the direct TCP connection, when you get bits from the direct… connecting directly to the builder, and you have bits from the P2P pool. So you'd assume, like, the design's gonna be, like.

418
00:54:33.370 --> 00:54:49.749
Bharath: you start the slot, and, like, you probably have… and you try to compare, like, where you get the highest bid from. So I would assume you… you get… you have a cutoff, like, maybe after one second, I look at both, pools, and which pool ever… which pool gives me the highest bid, I… I… I just go with that.

419
00:54:49.990 --> 00:54:53.040
Bharath: Like, is that, like, my understanding correct that? Like…

420
00:54:55.250 --> 00:55:08.110
potuz: Yeah, the easiest way to implement is exactly as we do today, that you look at your local environment on how it is, and at the same time, you're sending on the background a request to MapBoost.

421
00:55:08.240 --> 00:55:15.640
Bharath: So, your local view happened when you sent the request to local MedBoost. You could, in principle, do it the other order.

422
00:55:15.700 --> 00:55:34.090
potuz: to give more time to P2P bids, but but the easiest way is just… you send your request with an actual timeout, it doesn't matter in that routine, and then that time… whenever that time's out, that's it. Or if you get a reply before your timeout, that's it, and you compare with your local view.

423
00:55:34.820 --> 00:55:39.719
Bharath: Got it. Now, I guess, in this case, your local, we will have your, like, a block you built locally.

424
00:55:39.720 --> 00:55:46.200
potuz: And are you including, like, the P2P… No, so your local view is the P2P stuff as well, as well.

425
00:55:46.200 --> 00:55:49.150
Bharath: Oh, yeah, got it, got it, got it. Does that make sense, got it.

426
00:55:52.630 --> 00:56:10.320
Chris Haug: So, in terms of the design of the Builder API, is that in process already right now, or who is in charge of that, and are, like, the relays involved? Is Ultrasound involved? Is BuilderNet involved? Like, Lorenzo's here, but it seems like it would be good if, like, relays and builders are involved in designing the Builder API.

427
00:56:16.040 --> 00:56:24.169
potuz: Yeah, I think the only people that we talked about how it would be, that's why I know that there was a request of having them signed, are people from Titan.

428
00:56:24.350 --> 00:56:28.089
potuz: The idea was to try to keep it just exactly as it is today.

429
00:56:29.730 --> 00:56:30.480
Chris Haug: Okay.

430
00:56:31.530 --> 00:56:37.290
potuz: So that… so that it's minimum change. And I don't see why we would… we would have to make it different.

431
00:56:37.500 --> 00:56:41.999
potuz: The only difference that I see is that we no longer need registrations.

432
00:56:45.250 --> 00:56:47.419
Chris Haug: And that the stake collateral is needed?

433
00:56:49.910 --> 00:56:51.670
potuz: Yeah, that's part of the protocol, right?

434
00:56:54.670 --> 00:56:56.000
Justin Traglia: Lorenzo?

435
00:56:56.780 --> 00:57:11.169
Lorenzo: Yes, just a clarification, I think from our side, either sign or not sign is fine, so it's not, like, a hard request or a request at all. Just, we thought would be, like, a natural kind of evolution, but…

436
00:57:11.590 --> 00:57:13.080
Lorenzo: Either is fine, yeah.

437
00:57:19.990 --> 00:57:24.139
Justin Traglia: There's a question in the chat from Owen about,

438
00:57:25.160 --> 00:57:37.790
Justin Traglia: about the first block following the fork, like, does it have to be a self-built block or not? Potus, correct me if I'm wrong, like, can you create a new validator with a 0x03, with… or…

439
00:57:38.500 --> 00:57:39.680
Justin Traglia: Credential.

440
00:57:41.240 --> 00:57:44.689
Justin Traglia: you can't… I don't think we'd be able to, convert it.

441
00:57:45.280 --> 00:57:49.650
Justin Traglia: prior to glass, but I believe it's possible to create a new one. Is that right?

442
00:57:49.650 --> 00:57:55.590
potuz: I think you could, deposit it now. I don't know who would do it, but…

443
00:57:55.990 --> 00:58:01.010
potuz: Yeah. What… what we don't know how to do is to…

444
00:58:01.190 --> 00:58:09.579
potuz: convert the homestakers into builders before… so, an existing validator into builder, before the fork.

445
00:58:10.380 --> 00:58:12.799
Justin Traglia: Correct, that wouldn't be possible, but…

446
00:58:13.040 --> 00:58:16.240
Justin Traglia: I really could create a brand new validator.

447
00:58:16.420 --> 00:58:18.830
Justin Traglia: As a 0x03.

448
00:58:19.210 --> 00:58:20.210
Justin Traglia: Credential.

449
00:58:20.210 --> 00:58:33.739
potuz: Yeah, but there's this issue of… we need to understand how the sweep was going to work, because currently a 03 prefixed validator would not be a compounding validator?

450
00:58:34.950 --> 00:58:35.670
Justin Traglia: Correct.

451
00:58:35.670 --> 00:58:38.680
potuz: So that's the issue. So then probably you're gonna be swept.

452
00:58:39.480 --> 00:58:44.170
potuz: But I think it's… I mean… Yeah, that's, that's just good.

453
00:58:46.340 --> 00:58:48.559
Justin Traglia: Okay. Yeah, I need to look more into that as well.

454
00:58:49.980 --> 00:58:52.399
Justin Traglia: But it's, yeah, good question, Owen.

455
00:58:53.910 --> 00:58:56.180
Justin Traglia: Anything else from anyone?

456
00:59:08.380 --> 00:59:12.229
Justin Traglia: Okay, I will return 6 minutes to everyone.

457
00:59:12.520 --> 00:59:14.169
Justin Traglia: Thank you for attending.

458
00:59:15.920 --> 00:59:17.550
potuz: Thanks so much, Justin.

459
00:59:17.550 --> 00:59:18.260
terence: Thank you.

460
00:59:19.080 --> 00:59:20.380
Justin Traglia: Yep. Bye, everyone.

461
00:59:20.380 --> 00:59:21.290
Chris Haug: Thank you.

462
00:59:21.510 --> 00:59:23.199
Stefan Bratanov: No one knows about you.

