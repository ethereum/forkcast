[
  {
    "id": 663,
    "title": "EIP-663: SWAPN, DUPN and EXCHANGE instructions",
    "status": "Review",
    "description": "Introduce additional instructions for manipulating the stack which allow accessing the stack at higher depths",
    "author": "Alex Beregszaszi (@axic), Charles Cooper (@charles-cooper), Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2017-07-03",
    "discussionLink": "https://ethereum-magicians.org/t/eip-663-swapn-dupn-and-exchange-instructions/3346",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Pectra",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This adds three new EVM instructions (DUPN, SWAPN, and EXCHANGE) that allow smart contracts to access and manipulate stack items beyond the current 16-item limit, reaching up to 256 items deep. Currently, the EVM stack can hold 1024 items but only the top 16 are easily accessible. These new instructions help compilers write more efficient code for complex functions with many variables by providing better stack management capabilities. The feature only works with the new EOF bytecode format, not legacy contracts."
  },
  {
    "id": 2537,
    "title": "EIP-2537: Precompile for BLS12-381 curve operations",
    "status": "Final",
    "description": "Adds precompiled contracts for BLS12-381 curve operations to enable efficient cryptographic operations.",
    "author": "Alex Vlasov, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2020-02-21",
    "discussionLink": "https://ethereum-magicians.org/t/eip-2537-bls12-381-precompiles/4187",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "A new precompile for the BLS12-381 curve, a native function built in clients that smart contracts can use to verify signatures and perform certain operation more cheaply and securely.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "More efficient perations for cryptography-heavy apps and enable more complex protocols at L1 capacity."
      },
      "improveUX": {
        "description": "Lower fees and better security users relying on apps using BLS signatures."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Lower gas and better security for apps that use BLS signatures (e.g., staking, bridges)."
      },
      "appDevs": {
        "description": "Can rely on a standard, efficient precompile for BLS operations instead of custom Solidity code."
      },
      "walletDevs": {
        "description": "No changes for wallets"
      },
      "toolingInfra": {
        "description": "Indexers and tools that analyze execution on EVM level will need to update to recognize the new precompile."
      },
      "layer2s": {
        "description": "EVM L2s need to update to stay compatible, certain L1 operations can take advantage of this."
      },
      "stakersNodes": {
        "description": "Not a direct impact on regular validators. Some pools with onchain infrastracture can upgrade to utilize the precompile."
      },
      "clClients": {
        "description": "Beacon Chain unchanged; this is an execution-layer precompile."
      },
      "elClients": {
        "description": "Implementation, testing and fuzzing the new precompile for performance and correctness."
      }
    },
    "benefits": [
      "Cheaper and safer BLS signature verification",
      "Enables efficient cryptography for certain use cases like staking, light clients, bridges and ZK",
      "Easier for devs, more secure and cheaper for users"
    ]
  },
  {
    "id": 2780,
    "title": "EIP-2780: Reduce intrinsic transaction gas",
    "status": "Draft",
    "description": "EIP-2780 proposes reducing the basic gas cost for transactions on the Ethereum network from 21,000 to 6,000 units, aiming to improve efficiency and capacity.",
    "author": "Matt Garnett (@lightclient), Uri Klarman (@uriklarman), Ben Adams (@benaadams), Maria Ines Silva (@misilva73), Anders Elowsson (@anderselowsson), Anthony Sassano (@sassal)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2020-07-11",
    "discussionLink": "https://ethereum-magicians.org/t/eip-2780-reduce-intrinsic-cost-of-transactions/4413",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Ben Adams",
          "discord": "ben_a_adams"
        }
      }
    ],
    "laymanDescription": "Reduces gas costs for transactions to make the network more efficient and affordable, especially for simple ETH transfers.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Increases L1 throughput by lowering per-transaction gas and aligning costs with real state work."
      },
      "improveUX": {
        "description": "Reduces friction for everyday ETH use, making onchain payments higher velocity and smoother."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Lower transaction fees enhance user experience."
      },
      "appDevs": {
        "description": "Higher transaction throughput improves responsiveness and usability of dapps."
      },
      "walletDevs": {
        "description": "Lower costs improve wallet UX, gas estimations will need adjustments."
      },
      "toolingInfra": {
        "description": "Gas estimators and analytics tools need recalibration for new intrinsic costs."
      },
      "layer2s": {
        "description": "Cheaper L1 settlement boosts throughput and lowers bridging and exit costs."
      },
      "stakersNodes": {
        "description": "Smaller per-transaction load and less batching increases block density, improving parallel execution opportunities."
      },
      "clClients": {
        "description": "Higher tx-per-block capacity improves consensus throughput and efficiency."
      },
      "elClients": {
        "description": "Refined cost model aligns gas with real execution work, improving engine utilization."
      }
    },
    "benefits": [
      "Improves overall throughput by reducing per-transaction gas, increasing effective block capacity.",
      "Lowers the fixed transaction cost, restoring viability for small and frequent ETH payments.",
      "Aligns intrinsic gas with actual computational work, removing legacy mispricing and improving economic fairness.",
      "Reduces incentives for batching, allowing more independent transactions and greater client parallelism.",
      "Strengthens ETH's role as native money by reducing friction and increasing velocity of onchain settlement."
    ]
  },
  {
    "id": 2926,
    "title": "EIP-2926: Chunk-Based Code Merkleization",
    "status": "Draft",
    "description": "Specifies a fixed-sized chunk-based Merkleization of contract code to reduce block witness sizes and enable stateless clients",
    "author": "Sina Mahmoodi (@s1na), Alex Beregszaszi (@axic), Guillaume Ballet (@gballet), Jochem Brouwer (@jochem-brouwer), Ignacio Hagopian (@jsign)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2020-08-25",
    "discussionLink": "https://ethereum-magicians.org/t/the-case-for-including-code-chunking-eip-2926-in-glamsterdam/25089",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Guillaume Ballet",
          "discord": "gballet"
        }
      }
    ],
    "laymanDescription": "Breaks smart contract bytecode into fixed-size chunks stored in a Merkle Patricia Trie, reducing network bandwidth for block proof and resource consumption for real-time proving.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Ensures real-time proving can be achieved safely with higher gas limits."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "End users are unaffected as code transition occur at protocol layer."
      },
      "appDevs": {
        "description": "Developers need to adapt to the new gas costs model."
      },
      "walletDevs": {
        "description": "Wallet functionality remains unchanged."
      },
      "toolingInfra": {
        "description": "Infrastructure tools need updates to handle chunk-based proofs and codeRoot fields."
      },
      "layer2s": {
        "description": "Layer 2s remain unaffected."
      },
      "stakersNodes": {
        "description": "A transition period has to happen, during which  resource consumption increases slightly."
      },
      "clClients": {
        "description": "Core consensus rules remain unchanged."
      },
      "elClients": {
        "description": "Requires the implementation of code transition and the new storage format for accounts."
      }
    },
    "benefits": [
      "Reduces resource consumption for real-time provers and avoids worst case attacks.",
      "Enable stateless clients to fetch only accessed code chunks, reducing network bandwidth.",
      "Allow for the removal of the code size limit.",
      "Reduction in size for any proof containing partial code reads"
    ]
  },
  {
    "id": 2935,
    "title": "EIP-2935: Save historical block hashes in state",
    "status": "Final",
    "description": "Saves historical block hashes in state to enable more efficient access to historical data.",
    "author": "Vitalik Buterin, Tomasz Stanczak",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2020-09-04",
    "discussionLink": "https://ethereum-magicians.org/t/eip-2935-save-historical-block-hashes-in-state/4565",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ],
    "northStarAlignment": {
      "improveUX": {
        "description": "Easier access to historical data improves features and security for dapps."
      }
    }
  },
  {
    "id": 3540,
    "title": "EIP-3540: EOF - EVM Object Format v1",
    "status": "Review",
    "description": "EOF is an extensible and versioned container format for EVM bytecode with a once-off validation at deploy time.",
    "author": "Alex Beregszaszi (@axic), Paweł Bylica (@chfast), Andrei Maiboroda (@gumb0), Matt Garnett (@lightclient), Piotr Dobaczewski (@pdobacz)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2021-03-16",
    "discussionLink": "https://ethereum-magicians.org/t/evm-object-format-eof/5727",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Pectra",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This introduces EVM Object Format (EOF), a new standardized container for smart contract bytecode that gets validated once when deployed rather than every time it runs. EOF separates code from data, making contracts more structured and analyzable. It enables future EVM improvements like better jump instructions, multibyte opcodes, and function representations. The format is extensible and versioned, allowing gradual introduction of new features. Only new contracts can use EOF - existing contracts remain unchanged. This is the foundation that makes other EOF-related improvements possible."
  },
  {
    "id": 3670,
    "title": "EIP-3670: EOF - Code Validation",
    "status": "Review",
    "description": "Validate EOF bytecode for correctness at the time of deployment.",
    "author": "Alex Beregszaszi (@axic), Andrei Maiboroda (@gumb0), Paweł Bylica (@chfast)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2021-06-23",
    "discussionLink": "https://ethereum-magicians.org/t/eip-3670-eof-code-validation/6693",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Pectra",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This adds strict validation rules for EOF smart contracts when they're deployed. It rejects contracts with invalid bytecode, such as incomplete PUSH instructions or undefined opcodes. It also removes deprecated instructions like CALLCODE and SELFDESTRUCT from EOF contracts. This validation only happens once at deployment time and only affects new EOF contracts - existing legacy contracts remain unchanged. The goal is to make bytecode more predictable and easier to reason about, while ensuring all EVM implementations handle code the same way."
  },
  {
    "id": 4200,
    "title": "EIP-4200: EOF - Static relative jumps",
    "status": "Review",
    "description": "RJUMP, RJUMPI and RJUMPV instructions with a signed immediate encoding the jump destination",
    "author": "Alex Beregszaszi (@axic), Andrei Maiboroda (@gumb0), Paweł Bylica (@chfast)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2021-07-16",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4200-eof-static-relative-jumps/7108",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Pectra",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This introduces three new jump instructions (RJUMP, RJUMPI, and RJUMPV) for EOF contracts that use relative addressing instead of absolute addressing. These instructions are more gas-efficient than traditional JUMP/JUMPI instructions, don't require JUMPDEST markers, and make code analysis easier. RJUMP does unconditional jumps, RJUMPI does conditional jumps, and RJUMPV provides jump tables for switch-case scenarios. The relative addressing means code can be moved around without breaking, and the static nature allows for better optimization and validation at deployment time."
  },
  {
    "id": 4750,
    "title": "EIP-4750: EOF - Functions",
    "status": "Review",
    "description": "Individual sections for functions with `CALLF` and `RETF` instructions",
    "author": "Andrei Maiboroda (@gumb0), Alex Beregszaszi (@axic), Paweł Bylica (@chfast)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-01-10",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4750-eof-functions/8195",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Pectra",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This introduces proper function support to EOF contracts by allowing multiple code sections, each representing a separate function. It adds two new instructions: CALLF to call functions and RETF to return from them. Functions have defined input/output parameters and their own isolated stack, improving code organization and analysis. Dynamic jumps (JUMP/JUMPI) are completely removed in favor of static function calls, making contracts more predictable and easier to optimize. A return stack tracks function call history, and JUMPDEST becomes a simple NOP instruction since jump analysis is no longer needed."
  },
  {
    "id": 4762,
    "title": "EIP-4762: Statelessness gas cost changes",
    "status": "Draft",
    "description": "Adjusts gas costs to support stateless execution and Verkle tree state transitions.",
    "author": "Guillaume Ballet, Vitalik Buterin, Dankrad Feist",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-01-13",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4762-statelessness-gas-cost-changes/8714",
    "reviewer": "bot",
    "forkRelationships": [],
    "laymanDescription": "This restructures how gas costs work to prepare for stateless clients - nodes that can validate blocks without storing the entire blockchain state. The changes ensure gas costs accurately reflect the new computational model.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Essential foundation for stateless clients, which enable massive improvements in node syncing speed and storage requirements. Enables nodes to validate without storing full state."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Indirect benefits through improved network decentralization and faster node syncing, but gas cost changes may affect some transaction patterns."
      },
      "appDevs": {
        "description": "Some operations may have different gas costs, requiring optimization of smart contracts for the new stateless execution model."
      },
      "walletDevs": {
        "description": "Need to update gas estimation for transactions affected by the new cost model, but most operations remain similar."
      },
      "toolingInfra": {
        "description": "Major updates needed for gas estimation, transaction simulation, and stateless proof generation. Block explorers need stateless verification capabilities."
      },
      "layer2s": {
        "description": "May need to adjust for new gas costs in settlement transactions and state access patterns."
      },
      "stakersNodes": {
        "description": "Can run much lighter nodes using stateless validation, dramatically reducing storage and syncing requirements while maintaining security."
      },
      "clClients": {
        "description": "Minimal impact as this primarily affects execution layer gas metering and state access patterns."
      },
      "elClients": {
        "description": "Major implementation work required for new gas metering model, stateless execution environment, and witness data handling."
      }
    },
    "benefits": [
      "Enables stateless client operation with dramatically faster sync",
      "Reduces storage requirements for node operators",
      "Improves network decentralization through lower barriers",
      "Foundation for Verkle tree state transition"
    ]
  },
  {
    "id": 4844,
    "title": "EIP-4844: Shard Blob Transactions",
    "status": "Final",
    "description": "Introduces a new transaction type for data blobs, to scale data-availability for L2s (aka proto-danksharding).",
    "author": "Vitalik Buterin, Dankrad Feist, Diederik Loerakker (protolambda), et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2021-11-25",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4844-shard-blob-transactions/7435",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Cancun-Deneb",
        "status": "Included"
      }
    ]
  },
  {
    "id": 5450,
    "title": "EIP-5450: EOF - Stack Validation",
    "status": "Review",
    "description": "Deploy-time validation of stack usage for EOF functions.",
    "author": "Andrei Maiboroda (@gumb0), Paweł Bylica (@chfast), Alex Beregszaszi (@axic), Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-08-12",
    "discussionLink": "https://ethereum-magicians.org/t/eip-5450-eof-stack-validation/10410",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Pectra",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This adds comprehensive stack validation to EOF contracts at deployment time, ensuring that stack underflow and overflow cannot happen during execution. By analyzing all possible code paths and tracking stack heights, it eliminates the need for most runtime stack checks, making execution faster and more predictable. Only CALLF and JUMPF instructions need runtime stack overflow checks. The validation also prevents deployment of unreachable code and ensures proper function termination. This creates guarantees that enable better compiler optimizations and ahead-of-time compilation while maintaining linear validation complexity."
  },
  {
    "id": 5920,
    "title": "EIP-5920: PAY opcode",
    "status": "Review",
    "description": "Introduces a new opcode, PAY, to send ether to an address without calling any of its functions",
    "author": "Gavin John (@Pandapip1), Zainan Victor Zhou (@xinbenlv), Sam Wilson (@SamWilsn), Jochem Brouwer (@jochem-brouwer), Charles Cooper (@charles-cooper)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-03-14",
    "discussionLink": "https://ethereum-magicians.org/t/eip-5920-pay-opcode/11717",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Charles Cooper",
          "telegram": "big_tech_sux"
        }
      }
    ],
    "laymanDescription": "This introduces a new PAY opcode that transfers ETH without executing recipient code, solving critical security issues with current transfer methods. It prevents reentrancy attacks and eliminates DoS vectors from malicious recipient contracts.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Minor gas efficiency improvements for ETH transfers by avoiding unnecessary code execution and removing security overhead."
      },
      "improveUX": {
        "description": "Significantly improves smart contract security by eliminating reentrancy vectors and DoS attacks from ETH transfers, enabling safer application development."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Indirect benefits through safer smart contract interactions and potentially lower gas costs for ETH transfers."
      },
      "appDevs": {
        "description": "Major security improvement - eliminates reentrancy attack vectors from ETH transfers and enables new safe transfer patterns, but need to understand bypass of fallback functions."
      },
      "walletDevs": {
        "description": "Can implement more efficient withdrawal and transfer mechanisms, especially for smart contract wallets avoiding reentrancy concerns."
      },
      "toolingInfra": {
        "description": "Transaction analysis tools, debuggers, and smart contract libraries need updates to support the new PAY opcode."
      },
      "layer2s": {
        "description": "More efficient and secure ETH handling in Layer 2 smart contracts and bridge protocols."
      },
      "stakersNodes": {
        "description": "Slightly more efficient transaction processing due to reduced code execution for simple ETH transfers."
      },
      "clClients": {
        "description": "No direct impact on consensus layer operations as this affects execution layer opcodes."
      },
      "elClients": {
        "description": "Need to implement new PAY opcode (0xfc) with proper gas accounting using EIP-2929 warm/cold access patterns and new account creation costs."
      }
    },
    "benefits": [
      "Eliminates reentrancy attacks from ETH transfers",
      "Prevents malicious contracts from blocking payments",
      "Reduces gas costs for simple transfers",
      "Essential safety for advanced account types"
    ]
  },
  {
    "id": 6110,
    "title": "EIP-6110: Supply validator deposits on chain",
    "status": "Final",
    "description": "Enables validator deposits to be processed directly on the execution layer, improving efficiency.",
    "author": "Mikhail Kalinin, Danny Ryan, Peter Davies",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-12-09",
    "discussionLink": "https://ethereum-magicians.org/t/eip-6110-supply-validator-deposits-on-chain/12072",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "New way how validator deposits are processed between CL and EL, more simple and native to merged Ethereum enabling better UX and features.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Improves validator operations by removing legacy EL to CL communication, reducing friction and enabling for better features."
      },
      "scaleL1": {
        "description": "Reduces complexity and improves speed of deposit processing, improving robustness of staking infrastructure."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No impact on normal transactions, only improved the process of becoming a validator"
      },
      "appDevs": {
        "description": "Contracts are not affected"
      },
      "walletDevs": {
        "description": "No impact on wallets."
      },
      "toolingInfra": {
        "description": "Indexers may track deposit events directly from EL."
      },
      "layer2s": {
        "description": "L2s are not impacted."
      },
      "stakersNodes": {
        "description": "Deposits are processed more quickly, pools can now onboard validators more easily."
      },
      "clClients": {
        "description": "Consume deposits via the new delivery path from execution layer."
      },
      "elClients": {
        "description": "Implement deposit delivery to consensus, simplifying legacy eth1data polling."
      }
    },
    "benefits": [
      "Future proofing deposit flow with less complexity",
      "Enabling more features built on modern deposit flow"
    ]
  },
  {
    "id": 6206,
    "title": "EIP-6206: EOF - JUMPF and non-returning functions",
    "status": "Review",
    "description": "Introduces instruction for chaining function calls.",
    "author": "Andrei Maiboroda (@gumb0), Alex Beregszaszi (@axic), Paweł Bylica (@chfast), Matt Garnett (@lightclient)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-12-21",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4750-eof-functions/8195",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Pectra",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This introduces the JUMPF instruction for EOF contracts, enabling tail call optimization by jumping to code sections without adding return stack frames. It also introduces non-returning functions - sections that never return control to their caller. This is particularly efficient for error handling helpers that end with REVERT, allowing compilers to generate more optimal code with reduced gas costs and smaller bytecode size. Functions can jump to other functions with fewer outputs, and non-returning functions don't need to clean up extra stack items before terminating."
  },
  {
    "id": 6404,
    "title": "SSZ transactions",
    "status": "Draft",
    "description": "This EIP defines a migration process of EIP-2718 Recursive-Length Prefix (RLP) transactions to Simple Serialize (SSZ).",
    "author": "Etan Kissling (@etan-status), Gajinder Singh (@g11tech), Vitalik Buterin (@vbuterin)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-01-30",
    "discussionLink": "https://ethereum-magicians.org/t/eip-6404-ssz-transactions/12783",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Etan Kissling",
          "discord": "etan_status"
        }
      }
    ],
    "laymanDescription": "Moves Ethereum transactions from RLP to SSZ. This changes serialization and the block header’s transactions_root, enabling more efficient proofs and future flexibility. Users should see no behavioral change.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No visible change; sending and receiving transactions remains the same. Migration affects encoding and proofs internally."
      },
      "appDevs": {
        "description": "Apps using transaction inclusion proofs or transactions_root must migrate from MPT-based roots to the SSZ transactions_root."
      },
      "walletDevs": {
        "description": "Wallet libraries may need SSZ encoding and signing support. Original RLP sig_hash and tx_hash remain recoverable for compatibility."
      },
      "toolingInfra": {
        "description": "Indexers/explorers using MPT transaction proofs or header roots must adopt SSZ roots and update verification pipelines."
      },
      "layer2s": {
        "description": "Systems relying on mainnet transaction inclusion proofs should switch from MPT proofs to SSZ-based roots for compatibility."
      },
      "stakersNodes": {
        "description": "Operators must run clients supporting SSZ transactions, updated header commitments, and Engine API/ExecutionPayload changes."
      },
      "clClients": {
        "description": "Implement ExecutionPayload and header changes using SSZ transactions_root and adjust Engine API; moderate serialization and hashing complexity."
      },
      "elClients": {
        "description": "Add SSZ serialization/validation for all transactions, update header commitments and Engine API; higher implementation complexity."
      }
    },
    "benefits": [
      "Efficient transaction inclusion proofs via SSZ roots",
      "Better partial hashing and verification of data",
      "Aligns execution and consensus around SSZ",
      "Improves forward compatibility for transaction changes"
    ]
  },
  {
    "id": 6466,
    "title": "SSZ receipts",
    "status": "Draft",
    "description": "This EIP defines a migration process of EIP-2718 Recursive-Length Prefix (RLP) receipts to Simple Serialize (SSZ).",
    "author": "Etan Kissling (@etan-status), Gajinder Singh (@g11tech), Vitalik Buterin (@vbuterin)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-02-08",
    "discussionLink": "https://ethereum-magicians.org/t/eip-6466-ssz-receipts/12884",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Etan Kissling",
          "discord": "etan_status"
        }
      }
    ],
    "laymanDescription": "Ethereum receipts, which record each transaction’s outcome, currently use RLP and are hard to prove or verify. This proposal moves receipts to SSZ, enabling easier proofs, removing bloated logs bloom, and adding data to verify common receipt information.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "The EIP does not describe direct end-user changes or new behavior, only internal receipt encoding."
      },
      "appDevs": {
        "description": "Enables client applications to prove specific receipt parts, like logs, without the full receipt, improving log verification."
      },
      "walletDevs": {
        "description": "Adds on-chain data needed to verify from, gasUsed, and contractAddress fields that wallets and JSON-RPC currently expose."
      },
      "toolingInfra": {
        "description": "Defines a universal SSZ receipt format, deprecates cumulativeGasUsed, logIndex, and logs bloom, simplifying parallel execution analysis and proof tooling."
      },
      "layer2s": {
        "description": "Allows L2 fraud proofs to efficiently prove individual receipt parts, such as logs, instead of providing full receipts."
      },
      "stakersNodes": {
        "description": "The EIP does not describe specific changes for validators or node operators beyond adopting the new SSZ receipt format."
      },
      "clClients": {
        "description": "No consensus-layer client changes are described; required code changes or complexity for consensus clients are not specified."
      },
      "elClients": {
        "description": "Execution-layer clients must migrate receipts from EIP-2718 RLP to SSZ and implement the new universal SSZ receipt format."
      }
    },
    "benefits": [
      "Supports efficient proofs of individual receipt parts, like logs, without sending full receipts.",
      "Removes stateful fields such as cumulativeGasUsed and logIndex to aid parallel execution.",
      "Includes data to verify from, gasUsed, and contractAddress directly from the receipt.",
      "Eliminates the inefficient logs bloom, reducing storage overhead."
    ]
  },
  {
    "id": 6800,
    "title": "EIP-6800: Ethereum state using a unified verkle tree",
    "status": "Draft",
    "description": "Migrates Ethereum's state from Merkle Patricia tries to Verkle trees for improved efficiency and statelessness support.",
    "author": "Guillaume Ballet, Verkle Team",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-03-20",
    "discussionLink": "https://ethereum-magicians.org/t/eip-6800-ethereum-state-using-a-unified-verkle-tree/13734",
    "reviewer": "bot",
    "forkRelationships": [],
    "laymanDescription": "This proposes transitioning Ethereum's entire state system from Merkle Patricia tries to Verkle trees. This foundational change would enable stateless clients, dramatically faster syncing, and better scalability while maintaining security. However, it's competing with other major proposals for Glamsterdam.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Revolutionary improvement to state management enabling stateless clients, faster state access, and much more efficient proof sizes. This is foundational infrastructure for long-term scaling."
      },
      "improveUX": {
        "description": "Enables instant node syncing through stateless operation, dramatically reducing barriers to running Ethereum infrastructure and improving decentralization."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Revolutionary improvement in node syncing speed (from hours/days to minutes), better network decentralization, and more reliable access to Ethereum services."
      },
      "appDevs": {
        "description": "More efficient state access patterns and improved proof verification, though most smart contract logic remains unchanged."
      },
      "walletDevs": {
        "description": "Can implement much faster light clients and improve wallet syncing speed through stateless verification capabilities."
      },
      "toolingInfra": {
        "description": "Complete overhaul needed for state management, proof generation, indexing systems, and block explorers to handle Verkle tree proofs."
      },
      "layer2s": {
        "description": "More efficient state root verification and improved cross-chain proof mechanisms using Verkle tree cryptography."
      },
      "stakersNodes": {
        "description": "Can operate with dramatically reduced storage requirements and near-instant syncing through stateless validation, lowering barriers to participation."
      },
      "clClients": {
        "description": "Minimal direct impact as this primarily affects execution layer state management and proof structures."
      },
      "elClients": {
        "description": "Complete state system rewrite required including Verkle tree implementation, state migration logic, and new proof generation/verification systems."
      }
    },
    "benefits": [
      "Enables instant node syncing through stateless operation",
      "Dramatically reduces storage requirements for validators",
      "Improves network decentralization through lower barriers",
      "More efficient cryptographic proofs (smaller size)",
      "Foundation for future scalability improvements"
    ],
    "isHeadliner": false
  },
  {
    "id": 6873,
    "title": "EIP-6873: Preimage retention",
    "status": "Draft",
    "description": "Execution clients must retain the preimages of addresses and slots accessed between the fork preceding the verge, and the verge itself.",
    "author": "Guillaume Ballet",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-04-14",
    "discussionLink": "https://ethereum-magicians.org/t/eip-6873-preimage-retention-in-the-fork-preceding-the-verge/15830",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Withdrawn",
        "layer": "EL",
        "champion": {
          "name": "Guillaume Ballet",
          "discord": "gballet"
        }
      }
    ],
    "laymanDescription": "Have nodes temporarily keep the original addresses and storage keys used before the Verge, so Ethereum can switch to Verkle trees smoothly.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Essential infrastructure component for Verkle tree transition, ensuring data integrity and availability during the state system migration."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No direct user-facing impact - this is purely infrastructure maintenance during the Verkle transition."
      },
      "appDevs": {
        "description": "No impact on smart contract development as this handles backend state management during migration."
      },
      "walletDevs": {
        "description": "No impact on wallet development as preimage retention is handled transparently by the protocol."
      },
      "toolingInfra": {
        "description": "Infrastructure providers need to understand preimage retention requirements for proper state reconstruction and proof generation."
      },
      "layer2s": {
        "description": "No direct impact on Layer 2 operations as this manages execution layer state transition details."
      },
      "stakersNodes": {
        "description": "Need to properly handle preimage data during the Verkle tree migration to maintain state verification capabilities."
      },
      "clClients": {
        "description": "No direct impact on consensus layer operations as this affects execution layer state management."
      },
      "elClients": {
        "description": "Must implement proper preimage retention mechanisms during state tree migration to ensure continuity of state verification."
      }
    },
    "benefits": [
      "Ensures data integrity during Verkle tree transition",
      "Maintains historical state accessibility",
      "Prevents data loss during migration",
      "Supports smooth transition to stateless model"
    ]
  },
  {
    "id": 7002,
    "title": "EIP-7002: Execution layer triggerable exits",
    "status": "Final",
    "description": "Allows validator exits to be triggered from the execution layer, improving validator management.",
    "author": "Danny Ryan, Mikhail Kalinin",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-05-09",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7002-execution-layer-triggerable-exits/14195",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "A new system contract that lets the withdrawal credential owner trigger a validator exit onchain without the need for BLS validator key on CL.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Provides a safer, more direct exit mechanism from the execution layer, reducing operational risk and simplifying validator management."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Improves safety and UX of staking services that users interact with."
      },
      "appDevs": {
        "description": "Staking protocols gain a safer, onchain way to coordinate exits."
      },
      "walletDevs": {
        "description": "No changes to wallets."
      },
      "toolingInfra": {
        "description": "EL explorers can track exit calls and state transitions onchain."
      },
      "layer2s": {
        "description": "Not impacting L2s."
      },
      "stakersNodes": {
        "description": "Alternative exit mechanism, enables withdrawals even when validator keys are lost."
      },
      "clClients": {
        "description": "Implement the new exit flow initiated via execution-layer contract."
      },
      "elClients": {
        "description": "Implement and expose the exit-trigger contract, new communication with CL."
      }
    },
    "benefits": [
      "Safer operational separation of keys for staking",
      "Trust-minimized exits for staking protocols",
      "Reduces reliance on validator keys access on Beacon Chain"
    ]
  },
  {
    "id": 7069,
    "title": "EIP-7069: Revamped CALL instructions",
    "status": "Draft",
    "description": "Introduce EXTCALL, EXTDELEGATECALL and EXTSTATICCALL with simplified semantics",
    "author": "Alex Beregszaszi (@axic), Paweł Bylica (@chfast), Danno Ferrin (@shemnon), Andrei Maiboroda (@gumb0), Charles Cooper (@charles-cooper)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-05-05",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7069-revamped-call-instructions/14432",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces three new call instructions (EXTCALL, EXTDELEGATECALL, EXTSTATICCALL) for EOF contracts that remove gas observability and simplify call semantics. Unlike legacy CALL instructions, these don't allow specifying gas limits - they use the 63/64th rule automatically. They return extensible status codes (0=success, 1=revert, 2=failure) instead of boolean values, remove output buffer complexity in favor of RETURNDATACOPY, and add RETURNDATALOAD for efficient return data access. This makes contracts more resilient to future gas repricing and eliminates many gas-related attack vectors while simplifying the calling mechanism."
  },
  {
    "id": 7251,
    "title": "EIP-7251: Increase the MAX_EFFECTIVE_BALANCE",
    "status": "Final",
    "description": "Increases the maximum effective balance for validators to improve staking efficiency.",
    "author": "mike, Francesco, dapplion, Mikhail, Aditya, casparschwa, Potuz, Hsiao-Wei",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-06-28",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7251-increase-the-max-effective-balance/14955",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "Introduces new validator maximum effective balance of 2048 ETH, instead of exactly 32 ETH, allowing compounding into larger individual validators that reward on each extra ETH above 32.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Reduces Beacon Chain overhead by consolidating validators, improving scalability of the consensus layer."
      },
      "improveUX": {
        "description": "Simplifies operations for large stakers and staking providers, improves experience for compounding stake."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No direct impact on regular users."
      },
      "appDevs": {
        "description": "No changes for smart contracts."
      },
      "walletDevs": {
        "description": "No impact on user wallets."
      },
      "toolingInfra": {
        "description": "Beacon explorers need adapts to custom effective balances per validator."
      },
      "layer2s": {
        "description": "No L2 impact."
      },
      "stakersNodes": {
        "description": "Can consolidate many validators into fewer, reducing overhead and bandwidth."
      },
      "clClients": {
        "description": "Update Beacon implementation and validator clients with new way to handle effective balance"
      },
      "elClients": {
        "description": "Minimal EL changes."
      }
    },
    "benefits": [
      "Reduces network overhead by consolidating validator sets",
      "Rewards accrue smoothly above 32 ETH",
      "Simplifies operations for large stakers"
    ]
  },
  {
    "id": 7480,
    "title": "EIP-7480: EOF - Data section access instructions",
    "status": "Draft",
    "description": "Instructions to read data section of EOF container",
    "author": "Andrei Maiboroda (@gumb0), Alex Beregszaszi (@axic), Paweł Bylica (@chfast)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-08-11",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7480-eof-data-section-access-instructions/15414",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Pectra",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This introduces four new instructions for EOF contracts to access their data section: DATALOAD (loads 32-byte word), DATALOADN (optimized version with compile-time offset), DATASIZE (returns data section size), and DATACOPY (copies data to memory). These replace the deprecated CODECOPY instruction for data access in EOF contracts, enabling proper separation between code and data. The instructions follow the same pattern as existing data access instructions like those for calldata and returndata, with zero-padding for out-of-bounds access and validation to ensure safe operation."
  },
  {
    "id": 7545,
    "title": "EIP-7545: Verkle proof verification precompile",
    "status": "Draft",
    "description": "Adds a precompiled contract for efficient verification of Verkle tree proofs to support stateless execution.",
    "author": "Guillaume Ballet, Verkle Team",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-11-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7545-verkle-proof-verification-precompile/15665",
    "reviewer": "bot",
    "forkRelationships": [],
    "laymanDescription": "This adds efficient built-in verification for Verkle tree cryptographic proofs. Instead of expensive smart contract computations, this precompile enables fast and cheap verification of the new proof system.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Essential for efficient Verkle tree proof verification within smart contracts, enabling advanced stateless applications and cross-chain verification."
      },
      "improveUX": {
        "description": "Enables new applications requiring state proof verification at much lower gas costs than pure smart contract implementations."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Benefits through cheaper applications that need to verify state proofs, enabling new use cases like efficient cross-chain bridges."
      },
      "appDevs": {
        "description": "Enables building applications that efficiently verify Verkle proofs, opening up new possibilities for cross-chain protocols and state-dependent applications."
      },
      "walletDevs": {
        "description": "Can implement more efficient state verification in light clients and improve cross-chain transaction validation."
      },
      "toolingInfra": {
        "description": "Infrastructure services can leverage efficient proof verification for state-dependent queries and cross-chain data verification."
      },
      "layer2s": {
        "description": "Critical for Layer 2 systems that need to verify L1 state efficiently, enabling better bridge security and state synchronization."
      },
      "stakersNodes": {
        "description": "Indirect benefits through more efficient proof verification reducing overall network computational load."
      },
      "clClients": {
        "description": "No direct impact on consensus layer operations as this affects execution layer precompile functionality."
      },
      "elClients": {
        "description": "Must implement the Verkle proof verification precompile with proper gas accounting and cryptographic verification algorithms."
      }
    },
    "benefits": [
      "Enables cheap verification of Verkle proofs in smart contracts",
      "Unlocks new cross-chain application possibilities",
      "Reduces gas costs for state proof verification",
      "Essential infrastructure for stateless applications"
    ]
  },
  {
    "id": 7547,
    "title": "EIP-7547: Inclusion lists",
    "status": "Stagnant",
    "description": "Add an inclusion list mechanism to allow forced transaction inclusion.",
    "author": "mike (@michaelneuder), Vitalik (@vbuterin), Francesco (@fradamt), Terence (@terencechain), potuz (@potuz), Manav (@manav2401)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-10-24",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7547-inclusion-lists/17474",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Considered"
      }
    ],
    "laymanDescription": "Introduces inclusion lists so proposers can require that specific transactions be included promptly, improving censorship resistance.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Ensures users' transactions are included in a timely manner, reducing censorship uncertainty and improving user experience."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Greater assurance that their transactions will not be censored and will be included quickly."
      },
      "appDevs": {
        "description": "Can build applications with stronger guarantees around transaction inclusion, e.g. privacy perserving protocols."
      },
      "walletDevs": {
        "description": "No direct changes in regular user wallets."
      },
      "toolingInfra": {
        "description": "Analytic tools for censored transactions can follow changes introduced by ILs"
      },
      "layer2s": {
        "description": "L2s relying on timely L1 inclusion benefit from improved censorship resistance and liveness."
      },
      "stakersNodes": {
        "description": "Validators will have to comply with commitment to supplied inclusion lists when creating blocks."
      },
      "clClients": {
        "description": "Consensus and validator clients must support inclusion list rules and validation."
      },
      "elClients": {
        "description": "Execution clients may need to validate inclusion list commitments."
      }
    },
    "benefits": [
      "Improves censorship resistance by enabling forced transaction inclusion",
      "Strengthens neutrality, makes it easier to use potentially censored protocols"
    ]
  },
  {
    "id": 7549,
    "title": "EIP-7549: Move committee index outside Attestation",
    "status": "Final",
    "description": "Moves the committee index outside of attestations to improve consensus layer efficiency.",
    "author": "dapplion",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-11-09",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7549-move-committee-index-outside-attestation/15710",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "Simplifies the structure of validator attestations by moving the committee index field outside the signed message, making verification and aggregation cheaper.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Reduces consensus layer overhead for attestation validation and aggregation, improving performance and paving the way for higher throughput."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No direct impact"
      },
      "appDevs": {
        "description": "No changes to applications."
      },
      "walletDevs": {
        "description": "Wallets unchanged."
      },
      "toolingInfra": {
        "description": "Consensus monitoring tools have to update parsing of attestations."
      },
      "layer2s": {
        "description": "No direct change on L2s unless they rely on attestation data."
      },
      "stakersNodes": {
        "description": "Lower resource usage for attestation handling and aggregation, less data to process."
      },
      "clClients": {
        "description": "Implementation changes to attestation structures and verification."
      },
      "elClients": {
        "description": "Execution layer not affected."
      }
    },
    "benefits": [
      "More efficient consensus verification and aggregation",
      "Improves performance for consensus nodes processing lot of signatures"
    ]
  },
  {
    "id": 7594,
    "title": "EIP-7594: PeerDAS - Peer Data Availability Sampling",
    "status": "Draft",
    "description": "Introduces peer data availability sampling to improve data availability for Ethereum's scaling solutions.",
    "author": "Francesco D'Amato, Dankrad Feist, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-01-15",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7594-peerdas-peer-data-availability-sampling/18215",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled",
        "isHeadliner": true
      }
    ],
    "laymanDescription": "PeerDAS enables Ethereum nodes to specialize in storing different pieces of data while still verifying everything is available. This foundational change dramatically increases data capacity for Layer 2 networks while maintaining security.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Essential foundation for scaling Ethereum's data capacity. Builds the infrastructure needed for full Danksharding, potentially increasing data throughput from ~375KB/s to several MB/s in future upgrades."
      },
      "scaleBlobs": {
        "description": "Directly enables Layer 2 scaling by allowing nodes to efficiently handle much more data without overwhelming individual participants."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Benefits through much cheaper Layer 2 transactions and access to applications that need more data throughput."
      },
      "appDevs": {
        "description": "Enables building applications with higher data requirements. Layer 2 developers benefit from reduced costs and higher capacity limits."
      },
      "walletDevs": {
        "description": "Minimal direct impact. Users benefit indirectly through better Layer 2 transaction reliability and lower costs."
      },
      "toolingInfra": {
        "description": "Major updates needed for block explorers, indexers, and data availability APIs to handle the new sampling system and proof formats."
      },
      "layer2s": {
        "description": "Game-changing for Layer 2 economics - dramatically reduces costs for posting transaction data and enables much higher throughput rollups."
      },
      "stakersNodes": {
        "description": "Must implement the new specialized data storage and sampling system. Changes from downloading everything to participating in a coordinated verification network."
      },
      "clClients": {
        "description": "Major implementation work required for the new data distribution system, sampling protocols, and coordination between nodes. This is a core infrastructure change."
      },
      "elClients": {
        "description": "Need to update how blob transactions are handled and verified, including new proof formats and validation methods."
      }
    },
    "benefits": [
      "Dramatically reduces Layer 2 transaction costs",
      "Enables scaling to 128+ blobs per block over time",
      "Nodes only store a fraction of data while maintaining security",
      "Foundation for competing with high-speed blockchains",
      "Paves the way for full Danksharding"
    ]
  },
  {
    "id": 7610,
    "title": "EIP-7610: Revert creation in case of non-empty storage",
    "status": "Draft",
    "description": "This EIP proposes that contract creation fails if initiated at an address with pre-existing non-empty storage, ensuring immutability.",
    "author": "Gary Rong (@rjl493456442), Martin Holst Swende (@holiman)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-02-02",
    "discussionLink": "https://ethereum-magicians.org/t/eip-revert-creation-in-case-of-non-empty-storage/18452",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Jochem Brouwer",
          "discord": "jochembrouwer"
        }
      }
    ],
    "laymanDescription": "Prevent contract creation at addresses with existing data, enhancing smart contract immutability.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Increased trust in deployed smart contracts."
      },
      "appDevs": {
        "description": "Simplifies contract deployment processes, reducing errors."
      },
      "walletDevs": {
        "description": "Enhances security by reducing unexpected contract behavior."
      },
      "toolingInfra": {
        "description": "Will need updates to accommodate this new deployment restriction."
      },
      "layer2s": {
        "description": "Ensures consistency when deploying contracts on layer 2 solutions."
      },
      "stakersNodes": {
        "description": "Reduces complexity in maintaining contract deployments."
      },
      "clClients": {
        "description": "Helps enforce contract immutability through consensus."
      },
      "elClients": {
        "description": "Improves execution layer reliability by preventing contract tampering."
      }
    },
    "benefits": [
      "Strengthens the integrity and immutability of smart contracts, fostering user confidence.",
      "Reduces potential security issues stemming from contract deployment at non-empty storage addresses.",
      "Encourages cleaner contract management practices among developers.",
      "Creates a more predictable and secure environment for contract interactions."
    ]
  },
  {
    "id": 7619,
    "title": "EIP-7619: Precompile Falcon512 generic verifier",
    "status": "Draft",
    "description": "Proposes adding a precompile for Falcon-512, a post-quantum digital signature algorithm",
    "author": "Erick Pacheco Pedraza (@eum602), Marcos Allende <mallende@lacnet.com>, Diego Lopez León <dieguitoll@gmail.com>",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-07-03",
    "discussionLink": "https://ethereum-magicians.org/t/falcon-512-precompiled-generic-signature-verifier/18569",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Danno Ferrin",
          "discord": "_shemnon"
        }
      }
    ],
    "laymanDescription": "Provide cost-efficient (ecrecover cost not MGas) verification of Falcon-512 signatures, one of the Post-Quantum Signatures being standardized by NIST.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Enables quantum-resistant signatures without protocol redesign, supporting long-term security scalability"
      },
      "improveUX": {
        "description": "Provides cost-efficient access to post-quantum cryptographic primitives"
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Access to Post-Quantum security."
      },
      "appDevs": {
        "description": "Provides cost-efficient access to post-quantum cryptography for dApps requiring quantum resistance"
      },
      "walletDevs": {
        "description": "Cheap PQ signatures for contract wallets. Will need to standardize HD key generation."
      },
      "toolingInfra": {
        "description": "Will need to add language and CLI access to Falcon signature verification, and generation."
      },
      "layer2s": {
        "description": "Will need to add to next L2 hard fork. May want to consider as an alternative wherever ecrecover is used."
      },
      "stakersNodes": {
        "description": "Invisible to stakers, leanConsensus is where PQC will be introduced to them."
      },
      "clClients": {
        "description": "Invisible to the consensus layer, leanConsensus is where PQC will be introduced to them."
      },
      "elClients": {
        "description": "Will integrate an external library (PQClean, PQ Code, etc) so the task will mostly be wiring up the library and gas metering."
      }
    },
    "benefits": [
      "Cost Effective access to Falcon-512 verification.",
      "Quantum resistance for Ethereum signatures",
      "No protocol redesign required",
      "Compatible with existing EVM infrastructure"
    ]
  },
  {
    "id": 7620,
    "title": "EIP-7620: EOF Contract Creation",
    "status": "Draft",
    "description": "Introduce `EOFCREATE` and `RETURNCODE` instructions",
    "author": "Alex Beregszaszi (@axic), Paweł Bylica (@chfast), Andrei Maiboroda (@gumb0), Piotr Dobaczewski (@pdobacz)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-02-12",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7620-eof-contract-creation/18590",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces new contract creation instructions for EOF contracts: EOFCREATE and RETURNCODE, which replace the legacy CREATE/CREATE2 instructions. Since EOF removes code observability (the ability to inspect and manipulate code), the old creation methods don't work. EOFCREATE creates contracts using pre-validated subcontainers within the factory contract, maintaining security while enabling factory patterns. RETURNCODE allows the initialization code to specify which subcontainer becomes the deployed contract and append additional data. This preserves the factory contract use case while maintaining EOF's code non-observability guarantees."
  },
  {
    "id": 7623,
    "title": "EIP-7623: Increase calldata cost",
    "status": "Final",
    "description": "Increases the gas cost of calldata to better reflect its resource usage and improve network efficiency.",
    "author": "Toni Wahrstätter, Vitalik Buterin",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-02-13",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7623-increase-calldata-cost/18647",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "Calldata gas costs is increased to limit state growth and incentivize more efficient blobs to store data.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Normal transactions see no change, contracts relying on calldata become a little more expensive to execute."
      },
      "appDevs": {
        "description": "Contracts behaviour is not changed  but the state storage is more expensive."
      },
      "walletDevs": {
        "description": "Fee estimation may adjust for new calldata cost."
      },
      "toolingInfra": {
        "description": "Contract and gas analytics need reflect updated calldata pricing."
      },
      "layer2s": {
        "description": "L2s should use blobs over calldata, improving network scalability."
      },
      "stakersNodes": {
        "description": "No direct impact on validators."
      },
      "clClients": {
        "description": "Consensus unaffected."
      },
      "elClients": {
        "description": "Adjust EVM gas accounting for calldata."
      }
    },
    "benefits": [
      "Bounds worst-case block size for network safety and scalability",
      "Encourages use of blobs for large data"
    ]
  },
  {
    "id": 7642,
    "title": "EIP-7642: eth/69 - history expiry and simpler receipts",
    "status": "Draft",
    "description": "Adds history serving window and removes bloom filter in receipt",
    "author": "Marius van der Wijden (@MariusVanDerWijden), Felix Lange <fjl@ethereum.org>, Ahmad Bitar (@smartprogrammer93) <smartprogrammer@windowslive.com>",
    "type": "Standards Track",
    "category": "Networking",
    "createdDate": "2024-02-29",
    "discussionLink": "https://ethereum-magicians.org/t/eth-70-drop-pre-merge-fields-from-eth-protocol/19005",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      },
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "A change to EL networking that changes how receipts are handled and removes old data from node synchronization, saving approximately 530GB of bandwidth during sync.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Significant bandwidth reduction (530GB+ per sync) and improved networking efficiency paving path for later history expiry."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Indirect benefits through faster node sync times and reduced bandwidth usage during initial sync."
      },
      "appDevs": {
        "description": "No impact on smart contract development or execution environment."
      },
      "walletDevs": {
        "description": "No changes to wallets."
      },
      "toolingInfra": {
        "description": "Historical data APIs and indexers need updates for new history serving windows and modified networking protocols."
      },
      "layer2s": {
        "description": "No direct impact on L2s, only processing historical data from L1 might be affected."
      },
      "stakersNodes": {
        "description": "Significant bandwidth savings during sync operations."
      },
      "clClients": {
        "description": "Minimal impact as this primarily affects execution layer networking protocols."
      },
      "elClients": {
        "description": "Major implementation work required for new eth/69 protocol including history serving windows, bloom filter removal from receipts, and BlockRangeUpdate messaging."
      }
    },
    "benefits": [
      "Saves ~530GB of bandwidth per node sync",
      "Faster setup for new Ethereum nodes",
      "Prepares for history expiry management"
    ]
  },
  {
    "id": 7666,
    "title": "EIP-7666: EVM-ify the identity precompile",
    "status": "Stagnant",
    "description": "Remove the identity precompile, and put into place a piece of EVM code that has equivalent functionality",
    "author": "Vitalik Buterin (@vbuterin)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-03-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7561-evm-ify-the-identity-precompile/19445",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This removes the identity precompile (at address 0x04) and replaces it with actual EVM code that does the same thing - simply copying input data to output data. The identity precompile was originally needed because there was no direct way to copy memory, but since the MCOPY opcode was introduced, this precompile is no longer necessary. Removing it reduces maintenance burden and complexity for Ethereum clients, including ZK-EVMs. This serves as a template for potentially removing other underused precompiles in the future, like certain hash functions."
  },
  {
    "id": 7667,
    "title": "EIP-7667: Raise gas costs of hash functions",
    "status": "Draft",
    "description": "Increases gas costs for hash function operations to better reflect computational costs in Verkle tree environments.",
    "author": "Verkle Team",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-03-26",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7667-raise-gas-costs-of-hash-functions/19446",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Withdrawn",
        "layer": "EL"
      }
    ],
    "laymanDescription": "Increase gas for hashing to better match real costs, prevent hash-heavy block abuse, and keep Ethereum verification practical and decentralized.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Ensures sustainable economics for hash operations in the Verkle tree environment and prevents potential DoS vectors from underpriced operations."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Most transactions unchanged; hash-heavy operations may cost slightly more gas, modestly increasing fees in specific dapps only occasionally."
      },
      "appDevs": {
        "description": "Contracts relying on hashing (proof verification, logging) see higher gas; developers may optimize or reduce on-chain hashing to control costs."
      },
      "walletDevs": {
        "description": "No functional changes; gas estimation sourced from nodes reflects new pricing, but UI fee projections may rise for hash-heavy calls."
      },
      "toolingInfra": {
        "description": "Off-chain analyzers or gas simulators using custom cost tables must update constants; otherwise, node-backed tooling continues working without changes required."
      },
      "layer2s": {
        "description": "Indirect benefit aligning L1 costs with ZK proving realities; no mandatory changes to rollup protocols, though pricing strategies may adjust."
      },
      "stakersNodes": {
        "description": "Minimal operational effect; block production logic unchanged beyond adopting clients with updated gas schedule if activated during network upgrades only."
      },
      "clClients": {
        "description": "Consensus-layer functionality unaffected; coordination for any network upgrade only, with no EVM pricing logic implemented here within this client layer."
      },
      "elClients": {
        "description": "Must implement updated opcode and precompile gas constants; affects transaction validation, simulation, and gas accounting across execution clients implementations universally."
      }
    },
    "benefits": [
      "Aligns gas pricing with ZK proving costs, reducing worst-case proof time outliers.",
      "Discourages hash-heavy blocks that strain provers and increase centralization risks.",
      "Reduces reliance on ad-hoc sequencer limits and centralized rollup workarounds.",
      "Prepares Ethereum for eventual L1 SNARK verification with predictable proving bounds."
    ]
  },
  {
    "id": 7668,
    "title": "EIP-7668: Remove bloom filters",
    "status": "Draft",
    "description": "Proposes to remove bloom filters from Ethereum's execution blocks to simplify querying mechanisms.",
    "author": "Vitalik Buterin (@vbuterin)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-03-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7653-remove-bloom-filters/19447",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Jochem Brouwer",
          "discord": "jochembrouwer"
        }
      }
    ],
    "laymanDescription": "Focuses on eliminating bloom filters to streamline the querying of transaction logs, promoting more efficient, decentralized solutions.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Users will experience improved querying efficiency as decentralized methods replace the current reliance on bloom filters."
      },
      "appDevs": {
        "description": "Developers can leverage new decentralized log querying protocols, reducing dependency on bloom filter performance."
      },
      "walletDevs": {
        "description": "Wallet developers are encouraged to enhance log retrieval methods, fostering more efficient transaction histories."
      },
      "toolingInfra": {
        "description": "Indexers and explorers will adapt to new log retrieval processes, requiring updates to support decentralized protocols."
      },
      "layer2s": {
        "description": "Layer 2 solutions will align with the removal of bloom filters, streamlining cross-layer query integration."
      },
      "stakersNodes": {
        "description": "Node operators will need to upgrade clients for compliance, but core functionality remains unchanged."
      },
      "clClients": {
        "description": "Minimal complexity as no consensus changes occur; just standard fork coordination needed."
      },
      "elClients": {
        "description": "Clients must adjust to the requirement of empty bloom filters in transactions and execution blocks, accounting for the change in log retrieval mechanisms."
      }
    },
    "benefits": [
      "Simplified Ethereum protocol by removing outdated bloom filters.",
      "Encourages development of efficient decentralized querying solutions.",
      "Reduces the overhead of maintaining bloom filters in execution blocks.",
      "Improves performance and efficiency in transaction log access."
    ]
  },
  {
    "id": 7685,
    "title": "EIP-7685: General purpose execution layer requests",
    "status": "Final",
    "description": "Introduces a general framework for execution layer requests to improve protocol extensibility.",
    "author": "lightclient",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-14",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7685-general-purpose-execution-layer-requests/19668",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "Creates a standard way to communicate messages from EL contracts to CL, providing space to various request types in the future.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Simplifies EL to CL feature development, enabling safer, more native operations for users and validators."
      },
      "scaleL1": {
        "description": "Standardizes messaging from the execution layer, reducing complexity as the protocol evolves and enabling more efficiency."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No changes for users."
      },
      "appDevs": {
        "description": "Smart contract developers can now utilize new features to communicate with Beacon chain"
      },
      "walletDevs": {
        "description": "No changes for wallets."
      },
      "toolingInfra": {
        "description": "Monitoring tools cana analyze new types of requests."
      },
      "layer2s": {
        "description": "No impact on L2s directly."
      },
      "stakersNodes": {
        "description": "More options to manage validators from onchain operations, mainly for pools.."
      },
      "clClients": {
        "description": "Handling new request types from EL."
      },
      "elClients": {
        "description": "Implementing new system contracts and requests."
      }
    },
    "benefits": [
      "More native and easy communication between EL and CL",
      "More features and security for users"
    ]
  },
  {
    "id": 7688,
    "title": "EIP-7688: Forward compatible consensus data structures",
    "status": "Draft",
    "description": "This EIP defines the changes needed to adopt ProgressiveContainer from EIP-7495 and ProgressiveList from EIP-7916 in consensus data structures.",
    "author": "Etan Kissling (@etan-status), Cayman (@wemeetagain)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-15",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7688-forward-compatible-consensus-data-structures/19673",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "CL",
        "champion": {
          "name": "Etan Kissling",
          "discord": "etan_status"
        }
      }
    ],
    "laymanDescription": "This EIP stabilizes Merkle tree indices for all consensus data, preventing coincidental verifier breakage when fields are added, removed, or list capacities change during Ethereum upgrades.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Reduces breaking changes during Ethereum upgrades."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No direct impact"
      },
      "appDevs": {
        "description": "Less maintenance for EIP-4788 based projects."
      },
      "walletDevs": {
        "description": "No direct impact."
      },
      "toolingInfra": {
        "description": "Less maintenance for consensus light client components."
      },
      "layer2s": {
        "description": "Less maintenance for light client based bridges."
      },
      "stakersNodes": {
        "description": "Fewer required upgrades of staking pool delegate contracts."
      },
      "clClients": {
        "description": "Greater flexibility for future consensus design changes."
      },
      "elClients": {
        "description": "No direct impact."
      }
    },
    "benefits": [
      "EIP-4788 projects no longer need upgrades or security council involvement for forks outside their data scope.",
      "CL developers can modify fields, list capacities, or cost functions without affecting verifiers.",
      "Bundling with ePBS avoids a second re-indexing in the future."
    ]
  },
  {
    "id": 7691,
    "title": "EIP-7691: Blob throughput increase",
    "status": "Final",
    "description": "Increases blob throughput to improve data availability for Layer 2 solutions.",
    "author": "Ansgar Dietrichs, Dankrad Feist",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-17",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7691-blob-throughput-increase/19724",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "Doubles the target number of blobs per block (and raises the max) to increase L2 data capacity until future upgrades enable even more blobs.",
    "northStarAlignment": {
      "scaleBlobs": {
        "description": "Directly increases data availability for rollups by raising blob capacity, improving throughput."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Lower fees on L2s as more blob space becomes available."
      },
      "appDevs": {
        "description": "Rollup apps benefit from cheaper data availability."
      },
      "walletDevs": {
        "description": "No direct changes, potential fee improvements for L2 transactions."
      },
      "toolingInfra": {
        "description": "Monitoring should surface new blob target/max parameters."
      },
      "layer2s": {
        "description": "Directly increases throughput for rollups using blobs, more L2 scale."
      },
      "stakersNodes": {
        "description": "Slightly higher data propagation at the p2p layer within safe bounds."
      },
      "clClients": {
        "description": "Parameters update that needed more optimization and testing"
      },
      "elClients": {
        "description": "Update blob gas accounting and targets."
      }
    },
    "benefits": [
      "Higher data capacity for rollups",
      "Lower L2 fees in the near term",
      "Provides extra space before PeerDAS unlocks even momre"
    ]
  },
  {
    "id": 7692,
    "title": "EIP-7692: EVM Object Format (EOFv1) Meta",
    "status": "Review",
    "description": "Meta EIP listing the EIPs belonging to the EVM Object Format (EOF) proposal in its first version, enabling code versioning and paving the way for RISC-V execution environments.",
    "author": "Alex Beregszaszi (@axic), Paweł Bylica (@chfast), Andrei Maiboroda (@gumb0), Piotr Dobaczewski (@pdobacz), Danno Ferrin (@shemnon)",
    "type": "Meta",
    "category": "Core",
    "createdDate": "2024-04-17",
    "discussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-eof/21271",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "",
        "isHeadliner": false,
        "wasHeadlinerCandidate": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-eof/24464",
        "layer": "EL"
      }
    ],
    "laymanDescription": "This introduces a new container format for EVM bytecode that enables code versioning, removes complex jump analysis, and paves the way for new execution environments like RISC-V and EVM64 within the same contract. This EIP was Declined for Inclusion from Fusaka on [April 28th](https://blog.ethereum.org/2025/04/29/checkpoint-2#eof) due to a lack of consensus on implementation details and the resulting potential slowdown of shipping PeerDAS. It has been re-proposed as a headlining feature in Glamsterdam with multiple variants to address community concerns.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Enables incremental deployment of more efficient execution environments like RISC-V and EVM64 for computationally intensive tasks while maintaining EVM compatibility. Removes JUMPDEST analysis overhead."
      },
      "improveUX": {
        "description": "Provides better developer tools through improved code analysis, versioning capabilities, and performance improvements for computationally intensive applications."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Indirect benefits from improved contract performance and reduced gas costs for computationally intensive operations. Better reliability from enhanced code validation."
      },
      "appDevs": {
        "description": "Can use multiple execution environments within same contract - write normal logic in EVM and intensive computations in EVM64/RISC-V. Better code analysis tools and function support improve development experience."
      },
      "walletDevs": {
        "description": "Minimal direct impact on wallet development, though improved contract reliability and performance benefit user experience indirectly."
      },
      "toolingInfra": {
        "description": "Major updates needed for debuggers, analyzers, and development tools to support EOF containers, multiple execution environments, and new bytecode format. Better analysis capabilities once implemented."
      },
      "layer2s": {
        "description": "Can leverage more efficient execution environments for proof generation and validation. Better code analysis aids in rollup optimization and security verification."
      },
      "stakersNodes": {
        "description": "Reduced computational overhead from eliminating JUMPDEST analysis. Potential increased complexity from supporting multiple execution environments within contracts."
      },
      "clClients": {
        "description": "Minimal direct impact on consensus layer operations as this primarily affects execution layer bytecode processing and validation."
      },
      "elClients": {
        "description": "Major implementation work for new bytecode container format, multiple execution environments, enhanced validation, and maintaining backwards compatibility with legacy bytecode."
      }
    },
    "benefits": [
      "Enables incremental adoption of RISC-V and EVM64 within existing contracts",
      "Removes complex JUMPDEST analysis improving execution efficiency",
      "Provides code versioning for backward-incompatible protocol changes",
      "Enables better code analysis and development tooling",
      "Introduces first-class function support improving analysis opportunities",
      "Addresses multiple EVM pain points through container format",
      "Paves the way for maintaining existing toolchain while adding new capabilities",
      "Enables 'both EVM and RISC-V' rather than 'either EVM or RISC-V' approach"
    ]
  },
  {
    "id": 7698,
    "title": "EIP-7698: EOF - Creation transaction",
    "status": "Review",
    "description": "Deploy EOF contracts using creation transactions",
    "author": "Piotr Dobaczewski (@pdobacz), Andrei Maiboroda (@gumb0), Paweł Bylica (@chfast), Alex Beregszaszi (@axic)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-24",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7698-eof-creation-transaction/19784",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This enables deploying EOF contracts using regular creation transactions (transactions with empty 'to' field). Since legacy CREATE and CREATE2 instructions cannot deploy EOF code, creation transactions are the only way to get the first EOF contracts on-chain. The transaction data contains an EOF initcontainer followed by calldata for constructor arguments. This approach allows existing deployment tooling to work without modification - developers can deploy EOF contracts the same way they deploy legacy contracts, just by concatenating constructor arguments with the initcontainer. The execution ends with a RETURNCODE instruction that specifies which subcontainer becomes the deployed contract."
  },
  {
    "id": 7702,
    "title": "EIP-7702: Set EOA account code",
    "status": "Final",
    "description": "Allows Externally Owned Accounts (EOAs) to temporarily set code, enabling account abstraction features.",
    "author": "Vitalik Buterin, Sam Wilson, Ansgar Dietrichs, Matt Garnett",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-20",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7702-set-eoa-account-code-for-one-transaction/19769",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "Enables an address to delegate its control to an existing smart contract, creating an account abstracted wallet with new programmable features.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Brings account abstraction benefits to EOAs, creating new smart wallets with features allowing for better security, batching, recovery, and gassless transactions."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Better wallet UX with new features without migrating to a new address."
      },
      "appDevs": {
        "description": "Dapps can levarage new smart wallet features and enables users to do more complex operations easily."
      },
      "walletDevs": {
        "description": "Wallets need to implement a secure workflow that allows users to activate a chosen smart account."
      },
      "toolingInfra": {
        "description": "Recognize new wallet operations and standard wallet contracts"
      },
      "layer2s": {
        "description": "L2s can implement same feature to allow for better cross chain interop"
      },
      "stakersNodes": {
        "description": "Validators are not affected."
      },
      "clClients": {
        "description": "Consensus not changed."
      },
      "elClients": {
        "description": "Support new transaction type and code authorization for EOAs to contract wallets."
      }
    },
    "benefits": [
      "Brings account abstraction features to EOAs",
      "Better UX for users with features like gasless and batched transactions",
      "Provides alternative recovery options for wallets"
    ]
  },
  {
    "id": 7708,
    "title": "ETH transfers emit a log",
    "status": "Stagnant",
    "description": "All ETH-transfers, including transactions, CALL and SELFDESTRUCT, emit a log so ETH movements are detectable via a single, standard mechanism.",
    "author": "Vitalik Buterin (@vbuterin), Peter Davies (@petertdavies)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-05-17",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7708-eth-transfers-emit-a-log/20034",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Carl Beekhuizen",
          "discord": "carlbeek"
        }
      }
    ],
    "laymanDescription": "Make every ETH transfer—including from contracts and SELFDESTRUCT—emit an event log. Apps and explorers can track ETH movements uniformly, similar to ERC-20 transfers, improving deposit detection and reducing ad-hoc tracing.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Deposits and withdrawals are detected more reliably across apps and exchanges; no change to how users send or receive ETH."
      },
      "appDevs": {
        "description": "Can subscribe to a standard ETH transfer log instead of tracing; requires small updates to indexers and business logic."
      },
      "walletDevs": {
        "description": "Optionally watch a canonical event for ETH transfers to improve UX; otherwise existing send/receive flows remain unchanged."
      },
      "toolingInfra": {
        "description": "Explorers and data indexers must parse and surface the new log; moderate engineering to integrate, test, and backfill if desired."
      },
      "layer2s": {
        "description": "Rollups mirroring L1 EVM semantics may add the same log for consistency; others have no direct requirements."
      },
      "stakersNodes": {
        "description": "More log entries per block; execution node receipts grow slightly, increasing storage and bandwidth requirements for some RPC setups."
      },
      "clClients": {
        "description": "No consensus-layer changes anticipated; minimal or no code modifications beyond recognizing updated receipt sizes from execution payloads."
      },
      "elClients": {
        "description": "Implement emitting a log on value-transferring CALLs, transactions, and SELFDESTRUCT; update EVM and receipt construction; add tests."
      }
    },
    "benefits": [
      "Unified, queryable signal for ETH transfers across EOAs and contracts.",
      "Reduces reliance on tracing for ETH balance change detection.",
      "Improves deposit handling for smart contract wallet senders.",
      "Simplifies indexing and analytics for ETH movement."
    ]
  },
  {
    "id": 7732,
    "title": "EIP-7732: enshrined Proposer-Builder separation (ePBS)",
    "status": "Draft",
    "description": "Enshrines proposer-builder separation at the protocol level to improve MEV resistance and block production efficiency.",
    "author": "Potuz, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-07-15",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7732-enshrined-proposer-builder-separation-epbs/20329",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Scheduled",
        "isHeadliner": true,
        "wasHeadlinerCandidate": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7732-the-case-for-inclusion-in-glamsterdam/24306",
        "layer": "CL",
        "champion": {
          "name": "potuz",
          "discord": "potuz"
        }
      }
    ],
    "laymanDescription": "Proposes the decoupling of the consensus block from the execution payload, both in broadcast and validation. This feature enables L1 scaling by significantly changing the time required to both broadcast and executing the payload together with all the blob data, from the current ~2 seconds to aproximately ~9 seconds. It allows for a maximum portion of the slot to be spent in propagation large data.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Enables for much larger payloads by removing the broadcast and the execution from the hot path of block validation."
      },
      "scaleBlobs": {
        "description": "Enables for much larger number of blobs by removing the broadcast and data availability sampling from the hot path of block validation."
      },
      "improveUX": {
        "description": "Second order effect of lower prices and higher tx throughput. Slight delay in minimal tx iclusion time from 0 to ~2 seconds."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Second order effect of lower prices and higher tx throughput."
      },
      "appDevs": {
        "description": "No direct impact. It enables applications to leverage previous builder information, something that is not currently available. It enables trustless preconfirmation schemes."
      },
      "walletDevs": {
        "description": "No direct impact. It enables wallets to send encrypted txs to anonymous builders."
      },
      "toolingInfra": {
        "description": "Explorers and block monitors need updates to handle the separation of the beacon block from the payload."
      },
      "layer2s": {
        "description": "Second order effect of higher blob count being possible."
      },
      "stakersNodes": {
        "description": "Major changes and updates are needed for trustless monitoring in staking pools. Staking UX is improved by a refined builder picking and monitoring."
      },
      "clClients": {
        "description": "Major changes for CL clients"
      },
      "elClients": {
        "description": "No changes for EL clients."
      }
    },
    "benefits": [
      "Better slot utilization getting close to 100% utilization for broadcasting + execution",
      "Removal of most of the heavy work from the hot path of block validation.",
      "Removal of trust assumptions for proposers and builders.",
      "Removal of trust assumptions on off-protocol closed source software."
    ]
  },
  {
    "id": 7761,
    "title": "EIP-7761: EXTCODETYPE instruction",
    "status": "Review",
    "description": "Add EXTCODETYPE instruction to EOF to address common uses of EXTCODE* instructions",
    "author": "Andrei Maiboroda (@gumb0), Piotr Dobaczewski (@pdobacz), Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-09-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7761-is-contract-instruction/20936",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds an EXTCODETYPE instruction to EOF contracts to distinguish between different account types. EOF removes code introspection capabilities like EXTCODESIZE, but this creates problems for ERC-721 and ERC-1155 tokens that need to know whether a recipient is an EOA (externally owned account) or a contract to implement safe transfers correctly. EXTCODETYPE returns 0 for no code (EOA), 1 for legacy contracts, and 2 for EOF contracts. This enables proper implementation of token standards in EOF while also helping proxy contracts verify that their upgrade targets are safe to call with EXTDELEGATECALL."
  },
  {
    "id": 7762,
    "title": "EIP-7762: Increase MIN_BASE_FEE_PER_BLOB_GAS",
    "status": "Review",
    "description": "Adjust the MIN_BASE_FEE_PER_BLOB_GAS to speed up price discovery on blob space",
    "author": "Max Resnick (@MaxResnick), Davide Crapis (@dcrapis), Ansgar Dietrichs (@adietrichs)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-08-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7762-increase-min-base-fee-per-blob-gas/20949",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This increases the minimum blob base fee from 1 wei to 2^25 wei (about 33 million times higher) to speed up blob price discovery. Currently, when blob demand exceeds supply, it takes too long for prices to climb from the extremely low minimum to actual market rates. The new minimum corresponds to about 1 cent at current ETH prices, similar to the cost of a simple transaction when gas fees are low. The change also resets excess blob gas to zero to prevent a sudden price spike when the upgrade activates. This helps blob-based rollups reach appropriate pricing faster during high-demand periods."
  },
  {
    "id": 7778,
    "title": "EIP-7778: Block Gas Limit Accounting without Refunds",
    "status": "Draft",
    "description": "Prevents block gas limit circumvention by excluding refunds from block accounting; preserves user transaction incentives semantics.",
    "author": "Ben Adams (@benaadams), Toni Wahrstätter (@nerolation)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-10-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7778-prevent-block-gas-smuggling/21234",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Toni Wahrstätter",
          "discord": "nero_eth"
        }
      }
    ],
    "laymanDescription": "Closes a loophole where gas refunds let blocks pack extra work. Refunds still reduce user costs, but don't shrink the block's counted gas. Aligns block size with real EVM work and reduces worst-case block-size variance.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Reduces worst-case block size and variance, improving throughput predictability; does not increase average capacity or lower fees network-wide."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No substantial direct impact; transactions execute as before. Refunds still discount user costs but no longer shrink counted block gas."
      },
      "appDevs": {
        "description": "Contracts generally unchanged. Only strategies exploiting large refunds lose ability to help pack extra computation into blocks via accounting quirks."
      },
      "walletDevs": {
        "description": "No changes required. Gas estimation, fee math, and refund display remain the same at the transaction level for users today."
      },
      "toolingInfra": {
        "description": "Block builders, simulators, and analyzers should enforce and reflect gross block-gas accounting; update tests and dashboards to avoid refund-based variance."
      },
      "layer2s": {
        "description": "Minimal direct impact. Sequencers mirroring L1 semantics may adopt same accounting; otherwise, no changes to rollup fee or capacity models."
      },
      "stakersNodes": {
        "description": "Lower variance in execution work per block improves predictability and reduces pathological worst-case loads; efficiency gains from smoother resource usage."
      },
      "clClients": {
        "description": "No consensus-layer changes expected; negligible impact beyond observing more consistent block execution times on the execution layer during validation overhead."
      },
      "elClients": {
        "description": "Must implement block accounting change and tests; ensure refunds don't reduce block-gas used. Otherwise limited complexity and compatibility concerns overall."
      }
    },
    "benefits": [
      "Aligns block gas with actual EVM work.",
      "Prevents refund-based circumvention of block limits.",
      "Reduces worst-case block size variance.",
      "Improves node execution predictability and safety."
    ]
  },
  {
    "id": 7782,
    "title": "EIP-7782: Reduce Block Latency (6-second slots)",
    "status": "Draft",
    "description": "Reduce Ethereum's slot time from 12s to 6s to decrease latency by 50%, distribute bandwidth usage, and improve UX.",
    "author": "Ben Adams (@benaadams), Dankrad Feist (@dankrad), Julian Ma (@Ma-Julian), Barnabé Monnot (@barnabemonnot)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-10-05",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7782-reduce-block-latency/21271",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Declined",
        "isHeadliner": false,
        "wasHeadlinerCandidate": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7782-the-case-for-2x-shorter-slot-times-in-glamsterdam/24616",
        "layer": "CL"
      }
    ],
    "laymanDescription": "This reduces Ethereum's slot time from 12 seconds to 6 seconds, making Ethereum a better confirmation engine for apps and rollups. Everyone benefits: users get faster confirmations with better censorship resistance, DeFi gets more efficient trading with lower fees, stakers get lower reward variability, and nodes get better resource utilization with smoother bandwidth usage.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Makes Ethereum a superior confirmation engine by doubling proposer frequency while maintaining throughput. Improves censorship resistance through 2x more proposers per unit time."
      },
      "improveUX": {
        "description": "Wallets display fresher data with 6-second confirmations. DeFi exchanges become more efficient with frequent price updates, reducing arbitrage losses and attracting more liquidity."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Transaction confirmations in 3 seconds (on average) instead of 6, with better censorship resistance from 2x more proposers per second. DeFi users enjoy lower trading fees and reduced slippage from more efficient exchanges with frequent price updates."
      },
      "appDevs": {
        "description": "Can build more responsive applications with frequent data triggers reducing staleness. DeFi protocols benefit from tighter spreads, reduced arbitrage losses, and flywheel effects attracting more liquidity and traders."
      },
      "walletDevs": {
        "description": "Can display fresher chain data following transaction inclusion with 6-second head updates. Need to update timing assumptions but deliver significantly improved user responsiveness."
      },
      "toolingInfra": {
        "description": "Block explorers and infrastructure need conditional logic for slot times to handle historical 12s blocks and new 6s blocks. Must implement millisecond-precision timing instead of seconds."
      },
      "layer2s": {
        "description": "Receive L1 finality, safe confirmations, and block inclusion all twice as fast. Based rollups see their sequencing clock move twice as fast. Interoperability protocols get quicker actionable signals."
      },
      "stakersNodes": {
        "description": "Lower reward variability from smaller, more frequent rewards reducing pooling incentives. Better resource utilization with smoother bandwidth usage, but must handle doubled consensus message frequency and new subslot timing (3s/1.5s/1.5s)."
      },
      "clClients": {
        "description": "Major implementation for conditional slot timing logic, new subslot schedules (3s block proposal, 1.5s attestations, 1.5s aggregation), and doubled consensus message processing while maintaining validator participation."
      },
      "elClients": {
        "description": "Gas limit votes halved to maintain \"gas per 12 seconds\" throughput semantics. Blob targets and limits halved. May need investigation of contracts assuming fixed 12-second slot times."
      }
    },
    "benefits": [
      "Halves transaction confirmation time from maximum 12s to maximum 6s with better censorship resistance",
      "Makes DeFi exchanges more efficient with frequent price updates and reduced arbitrage losses",
      "Creates healthier block construction markets with more frequent, smaller auction opportunities",
      "Improves interoperability with faster L1 finality for rollups and bridges",
      "Reduces staking reward variability, benefiting solo stakers and home operators",
      "Smooths bandwidth usage with better resource utilization for node operators",
      "Enables flywheel effects attracting more liquidity and traders to Ethereum",
      "Maintains current throughput while doubling proposer frequency per unit time"
    ]
  },
  {
    "id": 7783,
    "title": "EIP-7783: Add Controlled Gas Limit Increase Strategy",
    "status": "Draft",
    "description": "Adds a controlled gas limit increase strategy.",
    "author": "Giulio Rebuffo (@Giulio2002)",
    "type": "Informational",
    "category": "Core",
    "createdDate": "2024-10-06",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7783-add-controlled-gas-limit-increase-strategy/21282",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This proposes automatic, controlled gas limit increases over time instead of relying on manual adjustments by validators. Currently, gas limits change unpredictably based on individual validator decisions, which can cause network performance issues. The EIP offers three strategies: linear (fixed increase per block), stepwise (increases in steps), and exponential (doubling over intervals). Each includes safeguards like deactivation blocks to prevent indefinite growth. This provides predictable network scaling while giving the ecosystem time to adapt to larger block sizes, and validators retain the ability to halt increases if problems arise."
  },
  {
    "id": 7791,
    "title": "EIP-7791: GAS2ETH opcode",
    "status": "Draft",
    "description": "Introduces a new opcode, `GAS2ETH`, to convert gas to ETH",
    "author": "Charles Cooper (@charles-cooper), Pascal Caversaccio (@pcaversaccio)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-08-13",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7791-gas2eth-opcode/21418",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Charles Cooper",
          "telegram": "big_tech_sux"
        }
      }
    ],
    "laymanDescription": "EIP-7791 creates native fee mechanism for decentralized application by introducing a new GAS2ETH opcode that allows smart contracts to convert gas directly into ETH and send it to a specified address. It provides a new monetization mechanism for smart contract authors and public goods projects that scales with network usage. Instead of complex fee structures or token schemes, developers can charge gas (which users already understand) and receive proportional compensation during high network activity periods. The opcode takes a target address and gas amount, deducts the gas from the transaction, calculates the ETH value using the current gas price, and transfers that ETH to the specified address.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Users can automatically support developers of dapps they are using without using any third party tokens or tools."
      },
      "appDevs": {
        "description": "Contract developers can receive fees propotional to usage of their contract and benefit from its success without building any external mechanism."
      },
      "walletDevs": {
        "description": "Wallets are estimating gas fees as always but when interacting with contracts using this opcode, the estimated fee will include the regular network fee and portion paid to the contract beneficiary address."
      },
      "toolingInfra": {
        "description": "Compilers will have to implement the new opcode and provide new tooling for developers to use it. Explorers should recognize the new fee structure and display the new fee structure. "
      },
      "layer2s": {
        "description": "EVM-equivalent L2s implementing this opcode mirror mainnet behavior; optional adoption otherwise. Expect routine client updates, testing, and gas schedule alignment."
      },
      "stakersNodes": {
        "description": "Node operators simply upgrade clients at fork; runtime behavior unchanged."
      },
      "clClients": {
        "description": "This is EVM only change, consensus changes expected for CL; only standard fork coordination."
      },
      "elClients": {
        "description": "Execution clients need to modify their EVM implementation, gas estimation and metering functions which introduces new complexity."
      }
    },
    "benefits": [
      "Native way for dapp developers to benefit from success of their work without relying on tokens, DAOs or external profit/public goods mechanisms",
      "Fair distribution of fees proportional to contract usage.",
      "Simple and clear UX for dapp users who can continue using their wallets with regular gas fee estimates as before."
    ]
  },
  {
    "id": 7793,
    "title": "EIP-7793: Conditional Transactions",
    "status": "Draft",
    "description": "Transactions that only executes at a specific index and slot.",
    "author": "Marc Harvey-Hill (@Marchhill), Ahmad Bitar (@smartprogrammer93)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-10-17",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7793-asserttxindex-opcode/21513",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Marc Harvey-Hill",
          "discord": "marchhill"
        }
      }
    ],
    "laymanDescription": "Adds a way to make a transaction only valid at a chosen spot in a block, blocking reordering and front-running in encrypted mempools.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Provides users going through encrypted mempools with stronger guarantees against frontrunning."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Potentially fairer execution for services using encrypted mempools; otherwise no changes to sending or receiving transactions."
      },
      "appDevs": {
        "description": "Optional tooling to mark transactions valid at slot/index; useful for encrypted-mempool flows and bundle verification, otherwise no required changes."
      },
      "walletDevs": {
        "description": "Wallets that support encrypted mempools should support new conditional transaction type fields, signing domain, etc; integrate with bundlers where applicable."
      },
      "toolingInfra": {
        "description": "May add decoding/display for conditional fields and type, and support opcode traces in debuggers; otherwise minimal pipeline changes."
      },
      "layer2s": {
        "description": "Optional adoption. L2s without matching consensus can ignore; compatibility unaffected unless they choose to implement equivalent semantics."
      },
      "stakersNodes": {
        "description": "Operationally transparent; validators simply run upgraded clients. No new configuration or monitoring beyond standard client upgrades."
      },
      "clClients": {
        "description": "Indirectly affected via EIP-7843 (if included) dependency exposing slot in headers; otherwise no consensus changes specific to conditional transactions."
      },
      "elClients": {
        "description": "Must implement new transaction type parsing/validation and TXINDEX opcode semantics, including sentinel handling and header slot checks."
      }
    },
    "benefits": [
      "Enforces encrypted-mempool ordering, preventing builder reordering and related frontrunning.",
      "Enables transactions valid only at specified slot and index, supporting top-of-block bundles.",
      "Provides TXINDEX opcode for onchain verification of declared conditional transaction index.",
      "Pairs with EIP-7843 slot header field to verify conditional_slot."
    ]
  },
  {
    "id": 7805,
    "title": "EIP-7805: Fork-Choice Inclusion Lists (FOCIL)",
    "status": "Draft",
    "description": "Fork-Choice enforced Inclusion Lists improve improve censorship resistance by enable multiple proposer to force-include transactions in Ethereum blocks.",
    "author": "Thomas Thiery (@soispoke) <thomas.thiery@ethereum.org>, Francesco D'Amato <francesco.damato@ethereum.org>, Julian Ma <julian.ma@ethereum.org>, BarnabÃ© Monnot <barnabe.monnot@ethereum.org>, Terence Tsao <ttsao@offchainlabs.com>, Jacob Kaufmann <jacob.kaufmann@ethereum.org>, Jihoon Song <jihoonsong.dev@gmail.com>",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-05-15",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7805-committee-based-fork-choice-enforced-inclusion-lists-focil/21578",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Considered",
        "isHeadliner": false,
        "wasHeadlinerCandidate": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7805-fork-choice-inclusion-lists-focil-as-a-candidate-for-glamsterdam/24342",
        "layer": "CL",
        "champion": {
          "name": "soispoke",
          "discord": "soispoke"
        }
      }
    ],
    "laymanDescription": "FOCIL empowers multiple validators to mandate the inclusion of specific transactions in each block, thereby improving the network's censorship resistance properties.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Ethereum currently relies on local block builders to preserve censorship resistance. However, depending on local block builders comes at a cost to performance and incentives, which may conflict with scaling throughput. FOCIL is crucial in L1 scaling because it helps decouple local block building from censorship resistance."
      },
      "scaleBlobs": {
        "description": "A more censorship-resistant L1 provides better foundation for Layer 2 settlement guarantees, and allows to shorten the exit time window for optimistic rollups."
      },
      "improveUX": {
        "description": "Provides strong guarantees against transaction censorship and ensures fair access to block space for all users regardless of transaction content."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Strong protection against transaction censorship for all end users, guaranteed inclusion for valid transactions, and improved confidence in Ethereum's credible neutrality."
      },
      "appDevs": {
        "description": "Can build applications with stronger inclusion guarantees and reduced concerns about application-specific censorship."
      },
      "walletDevs": {
        "description": "Can provide users with stronger transaction inclusion guarantees and better protection against selective censorship."
      },
      "toolingInfra": {
        "description": "Censorship monitoring tools, inclusion list analysis, and validator behavior tracking systems need major updates after FOCIL implementation."
      },
      "layer2s": {
        "description": "More censorship-resistant L1 settlement provides stronger guarantees for Layer 2 transaction processing, bridge operations, and reduces rollup challenge period risks."
      },
      "stakersNodes": {
        "description": "Validators must now build inclusion lists according to the protocol rules, and attesters must enforce inclusion lists conditions are satisfied before voting for a block."
      },
      "clClients": {
        "description": "Major implementation work required for inclusion lists propagation and enforcement, including fork-choice modifications."
      },
      "elClients": {
        "description": "Need build inclusion lists, to update the execution payload with inclusion list transactions, and communicate with the consensus layer."
      }
    },
    "benefits": [
      "Provides strong censorship resistance guarantees",
      "Ensures fair access to block space for all users",
      "Strengthens Ethereum's credible neutrality"
    ]
  },
  {
    "id": 7819,
    "title": "EIP-7819: SETDELEGATE instruction",
    "status": "Draft",
    "description": "Introduce a new instruction allowing contracts to create clones using EIP-7702 delegation designations",
    "author": "Hadrien Croubois (@amxx)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-11-18",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7819-create-delegate/21763",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Hadrien Croubois",
          "discord": "hadriencroubois"
        }
      }
    ],
    "laymanDescription": "Adds a new instruction for upgradeable, lightweight contract clones via EIP-7702 delegation. This is similar to upgradable proxy contracts but enabled natively on protocol level, therfore cutting gas and complexity.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Native delegation provides upgradeability without the need for storage lookups and removes any issue related to code version incompatibilities. Development of contracts using proxies becomes easier and users benefit from additional security."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Most users see unchanged behavior; some smart accounts may become cheaper and smoother, with minor upgrade-related risk managed by factories."
      },
      "appDevs": {
        "description": "Contract developers get a way to create upgradeable clones, reducing gas and complexity; must guard against chaining and immediate delegation changes."
      },
      "walletDevs": {
        "description": "Smart-account wallets may benefit from cheaper verification and operations; minimal code changes expected, aside from supporting delegation-aware introspection and risk messaging."
      },
      "toolingInfra": {
        "description": "Explorers, indexers, and debuggers should recognize delegation indicators and mid-transaction updates; otherwise limited changes beyond existing EIP-7702 handling."
      },
      "layer2s": {
        "description": "EVM-equivalent L2s implementing this opcode mirror mainnet behavior; optional adoption otherwise. Expect routine client updates, testing, and gas schedule alignment."
      },
      "stakersNodes": {
        "description": "Node operators simply upgrade clients at fork; runtime behavior unchanged. Increased use of delegations may slightly affect tracing tools, not validation."
      },
      "clClients": {
        "description": "No consensus changes expected for CL; only standard fork coordination. No new serialization, gossip, or signature rules introduced by this opcode."
      },
      "elClients": {
        "description": "Must implement SETDELEGATE semantics, gas accounting, refunds, and EIP-2929 touches; ensure compatibility with EIP-7702 delegation indicators and immediate-effect code updates."
      }
    },
    "benefits": [
      "Upgradeable clones without storage lookups, using EIP-7702 delegation indicators.",
      "Lower gas by moving call redirection from EVM bytecode to protocol.",
      "Smaller state footprint than proxies; delegation objects are only 23 bytes.",
      "Immediate, factory-controlled upgrades or locking, reducing complexity in account factories."
    ]
  },
  {
    "id": 7823,
    "title": "EIP-7823: Set upper bounds for MODEXP",
    "status": "Review",
    "description": "Each input field is restricted to a maximum of 8192 bits",
    "author": "Alex Beregszaszi (@axic), Radoslaw Zagorowicz (@rodiazet)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-11-11",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7823-set-upper-bounds-for-modexp/21798",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This introduces a 8192-bit (1024 byte) limit on each input to the MODEXP cryptographic precompile. MODEXP has been a source of consensus bugs due to unbounded inputs. By setting practical limits that cover all real-world use cases (like RSA verification), this reduces the testing surface area and paves the way for future replacement with more efficient EVM code.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Improves network reliability by preventing consensus bugs and reducing testing complexity for a critical precompile."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No impact - analysis shows no historical transactions would be affected by these limits."
      },
      "appDevs": {
        "description": "Applications using very large cryptographic operations (>8192 bits) would need to restructure, but no known use cases exist."
      },
      "walletDevs": {
        "description": "No user-facing impact as limits exceed all practical cryptographic use cases."
      },
      "toolingInfra": {
        "description": "Gas estimation and fee calculation tools need updates for the new ModExp pricing formula."
      },
      "layer2s": {
        "description": "Provides more predictable gas costs for cryptographic operations in L2 smart contracts."
      },
      "stakersNodes": {
        "description": "Reduced risk of consensus bugs and more predictable resource usage for MODEXP operations."
      },
      "clClients": {
        "description": "No changes required for consensus layer implementations."
      },
      "elClients": {
        "description": "Must implement bounds checking for MODEXP inputs and handle new error conditions for oversized inputs."
      }
    },
    "benefits": [
      "Eliminates underpriced cryptographic operations",
      "Prevents potential DoS attacks",
      "Better compensation for computational work",
      "More consistent gas pricing"
    ]
  },
  {
    "id": 7825,
    "title": "EIP-7825: Transaction Gas Limit Cap",
    "status": "Draft",
    "description": "Introduce a protocol-level cap on the maximum gas used by a transaction to 16,777,216 (2^24).",
    "author": "Giulio Rebuffo (@Giulio2002), Toni Wahrstätter (@nerolation)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-11-23",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7825-transaction-gas-limit-cap/21848",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This introduces a 16,777,216 gas (2^24) cap for individual transactions, preventing any single transaction from consuming most of a block. The goal is to ensure fairer access to block space and improve network stability.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Improves network stability and resilience against DoS attacks by preventing individual transactions from consuming excessive block space, enabling more predictable block validation times."
      },
      "improveUX": {
        "description": "More predictable transaction inclusion and fairer access to block space, though may require some large applications to restructure their operations."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Most users unaffected as typical transactions use far less than 16.8M gas. Edge cases with very complex operations may need to restructure."
      },
      "appDevs": {
        "description": "Applications with very large transactions (complex DeFi, large contract deployments) may need to split operations or redesign architecture to stay under the cap."
      },
      "walletDevs": {
        "description": "Need to enforce the gas cap in transaction creation, but most wallet operations are well below the limit."
      },
      "toolingInfra": {
        "description": "Gas estimation tools, transaction builders, and deployment scripts need updates to enforce the 16.8M gas cap."
      },
      "layer2s": {
        "description": "Could impact future L2 bundling strategies and settlement transaction designs. May conflict with efficient batch processing approaches."
      },
      "stakersNodes": {
        "description": "More predictable block processing times and reduced risk of validation bottlenecks from extremely large transactions."
      },
      "clClients": {
        "description": "No direct impact on consensus layer operations as this affects execution layer transaction validation."
      },
      "elClients": {
        "description": "Need to implement transaction pool validation to reject transactions exceeding the gas cap and block validation to reject blocks containing invalid transactions."
      }
    },
    "benefits": [
      "Prevents single transactions from hogging block space",
      "Ensures fairer access for all users",
      "Reduces network instability risks",
      "Enables safer block capacity increases"
    ]
  },
  {
    "id": 7834,
    "title": "EIP-7834: Separate Metadata Section for EOF",
    "status": "Review",
    "description": "Introduce a new separate metadata section to the EOF",
    "author": "Kaan Uzdogan (@kuzdogan), Marco Castignoli (@marcocastignoli), Manuel Wedler (@manuelwedler)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-12-06",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7834-separate-metadata-section-for-eof/22138",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds a dedicated metadata section to EOF contracts that is completely separate from executable code and data. Currently, compilers include metadata (like compiler versions, IPFS hashes of source files) by mixing it with contract data, which creates problems for source code verification and causes different bytecode when metadata changes. The new metadata section solves these issues by being unreachable by contract execution, unchanging after deployment, and clearly separated from functional code. This makes source code verification much easier and ensures that contracts with identical logic but different metadata will have the same executable bytecode."
  },
  {
    "id": 7840,
    "title": "EIP-7840: Add blob schedule to EL config files",
    "status": "Final",
    "description": "Adds blob schedule configuration to execution layer config files for better blob management.",
    "author": "lightclient",
    "type": "Informational",
    "category": "Interface",
    "createdDate": "2024-05-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7840-add-blob-schedule-to-el-config-files/20100",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ],
    "laymanDescription": "Adds a new blob related parameters to client config so targets, maximums, and fee adjustments can be easily configured.",
    "northStarAlignment": {
      "scaleBlobs": {
        "description": "Enables easier configuration for blob target value and its scaling in the future."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No direct impact."
      },
      "appDevs": {
        "description": "No changes for contract developers."
      },
      "walletDevs": {
        "description": "No impact on wallets."
      },
      "toolingInfra": {
        "description": "Simplifies introspection of blob parameters from network configs."
      },
      "layer2s": {
        "description": "Rollups can benefit from clearer capacity settings."
      },
      "stakersNodes": {
        "description": "Easier to follow blob schedule updates."
      },
      "clClients": {
        "description": "CL needs to be aware of new config fields."
      },
      "elClients": {
        "description": "Genesis configuration processing needs to implement new fields."
      }
    },
    "benefits": [
      "Reduces coordination overhead between clients",
      "Enables dynamic tuning of blob capacity",
      "Improves ops clarity for testnets"
    ]
  },
  {
    "id": 7843,
    "title": "EIP-7843: SLOTNUM opcode",
    "status": "Review",
    "description": "Opcode to get the current slot number.",
    "author": "Marc Harvey-Hill (@Marchhill)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-12-06",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7843-slotnum-opcode/22234",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Marc Harvey-Hill",
          "discord": "marchhill"
        }
      }
    ],
    "laymanDescription": "Let contracts directly read the current slot number cheaply, removing timestamp math and reducing breakage if Ethereum's slot duration changes later.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Enables more reliable time-based smart contracts and better coordination between consensus and execution layers."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Indirectly benefits from more reliable app timing if slot duration changes in future networks."
      },
      "appDevs": {
        "description": "Simplifies reading beacon time onchain, avoiding timestamp math and EIP-4788 proofs; fewer assumptions about the slot schedule."
      },
      "walletDevs": {
        "description": "Little to no impact; wallets typically don't consume slot numbers. Optional UI or simulation support could display it."
      },
      "toolingInfra": {
        "description": "Block explorers, RPC simulators, and debuggers may add opcode support and parse the new header slot_number field."
      },
      "layer2s": {
        "description": "Optional support; helpful if mirroring L1 semantics. Not required unless chains want SLOTNUM compatibility and header field parity."
      },
      "stakersNodes": {
        "description": "No operational changes expected; clients handle computation and propagation. Node operators shouldn't need configuration or workflow updates."
      },
      "clClients": {
        "description": "Must compute slot_number and include it in headers and engine API payloads; aligns with existing consensus-layer slot calculations."
      },
      "elClients": {
        "description": "Implement new opcode, validate header field, expose via RPC, and price gas; updates required across execution clients."
      }
    },
    "benefits": [
      "Removes hardcoded slot assumptions; apps remain correct if slot duration changes.",
      "Cheaper than proving slot via EIP-4788; simple 2-gas opcode call.",
      "Slot number available directly in block header and engine API.",
      "No added proving complexity; similar to TIMESTAMP for ZK-VMs."
    ]
  },
  {
    "id": 7872,
    "title": "Max blob flag for local builders",
    "status": "Draft",
    "description": "Adds a flag to the block builder to let operators configure a maximum number of blobs per locally built block. This is an execution-layer–only change.",
    "author": "Francesco D'Amato <francesco.damato@ethereum.org>, Kevaundray Wedderburn (@kevaundray), Toni Wahrstätter (@nerolation), Alex Stokes (@ralexstokes), Ben Adams (@benaadams), Gajinder Singh (@g11tech), Dustin (@tersec)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-01-30",
    "discussionLink": "https://ethereum-magicians.org/t/max-blob-flags-for-local-builders/22734",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Kevaundray Wedderburn",
          "discord": "kevaundray"
        }
      }
    ],
    "laymanDescription": "Lets node operators set a cap on how many blob-carrying transactions their local builder includes in a block, helping bandwidth-constrained setups avoid overfilling blocks with blobs.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No direct UX changes; transaction semantics remain identical. Only block composition may vary by operator settings."
      },
      "appDevs": {
        "description": "No EVM or API changes. Apps sending blob transactions behave the same; inclusion depends on local builder caps."
      },
      "walletDevs": {
        "description": "No transaction format or signing changes. Wallet functionality unaffected by this configuration-only execution change."
      },
      "toolingInfra": {
        "description": "Execution-layer builder tooling should expose and respect a configurable max-blobs parameter. Relays and CL nodes unchanged."
      },
      "layer2s": {
        "description": "No protocol changes. Locally built L1 blocks may include fewer blob transactions when operators configure lower caps."
      },
      "stakersNodes": {
        "description": "Validators running local builders gain a tuning knob aligned with bandwidth. No consensus or fork-choice changes."
      },
      "clClients": {
        "description": "No code changes expected; EL-only behavior. Headers, fork choice, and gossip remain unchanged for consensus clients."
      },
      "elClients": {
        "description": "Add a config flag and enforce it during blob tx selection. Validate against protocol maximum and local cap."
      }
    },
    "benefits": [
      "Gives operators control over blob load.",
      "Mitigates blob availability risks on low bandwidth.",
      "EL-only change with limited surface area.",
      "No changes to transaction or consensus formats."
    ]
  },
  {
    "id": 7873,
    "title": "EIP-7873: EOF - TXCREATE and InitcodeTransaction type",
    "status": "Review",
    "description": "Adds a `TXCREATE` instruction to EOF and an accompanying transaction type allowing to create EOF contracts from transaction data",
    "author": "Piotr Dobaczewski (@pdobacz), Andrei Maiboroda (@gumb0), Paweł Bylica (@chfast), Alex Beregszaszi (@axic), Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-01-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7873-eof-txcreate-instruction-and-initcodetransaction-type/22765",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces a new way to deploy EOF contracts by adding a TXCREATE instruction and a special InitcodeTransaction type. The problem it solves is that EOF removes the traditional CREATE and CREATE2 instructions used to deploy contracts. With this EIP, both regular users (EOAs) and smart contracts can deploy EOF contracts by including the contract code directly in transaction data and using TXCREATE to deploy it. This works alongside the existing EOFCREATE instruction, giving developers all the contract creation capabilities they had before EOF. The TXCREATE instruction can also deploy legacy contracts, making it a universal bootstrapping mechanism for getting EOF contracts onto the blockchain."
  },
  {
    "id": 7880,
    "title": "EIP-7880: EOF - EXTCODEADDRESS instruction",
    "status": "Review",
    "description": "Add EXTCODEADDRESS instruction to EOF to address code delegation use cases",
    "author": "Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-02-08",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7880-eof-extcodeaddress-instruction/22845",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds a new EXTCODEADDRESS instruction to EOF contracts that helps them work with EIP-7702 delegation accounts without breaking EOF's no-code-introspection rule. The problem it solves is that EOF removes the ability to read raw contract code, but contracts still need to know when an account is delegating execution to another address. This instruction takes an address and returns the actual address that will execute the code - for regular accounts it returns the same address, but for delegated accounts it returns the address they're delegating to. This enables important use cases like managed proxy contracts ensuring they don't delegate to unsafe addresses, sponsorship contracts verifying delegation hasn't changed during a transaction, and security-conscious contracts that only accept specific delegation targets."
  },
  {
    "id": 7883,
    "title": "EIP-7883: ModExp Gas Cost Increase",
    "status": "Draft",
    "description": "Increases cost of ModExp precompile",
    "author": "Marcin Sobczak (@marcindsobczak), Marek Moraczyński (@MarekM25), Marcos Maceo (@stdevMac)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-02-11",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7883-modexp-gas-cost-increase/22841",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This increases the gas cost of the ModExp cryptographic precompile to address underpriced operations. It raises the minimum cost from 200 to 500 gas and doubles costs for large inputs over 32 bytes.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Improves network economic sustainability by ensuring cryptographic precompiles are properly priced, preventing potential DoS vectors from underpriced operations."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Most users unaffected. Applications using ModExp with large inputs (>32 bytes) will see increased gas costs."
      },
      "appDevs": {
        "description": "Applications using RSA verification, large modular exponentiation, or cryptographic protocols with big numbers may need to optimize or budget for higher costs."
      },
      "walletDevs": {
        "description": "No impact as wallets typically don't use ModExp precompile directly."
      },
      "toolingInfra": {
        "description": "Gas estimation and fee calculation tools need updates for the new ModExp pricing formula."
      },
      "layer2s": {
        "description": "L2s using ModExp precompile for cryptographic operations will see increased costs for large input operations."
      },
      "stakersNodes": {
        "description": "Better compensation alignment for computational work, reduced risk of DoS attacks through underpriced operations."
      },
      "clClients": {
        "description": "No direct impact on consensus layer operations as this affects execution layer precompile pricing."
      },
      "elClients": {
        "description": "Need to implement the updated ModExp pricing formula with new minimum costs and scaling factors for large inputs."
      }
    },
    "benefits": [
      "Fixes underpriced ModExp operations that cost less than simpler precompiles",
      "Ensures ModExp pricing reflects actual computational cost",
      "Prevents potential DoS from cheap complex operations",
      "Aligns gas costs with performance benchmarks"
    ]
  },
  {
    "id": 7886,
    "title": "EIP-7886: Delayed Execution",
    "status": "Draft",
    "description": "Separate block validation from execution.",
    "author": "Francesco D'Amato (@fradamt), Toni Wahrstätter (@nerolation)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-02-18",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7886-delayed-execution/22890",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "",
        "isHeadliner": false,
        "wasHeadlinerCandidate": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7886-delayed-execution-the-case-for-glamsterdam/24500",
        "layer": "EL"
      }
    ],
    "laymanDescription": "Lets validators attest before execution by deferring execution outputs, improving throughput headroom.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Reduces validation latency and can enable higher block gas limits, contributing to L1 throughput."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Largely transparent; faster attestations possible, but no guaranteed MEV/fairness changes. Same-block funding patterns may fail due to pre-checks."
      },
      "appDevs": {
        "description": "Must handle deferred receipts/logs in the child header and possible payload reversion; core application semantics and APIs remain unchanged."
      },
      "walletDevs": {
        "description": "Adapt UX for attestation-before-execution, surfacing pending states; enforce nonce/balance prechecks and warn about same-block funding limitations."
      },
      "toolingInfra": {
        "description": "Indexers, explorers, and RPCs must track deferred execution outputs, the execution_reverted flag, and updated base-fee behavior for reverted parents."
      },
      "layer2s": {
        "description": "Bridges and settlement relying on L1 receipts should accommodate one-block deferral and detect reverted-parent semantics; data availability rules remain unchanged."
      },
      "stakersNodes": {
        "description": "Validators/proposers attest earlier after static checks; need new header validation, deferred-output tracking, and off-critical-path execution scheduling."
      },
      "clClients": {
        "description": "Must process new header fields and parent flags, manage EL request deferrals, and integrate with EL without changing fork-choice rules."
      },
      "elClients": {
        "description": "Significant work: split static validation from execution, implement sender pre-charging, snapshots/reversion, new chain-state tracking, and base-fee handling for reverts."
      }
    },
    "benefits": [
      "Asynchronous attestation before execution reduces the critical path, enabling higher gas limits and overall network throughput.",
      "Minimal checks using previous state and parent outputs let validators deem blocks valid without executing transactions.",
      "Senders are pre-charged maximum fees and balances/nonces verified, significantly reducing execution-time failures and fragile same-block dependencies.",
      "Snapshot-and-revert preserves liveness: mismatched gas used resets receipts, logs, and execution outputs without discarding blocks from the chain.",
      "Base-fee dynamics remain fair: reverted parents count as zero gas used, preventing fee-market manipulation via overdeclared usage."
    ]
  },
  {
    "id": 7889,
    "title": "EIP-7889: Emit log on revert",
    "status": "Draft",
    "description": "Top level reverts emit a log with revert message",
    "author": "Shoham Chakraborty (@shohamc1), Alex Forshtat (@forshtat)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-02-20",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7889-emit-log-on-revert/22918",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This automatically makes error messages from failed transactions easily accessible by emitting them as logs. Currently, when a transaction fails (reverts), the error message explaining why it failed is hard to get - you need to request expensive transaction tracing to access it. This creates overhead for users who want to understand why their transaction failed and for nodes that have to replay entire transactions just to extract small error messages. This EIP solves the problem by automatically emitting a log containing the revert message whenever the REVERT opcode is called. This makes error messages accessible through standard RPC calls without any tracing, helping wallets, block explorers, and other tools display helpful error messages to users. It's completely backward compatible and doesn't require any new opcodes or RPC methods."
  },
  {
    "id": 7892,
    "title": "EIP-7892: Blob Parameter Only ('BPO') Hardforks",
    "status": "Draft",
    "description": "Enables hardforks that only modify blob-related parameters without requiring a new fork-version or changing any other consensus rules.",
    "author": "Mark Mackey (@ethDreamer), Raúl Kripalani (@raulk)",
    "type": "Informational",
    "createdDate": "2025-02-28",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7892-blob-parameter-only-hardforks/23018",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This creates a new lightweight process to adjust blob storage parameters. Instead of waiting for a major upgrade, Ethereum can make smaller, more frequent adjustments to blob capacity to accommodate changing demand from Layer 2s.",
    "northStarAlignment": {
      "scaleBlobs": {
        "description": "Directly addresses the rapid growth in L2 data availability demand by enabling more frequent, incremental blob capacity increases to prevent sustained saturation."
      },
      "improveUX": {
        "description": "Provides predictable scaling framework that gives L2 builders confidence to commit to Ethereum over alternative DA solutions."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Indirect benefits through more responsive blob capacity scaling leading to lower and more stable L2 transaction costs."
      },
      "appDevs": {
        "description": "More predictable data availability scaling gives developers confidence to build applications requiring consistent blob capacity growth."
      },
      "walletDevs": {
        "description": "Minimal direct impact. Benefits indirectly through improved L2 scaling economics and more stable transaction costs."
      },
      "toolingInfra": {
        "description": "Major updates needed for upgrade tracking, blob parameter monitoring, and tooling to handle the new BPO fork mechanism."
      },
      "layer2s": {
        "description": "Critical for L2 growth strategy - enables continuous scaling of data availability capacity to match rapidly growing demand without waiting for major hard forks."
      },
      "stakersNodes": {
        "description": "Need to handle more frequent but lighter-weight network upgrades. Simplified upgrade process reduces operational overhead compared to full hard forks."
      },
      "clClients": {
        "description": "Significant changes needed for blob schedule management, modified compute_fork_digest implementation, and P2P networking updates including ENR extensions."
      },
      "elClients": {
        "description": "Major implementation work required for blob schedule configuration management, activation timestamp handling, and coordination with consensus layer blob parameter changes."
      }
    },
    "benefits": [
      "Faster response to Layer 2 data demand growth",
      "Lighter coordination than full network upgrades",
      "Predictable scaling roadmap for builders",
      "Safer capacity increases through smaller steps"
    ]
  },
  {
    "id": 7898,
    "title": "EIP-7898: Uncouple execution payload from beacon block",
    "status": "Draft",
    "description": "Separates the execution payload from beacon block to independently transmit them",
    "author": "Gajinder Singh (@g11tech)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-01",
    "discussionLink": "https://ethereum-magicians.org/t/uncouple-execution-payload-from-beacon-block/23029",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This addresses a fundamental scalability bottleneck by separating transaction data from consensus data in Ethereum blocks. Currently, beacon blocks contain all transaction data embedded within them, but as Ethereum aims to increase block sizes (potentially by 10x), this creates serious networking and processing problems. Larger transaction payloads cause higher latencies for block transmission, increased bandwidth requirements, and longer block processing times that hurt validator performance. This EIP solves these issues by replacing the full transaction data in beacon blocks with just a header, while transmitting the actual transaction data separately. This allows the consensus layer to process blocks quickly while handling much larger transaction payloads independently. Additional benefits include reduced storage requirements for beacon nodes, more efficient proposer-builder separation, and laying groundwork for future innovations like ZK-proof-based execution validation where transaction data could be handled similarly to blobs with data availability sampling."
  },
  {
    "id": 7903,
    "title": "EIP-7903: Remove Initcode Size Limit",
    "status": "Draft",
    "description": "Removes the initcode size limit introduced in EIP-3860",
    "author": "Charles Cooper (@charles-cooper)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-05",
    "discussionLink": "https://ethereum-magicians.org/t/remove-initcode-size-limit/23066",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Charles Cooper",
          "telegram": "big_tech_sux"
        }
      }
    ],
    "laymanDescription": "This removes the 49,152-byte limit on initialization code (initcode) that was introduced by EIP-3860. The problem this solves is that the current limit makes it unnecessarily difficult to deploy large, complex smart contracts that need to create multiple sub-contracts in a single transaction. For example, if you want to deploy a sophisticated DeFi protocol that consists of several interconnected contracts, you might hit the initcode limit even though each final contract stays under the 24KB deployed code limit (EIP-170). This forces developers to split deployments across multiple transactions, which is more expensive, less efficient, and breaks the clean abstractions that high-level programming languages try to provide. By removing this artificial limit, the EIP allows for more flexible deployment patterns while still maintaining security through existing gas costs that scale with initcode size. The per-block gas limit already naturally restricts initcode to reasonable sizes (around 16MB at current gas limits), making the 49KB cap redundant. This change is fully backward compatible and only removes restrictions without changing how contracts work.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Contract developers deploying big projects will have much easier life and users can also verify contracts they interact with more easily."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Not a direct impact on regular usage. But users who investage how was the contract setup and verifying what they interact it will have it more straightforward."
      },
      "appDevs": {
        "description": "Developers will hugely benefit from this change, especially when deploying big set of contracts with complex initialization. No workarounds and less complexity, only straight forward setup even for complex projects."
      },
      "walletDevs": {
        "description": "No direct impact on wallet devs. If wallets have onchain infrastracture, their developers might benefit from easier deployments."
      },
      "toolingInfra": {
        "description": "Explorers need to be able to display the bigger initcode."
      },
      "layer2s": {
        "description": "EVM-equivalent need to implement the change to follow the execution layer specification."
      },
      "stakersNodes": {
        "description": "Node operators shouldn't notice a direct change because the bigger initcode still fits in the same block size. Over the time, stored initcode will take bigger part of the disk space."
      },
      "clClients": {
        "description": "No consensus changes expected for CL; only standard fork coordination."
      },
      "elClients": {
        "description": "EL clients implementation is simple, only removes or changes the hardcoded size limit."
      }
    },
    "benefits": [
      "Smoother deployment of big projects, no more extra tooling needed.",
      "Developer experience is much more straightforward and follows industry standarts."
    ]
  },
  {
    "id": 7904,
    "title": "EIP-7904: General Repricing",
    "status": "Draft",
    "description": "Proposal for adjusting gas costs to better reflect computational complexity of operations.",
    "author": "Jacek Glen (@JacekGlen), Lukasz Glen (@lukasz-glen), Maria Silva (@misilva73)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-02-05",
    "discussionLink": "https://ethereum-magicians.org/t/gas-cost-repricing-to-reflect-computational-complexity/23067",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Maria Silva",
          "discord": "misilva73"
        }
      }
    ],
    "laymanDescription": "Rebalances gas costs to ensure they accurately reflect the computational workload of operations, enhancing network efficiency.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Users may see cost changes for certain transactions."
      },
      "appDevs": {
        "description": "Developers can optimize smart contracts with more accurate gas costs, greatly enhancing efficiency."
      },
      "walletDevs": {
        "description": "Wallet developers may need to adjust fee estimation mechanisms based on new gas pricing."
      },
      "toolingInfra": {
        "description": "Tools must adapt to new gas cost structures to ensure accurate reporting and estimation."
      },
      "layer2s": {
        "description": "L2 solutions will need to align their gas pricing with changes introduced to maintain compatibility."
      },
      "stakersNodes": {
        "description": "Node operators will upgrade clients to manage new gas structures but should expect minimal disruption."
      },
      "clClients": {
        "description": "No consensus changes expected; focus on routine fork coordination with existing protocols."
      },
      "elClients": {
        "description": "Must adapt gas accounting and refunds, ensuring compatibility with existing EIP metrics and updates."
      }
    },
    "benefits": [
      "Aligns gas pricing with empirical computational complexity.",
      "Improves network throughput by optimizing pricing schemes.",
      "Enhances the security of the network against token abuse.",
      "Simplifies cost estimation for developers and users alike."
    ]
  },
  {
    "id": 7907,
    "title": "EIP-7907: Meter Contract Code Size And Increase Limit",
    "status": "Draft",
    "description": "Increases the contract code size limit introduced in EIP-170 and adds a gas metering to code loading",
    "author": "Charles Cooper (@charles-cooper), Qi Zhou (@qizhou)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-14",
    "discussionLink": "https://ethereum-magicians.org/t/eip-remove-contract-size-limit/23156",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Charles Cooper",
          "telegram": "big_tech_sux"
        }
      }
    ],
    "laymanDescription": "This increases the contract code size limit from 24KB to 256KB and introduces gas metering for larger contracts. The change eliminates the need for complex architectural workarounds and enables more sophisticated single-contract applications.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Better resource management and gas metering for large contracts while maintaining network efficiency and preventing DoS attacks."
      },
      "improveUX": {
        "description": "Major developer experience improvement - eliminates need for complex architectural patterns like Diamond Standard, reduces deployment complexity, and enables single-contract solutions."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Indirect benefits through access to more sophisticated single-contract applications and potentially lower gas costs from reduced cross-contract calls."
      },
      "appDevs": {
        "description": "Eliminates major architectural constraints - can build larger, more complex contracts without splitting logic across multiple contracts or using proxy patterns."
      },
      "walletDevs": {
        "description": "Can interact with more sophisticated single-contract applications, but need to handle higher gas costs for large contract interactions."
      },
      "toolingInfra": {
        "description": "Contract verification tools, static analysis, and deployment infrastructure need updates to handle larger contracts and new gas metering."
      },
      "layer2s": {
        "description": "Can deploy larger, more sophisticated infrastructure contracts without hitting size limits."
      },
      "stakersNodes": {
        "description": "Need updated client implementations with proper gas metering and efficient codesize indexing. Larger contracts may increase storage and processing requirements."
      },
      "clClients": {
        "description": "No direct impact on consensus layer operations as this affects execution layer contract deployment and metering."
      },
      "elClients": {
        "description": "Need to implement new gas metering for code-loading operations, warm/cold code access tracking, and efficient codesize indexing to avoid DoS attacks from large contract loads."
      }
    },
    "benefits": [
      "Enables much larger smart contracts (10x size increase)",
      "Eliminates complex multi-contract workarounds",
      "Reduces gas costs from cross-contract calls",
      "Makes development more accessible"
    ]
  },
  {
    "id": 7912,
    "title": "EIP-7912: Pragmatic stack manipulation tools",
    "status": "Draft",
    "description": "Add additional SWAP and DUP operations for deeper stack access",
    "author": "lightclient (@lightclient)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-25",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7912-pragmatic-expansion-of-stack-manipulation-tools/23826",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds practical stack manipulation tools to the EVM without requiring the complex EOF format. It extends the existing SWAP and DUP instructions to reach deeper stack positions (up to 24 positions), adds dynamic SWAPN and DUPN instructions for variable depth access, and introduces an EXCHANGE instruction that can swap any two arbitrary stack positions. These tools help compilers generate more efficient code when dealing with complex functions that have many local variables, reducing gas costs and bytecode size. Unlike previous attempts that required new code formats, this proposal works with existing legacy contracts by requiring specific PUSH instructions before the dynamic operations, making it a pragmatic solution that provides better stack access without breaking backward compatibility."
  },
  {
    "id": 7917,
    "title": "EIP-7917: Deterministic proposer lookahead",
    "status": "Draft",
    "description": "Pre-calculate and store a deterministic proposer lookahead in the beacon state at the start of every epoch",
    "author": "Lin Oshitani (@linoscope) <lin@nethermind.io>, Justin Drake (@JustinDrake) <justin@ethereum.org>",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-24",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7917-deterministic-proposer-lookahead/23259",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This makes Ethereum's block proposer schedule completely predictable ahead of time. Currently, validators can't know who will propose blocks in the next epoch until it starts, which creates uncertainty for MEV mitigation and preconfirmation protocols. This change pre-calculates and stores the proposer schedule for future epochs, making it deterministic and accessible to applications.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Enables reliable preconfirmation services and improved transaction ordering predictability."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Better protection from MEV extraction through improved preconfirmation services and more predictable transaction ordering."
      },
      "appDevs": {
        "description": "Can build more sophisticated MEV mitigation strategies and preconfirmation protocols with predictable proposer schedules."
      },
      "walletDevs": {
        "description": "Can implement better MEV protection features and more reliable transaction timing predictions for users."
      },
      "toolingInfra": {
        "description": "MEV analysis tools, preconfirmation services, and block builder infrastructure need updates to leverage predictable proposer schedules."
      },
      "layer2s": {
        "description": "More predictable L1 block production timing improves Layer 2 settlement coordination and transaction scheduling."
      },
      "stakersNodes": {
        "description": "Minimal impact on validator operations, but provides better visibility into future proposer assignments."
      },
      "clClients": {
        "description": "Need to implement proposer lookahead calculation and storage in beacon state, with additional computation at epoch boundaries."
      },
      "elClients": {
        "description": "Minimal impact as this primarily affects consensus layer proposer scheduling and beacon state management."
      }
    },
    "benefits": [
      "Improves predictability for based preconfirmation protocols",
      "Makes block proposer schedule deterministic"
    ]
  },
  {
    "id": 7918,
    "title": "EIP-7918: Blob base fee bounded by execution cost",
    "status": "Review",
    "description": "Imposes that the price for GAS_PER_BLOB is greater than the price for BLOB_BASE_COST",
    "author": "Anders Elowsson (@anderselowsson), Ben Adams (@benaadams), Francesco D'Amato (@fradamt)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-25",
    "discussionLink": "https://ethereum-magicians.org/t/eip-blob-base-fee-bounded-by-price-of-blob-carrying-transaction/23271",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This addresses blob fee market problems by introducing a reserve price tied to execution costs. When Layer 2 execution costs dominate blob costs, this prevents the blob fee market from becoming ineffective at 1 wei. See a storybook-style explanation [here](https://notes.ethereum.org/@anderselowsson/AIG)!",
    "northStarAlignment": {
      "scaleBlobs": {
        "description": "Critical for L2 economics - ensures sustainable blob pricing that reflects true costs and maintains effective price discovery as L2 usage scales."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "More stable and predictable Layer 2 transaction costs, avoiding dramatic fee spikes when blob market becomes inelastic."
      },
      "appDevs": {
        "description": "More predictable blob cost modeling for applications, especially those with consistent data posting patterns."
      },
      "walletDevs": {
        "description": "More predictable fee estimation for Layer 2 transactions due to improved blob pricing stability."
      },
      "toolingInfra": {
        "description": "Blob fee estimation tools and Layer 2 cost analysis dashboards need updates for the new reserve price mechanism."
      },
      "layer2s": {
        "description": "Fundamental improvement to blob economics - prevents scenarios where blob fees become insignificant relative to execution costs, ensuring healthy fee market dynamics."
      },
      "stakersNodes": {
        "description": "Ensures fair compensation for KZG proof verification compute costs through minimum blob pricing tied to execution base fee."
      },
      "clClients": {
        "description": "Minimal impact as this primarily affects execution layer blob fee calculation mechanisms."
      },
      "elClients": {
        "description": "Need to implement modified calc_excess_blob_gas() function with new reserve price logic and BLOB_BASE_COST parameter."
      }
    },
    "benefits": [
      "Prevents blob fee market collapse",
      "Maintains effective price discovery",
      "Ensures blob consumers pay fair market price for compute",
      "Reduces dramatic fee spikes"
    ]
  },
  {
    "id": 7919,
    "title": "EIP-7919: Pureth - Provable RPC responses",
    "status": "Draft",
    "description": "Enables provable RPC responses to eliminate trust requirements in data access and improve decentralization.",
    "author": "Etan Kissling, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-09-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7919-pureth-provable-rpc-responses/21180",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": false,
        "wasHeadlinerCandidate": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-pureth/24459",
        "layer": "EL",
        "champion": {
          "name": "Etan Kissling",
          "discord": "etan_status"
        }
      }
    ],
    "laymanDescription": "This enables Ethereum nodes to provide cryptographic proofs with their responses, eliminating the need to trust RPC providers. Users can verify that data from any source is authentic without running their own full node.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Improves network decentralization by reducing reliance on trusted RPC providers and enabling more efficient light client verification."
      },
      "improveUX": {
        "description": "Eliminates trust requirements for data access, enables secure light clients, and dramatically improves decentralization of the application ecosystem."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Can use any RPC provider securely without trust, access verified blockchain data from lightweight applications, and reduced dependence on centralized services."
      },
      "appDevs": {
        "description": "Can build truly decentralized applications without requiring users to run full nodes, implement secure light clients, and verify data from any source."
      },
      "walletDevs": {
        "description": "Can implement secure light wallets that verify all data cryptographically, reducing infrastructure costs while maintaining security guarantees."
      },
      "toolingInfra": {
        "description": "RPC providers need major updates to support proof generation, block explorers can provide verifiable data, and new verification tooling needs development."
      },
      "layer2s": {
        "description": "Can implement more secure light clients for Layer 2 networks and improve cross-chain data verification mechanisms."
      },
      "stakersNodes": {
        "description": "Need to generate cryptographic proofs for data responses, though this enables lighter infrastructure for many use cases."
      },
      "clClients": {
        "description": "May need some coordination for proof generation, but this primarily affects execution layer data structures."
      },
      "elClients": {
        "description": "Major implementation work required for proof generation systems, new data structures, and RPC response verification mechanisms."
      }
    },
    "benefits": [
      "Eliminates need to trust RPC providers",
      "Enables secure light clients for wallets and dApps",
      "Dramatically improves application decentralization",
      "Reduces infrastructure requirements for verified data access"
    ]
  },
  {
    "id": 7923,
    "title": "EIP-7923: Linear, Page-Based Memory Costing",
    "status": "Draft",
    "description": "Linearize memory pricing and replace the current quadratic formula with a page-based cost model.",
    "author": "Charles Cooper (@charles-cooper), Qi Zhou (@qizhou)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-27",
    "discussionLink": "https://ethereum-magicians.org/t/eip-linearize-memory-costing/23290",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Charles Cooper",
          "telegram": "big_tech_sux"
        }
      }
    ],
    "laymanDescription": "Linearizes EVM memory with 4KB pages: 100-gas allocation, 6-gas thrash, 64MB cap. Contracts that hit quadratic expansion limits finish with the same logic but steadier gas usage, allowing for more efficient memory management and predicatble gas costs.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "The more efficient memory management in contracts will lower the gas limit and allow for more operations onchain"
      },
      "improveUX": {
        "description": "The gas cost estimation by user wallets can be more straightforward, resulting in less overpaying and avoiding out of gas transaction fails."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Transaction gas for memory-heavy calls may be lower, wallets are better at estimating gas to spend."
      },
      "appDevs": {
        "description": "Account for page allocation (4096 B) and thrash costs; 32-bit addresses; 64 MiB tx memory cap; MSIZE unchanged. Better ways to address memory with new optimizations. The changes are backwards compatible."
      },
      "walletDevs": {
        "description": "Update simulators/estimators to model page allocation and thrash costs; surface OOM exceptional halts."
      },
      "toolingInfra": {
        "description": "Clients, tracers, profilers need LRU(512) page tracking and new gas accounting; optional mmap-style backing."
      },
      "layer2s": {
        "description": "EVM-equivalent chains must adopt new costing/limits; reassess proving and sequencer cost models for compatibility."
      },
      "stakersNodes": {
        "description": "More predictable resource bounds via transaction-global memory limit, RPC providers can revise eth_call policies and DoS assumptions."
      },
      "clClients": {
        "description": "This change doesn't touch the consensus layer."
      },
      "elClients": {
        "description": "Implementation of new linear, page-based costing, LRU thrash checks, and OOM halts while preserving MSIZE semantics while maintaining compatibility with the old model."
      }
    },
    "benefits": [
      "Replaces quadratic memory expansion with linear, page-based costing for predictable gas.",
      "Provides support for virtual memory addressing, unlocking heap/stack separation in high-level smart contract languages.",
      "Providing developers with better ways to manage memory, similar to other architectures."
    ]
  },
  {
    "id": 7928,
    "title": "EIP-7928: Block-level Access Lists",
    "status": "Draft",
    "description": "Enforced block access lists with storage locations and state diffs.",
    "author": "Toni Wahrstätter (@nerolation), Dankrad Feist (@dankrad), Francesco D'Amato (@fradamt), Jochem Brouwer (@jochem-brouwer), Ignacio Hagopian (@jsign)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7928-block-level-access-lists/23337",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Scheduled",
        "isHeadliner": true,
        "wasHeadlinerCandidate": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7928-block-level-access-lists-the-case-for-glamsterdam/24343",
        "layer": "EL",
        "champion": {
          "name": "Toni Wahrstätter",
          "discord": "nero_eth"
        }
      }
    ],
    "laymanDescription": "This introduces access lists at the block level rather than individual transactions, dramatically reducing gas costs for applications that access similar state and enabling new optimization patterns.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Significantly reduces gas costs for state access through block-level optimization, improving overall network efficiency and throughput."
      },
      "improveUX": {
        "description": "Lower gas costs for complex applications and improved predictability for applications with similar state access patterns."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Lower gas costs for complex applications, especially DeFi protocols and applications that access similar state across multiple transactions."
      },
      "appDevs": {
        "description": "Can optimize applications for block-level access patterns, significantly reduce gas costs for state-heavy applications, and enable new design patterns."
      },
      "walletDevs": {
        "description": "Indirect benefits through lower gas costs for applications, but minimal direct impact on wallet development."
      },
      "toolingInfra": {
        "description": "Gas estimation tools, transaction simulation, and optimization analysis need updates to handle block-level access list patterns."
      },
      "layer2s": {
        "description": "More efficient state access in Layer 2 settlement transactions and optimized bridge operations."
      },
      "stakersNodes": {
        "description": "More efficient block processing due to optimized state access patterns, reducing computational overhead."
      },
      "clClients": {
        "description": "No direct impact on consensus layer operations as this affects execution layer state access optimization."
      },
      "elClients": {
        "description": "Significant implementation work required for block-level access list management, state access optimization, and gas accounting updates."
      }
    },
    "benefits": [
      "Dramatically reduces gas costs for state-heavy applications",
      "Enables new optimization patterns for developers",
      "Improves block processing efficiency",
      "Provides more predictable gas costs for complex applications"
    ]
  },
  {
    "id": 7932,
    "title": "EIP-7932: Secondary Signature Algorithms",
    "status": "Draft",
    "description": "Introduces a new transaction type and precompile for handling alternative signature algorithms",
    "author": "James Kempton (@SirSpudlington)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-04-12",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7932-secondary-signature-algorithms/23514",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "SirSpudlington",
          "discord": "txtiger"
        }
      }
    ],
    "laymanDescription": "Creates a standardized way for new transaction-level signature algorithms to be added, which allows easier migration and higher interoperability with current systems.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Improves user experience by enabling easier adoption of alternative signatures without placing too high a burden on app developers. EIP-7932 also improves security by providing a pathway for quantum-safe account migration."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Improves security by allowing users to choose other signing algorithms, potentially enabling native TPM / passkey support."
      },
      "appDevs": {
        "description": "Allows abstracting implementation of multiple signature schemes to a single standardized interface. No work is required to support EIP-7932 transactions natively."
      },
      "walletDevs": {
        "description": "Large changes to transaction / key handling are required for wallets to support optional wrapping and signing functionality."
      },
      "toolingInfra": {
        "description": "Requires large initial modifications for EIP implementation but reduces future overhead when introducing new algorithms."
      },
      "layer2s": {
        "description": "No direct impact on layer 2s unless this EIP is adopted by that L2."
      },
      "stakersNodes": {
        "description": "May reduce resource consumption due to non-EVM verification of alternate algorithms."
      },
      "clClients": {
        "description": "No direct CL effects as this EIP only affects the execution layer."
      },
      "elClients": {
        "description": "Allows easier implementation of existing algorithms without having to rework transaction handling per new algorithm."
      }
    },
    "benefits": [
      "Standardizes the introduction of alternative signature algorithms without breaking existing tooling.",
      "Allows gradual migration to quantum-safe algorithms before quantum-computer threats.",
      "Reduces client developer workload on introduction of new algorithms.",
      "Reduces network reliance on single algorithm by increasing signature diversity."
    ]
  },
  {
    "id": 7934,
    "title": "EIP-7934: RLP Execution Block Size Limit",
    "status": "Draft",
    "description": "Introduce a protocol-level cap on the maximum RLP-encoded block size to 10 MiB, including a 2 MiB margin for beacon block size.",
    "author": "Giulio Rebuffo (@Giulio2002), Ben Adams (@benaadams), Storm Slivkoff (@sslivkoff)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-04-16",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7934-add-bytesize-limit-to-blocks/23589",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This adds a maximum size limit of 10MB to Ethereum blocks to prevent network instability and denial-of-service attacks. Currently, blocks can grow very large, which slows down network propagation and increases the risk of temporary forks. This limit ensures blocks stay within a reasonable size that the network can efficiently process and propagate.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Improves network reliability and reduces the risk of temporary forks, leading to more consistent transaction confirmation times."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "More reliable network with reduced risk of temporary forks and more consistent transaction confirmation times."
      },
      "appDevs": {
        "description": "More predictable block propagation and reduced risk of network instability affecting transaction processing."
      },
      "walletDevs": {
        "description": "More reliable transaction confirmation times and reduced risk of network issues affecting wallet operations."
      },
      "toolingInfra": {
        "description": "More predictable block sizes and network behavior, simplifying infrastructure planning and monitoring."
      },
      "layer2s": {
        "description": "More reliable base layer for settlement transactions with reduced risk of network instability."
      },
      "stakersNodes": {
        "description": "Need to implement block size validation, but benefit from more stable network propagation and reduced DoS risks."
      },
      "clClients": {
        "description": "Minimal impact as this primarily affects execution layer block validation and propagation."
      },
      "elClients": {
        "description": "Need to implement block size validation logic and ensure block construction respects the new size limits."
      }
    },
    "benefits": [
      "Prevents network instability from oversized blocks",
      "Reduces risk of denial-of-service attacks",
      "Improves block propagation efficiency",
      "Ensures compatibility with consensus layer limits"
    ]
  },
  {
    "id": 7935,
    "title": "EIP-7935: Set default gas limit to 60M",
    "status": "Draft",
    "description": "Recommend a new gas limit value for Fusaka and update execution layer client default configs",
    "author": "Sophia Gold (@sophia-gold), Parithosh Jayanthi (@parithoshj), Toni Wahrstätter (@nerolation), Carl Beekhuizen (@CarlBeek), Ansgar Dietrichs (@adietrichs), Dankrad Feist (@dankrad), Alex Stokes (@ralexstokes), Josh Rudolph (@jrudolph), Giulio Rebuffo (@Giulio2002), Storm Slivkoff (@sslivkoff)",
    "type": "Informational",
    "createdDate": "2025-04-22",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7935-set-default-gas-limit-to-xx0m/23789",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This proposes increasing the gas limit from 36M to 60M to scale L1 execution capacity. While this change does not require a hard fork (gas limit is a validator-chosen parameter), it requires extensive testing to ensure network stability at higher computational loads and so inclusion of the EIP in the hard fork ensures that this work is prioritized and ongoing.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Directly increases overall network throughput by allowing more computation per block, the most straightforward way to scale L1 execution capacity."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Benefits from higher throughput and faster transaction processing, but potential risks if inadequately tested or if RPC infrastructure can't keep up."
      },
      "appDevs": {
        "description": "Can build more sophisticated applications without hitting gas limits, but need to be aware that the specific limit value is still TBD."
      },
      "walletDevs": {
        "description": "Better user experience with faster confirmations, but RPC node performance impacts could affect wallet reliability."
      },
      "toolingInfra": {
        "description": "RPC providers, indexers, and monitoring tools need significant updates to handle larger blocks and higher computational loads."
      },
      "layer2s": {
        "description": "More block space available for settlement transactions, but coordination needed with EIP-7825's 30M transaction cap."
      },
      "stakersNodes": {
        "description": "Need significantly more computational power to process larger blocks. Validator hardware requirements may increase substantially."
      },
      "clClients": {
        "description": "Must handle larger execution payloads and ensure consensus layer can propagate larger blocks within gossip limits."
      },
      "elClients": {
        "description": "Major testing and bug-fixing effort required to handle larger blocks safely. Must update default gas limit configurations and ensure stability at higher computational loads."
      }
    },
    "benefits": [
      "Directly increases mainnet throughput",
      "Enables more complex smart contracts",
      "Reduces transaction queuing during high demand",
      "Improves confirmation times"
    ]
  },
  {
    "id": 7937,
    "title": "EIP-7937: 64-bit mode opcodes for EVM",
    "status": "Draft",
    "description": "Introduces 64-bit arithmetic and operations to the EVM for improved performance and expanded computational capabilities.",
    "author": "Wei Tang, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-08-20",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7937-64-bit-mode-opcodes-for-evm/21050",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "",
        "isHeadliner": false,
        "wasHeadlinerCandidate": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-evm64/24311",
        "layer": "EL"
      }
    ],
    "laymanDescription": "This is the core EIP of the EVM64 collection, introducing 64-bit arithmetic operations to the EVM. The full EVM64 suite includes multiple EIPs enabling much more efficient mathematical computations by adding 64-bit operations alongside existing 256-bit ones.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Significantly improves computational efficiency for mathematical operations, reducing gas costs and enabling more complex on-chain calculations."
      },
      "improveUX": {
        "description": "Cheaper and faster mathematical operations enable more sophisticated on-chain applications and reduce gas costs for computation-heavy smart contracts."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Lower gas costs for applications requiring mathematical computations like DeFi protocols, gaming, and scientific applications."
      },
      "appDevs": {
        "description": "Can build much more efficient mathematical applications, implement better algorithms on-chain, and reduce gas costs for computation-intensive smart contracts."
      },
      "walletDevs": {
        "description": "Indirect benefits through lower gas costs for mathematical operations in wallet-related smart contracts."
      },
      "toolingInfra": {
        "description": "Development tools, debuggers, and gas estimation systems need updates to support 64-bit operations and their gas costs."
      },
      "layer2s": {
        "description": "More efficient mathematical operations benefit Layer 2 proof generation and verification systems."
      },
      "stakersNodes": {
        "description": "More efficient computation reduces overall network computational load for mathematical operations."
      },
      "clClients": {
        "description": "No direct impact on consensus layer operations as this affects execution layer computational capabilities."
      },
      "elClients": {
        "description": "Major implementation work required for new 64-bit opcodes, proper gas accounting, and ensuring compatibility with existing 256-bit operations."
      }
    },
    "benefits": [
      "Dramatically reduces gas costs for mathematical operations",
      "Enables more sophisticated on-chain calculations",
      "Improves performance for DeFi and gaming applications",
      "Makes the EVM more competitive with other smart contract platforms"
    ]
  },
  {
    "id": 7939,
    "title": "EIP-7939: Count leading zeros (CLZ) opcode",
    "status": "Draft",
    "description": "Opcode to count the number of leading zero bits in a 256-bit word",
    "author": "Vectorized (@Vectorized), Georgios Konstantopoulos (@gakonst), Jochem Brouwer (@jochem-brouwer), Ben Adams (@benaadams), Giulio Rebuffo (@Giulio2002)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-04-28",
    "discussionLink": "https://ethereum-magicians.org/t/create-a-new-opcode-for-counting-leading-zeros-clz/10805",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This adds a new CLZ (Count Leading Zeros) opcode to the EVM that efficiently counts the number of zero bits at the start of a 256-bit number. This is a fundamental mathematical operation used in many algorithms, especially for mathematical computations, data compression, and cryptographic operations. Currently, implementing this operation in Solidity requires complex and expensive code - this opcode makes it much cheaper and faster.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Significantly reduces gas costs for mathematical operations that require bit manipulation, improving computational efficiency and enabling more complex on-chain calculations."
      },
      "improveUX": {
        "description": "Enables cheaper and more efficient mathematical operations, benefiting DeFi protocols, gaming applications, and any contracts requiring complex mathematical computations."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Indirect benefits through lower gas costs for applications using mathematical operations, compression algorithms, and advanced cryptographic schemes."
      },
      "appDevs": {
        "description": "Can implement much more efficient mathematical algorithms, compression schemes, and bitmap operations. Particularly beneficial for DeFi protocols requiring complex mathematical operations and ZK-proving applications."
      },
      "walletDevs": {
        "description": "Minimal direct impact, though benefits indirectly from more efficient mathematical operations in smart contracts."
      },
      "toolingInfra": {
        "description": "Development tools and debuggers need to support the new CLZ opcode, but this is a straightforward addition."
      },
      "layer2s": {
        "description": "More efficient mathematical operations benefit ZK-proof generation and verification systems, reducing proving costs especially for RISC-V based proving systems."
      },
      "stakersNodes": {
        "description": "More efficient computation reduces overall network computational load for mathematical operations."
      },
      "clClients": {
        "description": "No direct impact on consensus layer operations as this affects execution layer computational capabilities."
      },
      "elClients": {
        "description": "Simple implementation - just need to add the CLZ opcode (0x1e) with proper gas accounting. Benchmarked to have similar computational cost to ADD."
      }
    },
    "benefits": [
      "Dramatically reduces gas costs for bit manipulation operations",
      "Enables more efficient mathematical algorithms on-chain",
      "Particularly beneficial for ZK-proving applications",
      "Reduces bytecode size for mathematical operations",
      "Enables efficient compression and decompression algorithms",
      "Essential building block for advanced cryptographic schemes"
    ]
  },
  {
    "id": 7942,
    "title": "EIP-7942: Available Attestation",
    "status": "Draft",
    "description": "A comprehensive solution to address all known reorganization attacks in Ethereum PoS through available attestation mechanisms.",
    "author": "Mingfei Zhang, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-29",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7942-available-attestation-a-reorg-resilient-solution-for-ethereum/23927",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "",
        "isHeadliner": false,
        "wasHeadlinerCandidate": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-available-attestation/24377",
        "layer": "CL"
      }
    ],
    "laymanDescription": "This is a comprehensive solution to eliminate all known reorganization attacks on Ethereum. Instead of fixing attacks one-by-one, Available Attestation redesigns how consensus works to make reorg attacks fundamentally impossible.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Eliminates all known reorg attacks, dramatically improving network security and enabling more aggressive scaling optimizations without security trade-offs."
      },
      "improveUX": {
        "description": "Eliminates transaction reordering attacks, provides guaranteed inclusion properties, and dramatically improves user confidence in transaction finality."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Eliminates the possibility of transaction censorship and reorg attacks, providing guaranteed transaction inclusion and much stronger finality guarantees."
      },
      "appDevs": {
        "description": "Can build applications with stronger security assumptions, eliminate MEV-related edge cases, and provide users with guaranteed transaction execution properties."
      },
      "walletDevs": {
        "description": "Can provide stronger transaction finality guarantees and eliminate concerns about transaction reordering after inclusion."
      },
      "toolingInfra": {
        "description": "Major updates needed for consensus monitoring, reorg detection systems, and fork choice analysis tools to handle the new attestation mechanisms."
      },
      "layer2s": {
        "description": "Dramatically improves bridge security by eliminating L1 reorg risks and enables more aggressive optimization of settlement mechanisms."
      },
      "stakersNodes": {
        "description": "Fundamental changes to attestation behavior and fork choice logic, but eliminates complex reorg-related edge cases in validator operations."
      },
      "clClients": {
        "description": "Major implementation work required for new attestation mechanisms, modified fork choice logic, and consensus layer protocol changes."
      },
      "elClients": {
        "description": "Need to coordinate with new consensus mechanisms but most changes are in the consensus layer attestation logic."
      }
    },
    "benefits": [
      "Eliminates all known reorganization attacks permanently",
      "Provides formal security guarantees with mathematical proofs",
      "Strengthens transaction inclusion and finality properties",
      "Enables more aggressive scaling without security trade-offs"
    ]
  },
  {
    "id": 7949,
    "title": "EIP-7949: Genesis File Format",
    "status": "Draft",
    "description": "Outlines a standardized format for Ethereum's genesis files to ensure consistency across implementations.",
    "author": "Justin Florentine (@jflo)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-05-19",
    "discussionLink": "https://ethereum-magicians.org/t/eip-xxxx-genesis-json-standardization/24271",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Justin Florentine",
          "discord": "robocopsgonemad"
        }
      }
    ],
    "laymanDescription": "Standardizes genesis file structure to streamline compatibility across Ethereum clients, aiding smoother network launches.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Improved reliability and consistency when launching new networks, reducing user frustration."
      },
      "appDevs": {
        "description": "Easier creation and validation of genesis files, leading to fewer errors and smoother deployments."
      },
      "walletDevs": {
        "description": "Better stability and compatibility for wallets reliant on genesis data, simplifying integration."
      },
      "toolingInfra": {
        "description": "Tools like explorers and validators will format and interpret genesis files uniformly, improving robustness."
      },
      "layer2s": {
        "description": "Consistency at the genesis level helps L2s to more easily align with mainnet configurations."
      },
      "stakersNodes": {
        "description": "Node operators will benefit from standardized configurations, potentially easing network upgrades."
      },
      "clClients": {
        "description": "No consensus changes expected for CL; only standard fork coordination with established serialization rules."
      },
      "elClients": {
        "description": "Must handle new JSON schema and validation requirements, ensuring compatibility across various implementation details."
      }
    },
    "benefits": [
      "Promotes compatibility across diverse clients, easing development and validation.",
      "Reduces launch errors by providing a clear structure for genesis files.",
      "Facilitates easier onboarding for developers and users new to Ethereum.",
      "Encourages best practices in genesis file management and deployment."
    ]
  },
  {
    "id": 7951,
    "title": "EIP-7951: Precompile for secp256r1 Curve Support",
    "status": "Draft",
    "description": "Add precompiled contract for secp256r1 ECDSA signature verification with proper security checks",
    "author": "Carl Beekhuizen (@carlbeek), Ulaş Erdoğan (@ulerdogan), Doğan Alpaslan (@doganalpaslan)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-05-27",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7951-precompile-for-secp256r1-curve-support/24360",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Considered"
      },
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This adds support for a widely-used cryptographic curve called secp256r1 (also known as P-256) to Ethereum. Currently, Ethereum only supports the secp256k1 curve for signatures, but many devices and systems use secp256r1. This change allows Ethereum to verify signatures from devices like iPhones, Android phones, hardware wallets, and other systems that use this standard curve, making it easier to integrate with existing infrastructure. Note: This EIP supercedes [RIP-7212](https://github.com/ethereum/RIPs/blob/master/RIPS/rip-7212.md).",
    "northStarAlignment": {
      "improveUX": {
        "description": "Dramatically improves user experience by enabling native integration with billions of devices that use secp256r1, eliminating the need for complex signature conversion or additional infrastructure."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Can use their existing devices (phones, hardware wallets) to sign Ethereum transactions without additional software or conversion steps."
      },
      "appDevs": {
        "description": "Can integrate with existing secp256r1-based systems and devices more easily, reducing development complexity for authentication and signing flows."
      },
      "walletDevs": {
        "description": "Can support native signing from devices that use secp256r1, improving wallet compatibility and user experience across different platforms."
      },
      "toolingInfra": {
        "description": "Need to implement secp256r1 signature verification in tooling, but gain ability to work with broader ecosystem of devices and systems."
      },
      "layer2s": {
        "description": "Can leverage secp256r1 signatures for Layer 2 operations, improving compatibility with existing infrastructure."
      },
      "stakersNodes": {
        "description": "Minimal impact as this primarily affects transaction validation and doesn't change consensus or staking mechanics."
      },
      "clClients": {
        "description": "No impact on consensus layer as this affects execution layer transaction validation."
      },
      "elClients": {
        "description": "Need to implement secp256r1 precompile for efficient signature verification, but this is a well-established cryptographic standard."
      }
    },
    "benefits": [
      "Enables native integration with billions of secp256r1 devices",
      "Eliminates need for signature conversion or additional infrastructure",
      "Improves user experience for mobile and hardware wallet users",
      "Reduces development complexity for authentication systems",
      "Enables compliance with existing security standards"
    ]
  },
  {
    "id": 7971,
    "title": "Hard Limits for Transient Storage",
    "status": "Draft",
    "description": "Reduce gas costs for transient storage operations (TLOAD and TSTORE) by using constant pricing and introduce a transaction-global cap on transient storage slots to mitigate denial-of-service via excessive allocation. This lowers costs for common use cases while preserving protections against resource exhaustion.",
    "author": "Charles Cooper (@charles-cooper), Ben Adams (@benaadams), Maria Silva (@misilva73), Jochem Brouwer (@jochem-brouwer)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-06-12",
    "discussionLink": "https://ethereum-magicians.org/t/add-eip-hard-limit-and-cost-reduction-for-transient-storage-allocation/24542",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Maria Silva",
          "discord": "misilva73"
        }
      }
    ],
    "laymanDescription": "Makes temporary, one-transaction storage cheaper and sets a hard cap on how much can be used per transaction. This reduces gas for common patterns while protecting nodes from excessive memory use.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "May lower fees in apps using transient storage; otherwise no behavior change. Possible failures if the global cap is reached."
      },
      "appDevs": {
        "description": "Cheaper transient storage enables guards and metadata patterns; must handle transaction-wide slot cap and update gas assumptions in code."
      },
      "walletDevs": {
        "description": "Adjust fee estimation and warnings for potential cap-exceeded reverts; otherwise no signing or serialization changes."
      },
      "toolingInfra": {
        "description": "Profilers, tracers, and simulators must incorporate constant TLOAD/TSTORE pricing and track per-transaction transient slot usage."
      },
      "layer2s": {
        "description": "Rollups adjusting EVM gas must mirror pricing and enforce slot cap; evaluate shared-bundle DoS implications in sequencer pipelines."
      },
      "stakersNodes": {
        "description": "Resource profile mostly unchanged; adopt fork including new gas schedule and per-transaction slot-accounting rules."
      },
      "clClients": {
        "description": "Consensus layer changes are limited to fork activation metadata and versioning; low code complexity, mostly configuration and coordination."
      },
      "elClients": {
        "description": "Implement constant costs for TLOAD/TSTORE, enforce a transaction-global slot cap, update gas accounting and tests; moderate code changes."
      }
    },
    "benefits": [
      "Lower gas for transient storage via constant pricing",
      "Per-transaction cap prevents excessive transient memory use",
      "Encourages transient-storage patterns without persistent writes",
      "Simplifies cost reasoning for compilers and tooling"
    ]
  },
  {
    "id": 7976,
    "title": "EIP-7976: Increase Calldata Floor Cost",
    "status": "Draft",
    "description": "This proposal suggests increasing the cost of storing data in Ethereum transactions to manage block size more effectively.",
    "author": "Toni Wahrstätter (@nerolation)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-06-18",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7976-further-increase-calldata-cost/24597",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Toni Wahrstätter",
          "discord": "nero_eth"
        }
      }
    ],
    "laymanDescription": "Increases the cost for data storage in transactions to help ensure Ethereum runs smoothly.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Ensures stable transaction speeds as network demands grow."
      },
      "appDevs": {
        "description": "May require adjustments in gas estimation for data-heavy applications."
      },
      "walletDevs": {
        "description": "Need to update gas estimation to reflect increased calldata costs."
      },
      "toolingInfra": {
        "description": "Must adapt to account for changes in gas pricing rules."
      },
      "layer2s": {
        "description": "Improves interaction with Ethereum mainnet through efficient gas management."
      },
      "stakersNodes": {
        "description": "Minimal impact on operations, but potential for increased transaction throughput."
      },
      "clClients": {
        "description": "May require updates to ensure efficient handling of calldata estimation."
      },
      "elClients": {
        "description": "Must be updated to accommodate changes in calldata pricing for optimal performance."
      }
    },
    "benefits": [
      "Reduces maximum block size by approximately 33%, improving network efficiency.",
      "Maintains a good user experience for regular transactions while optimizing for data-heavy applications.",
      "Encourages better practices for data availability within the Ethereum ecosystem.",
      "Ensures that transactions involving heavy computational requirements are not adversely affected."
    ]
  },
  {
    "id": 7979,
    "title": "EIP-7979: Call and Return Opcodes for the EVM",
    "status": "Draft",
    "description": "The smallest possible change to the EVM to support subroutine calls and returns.",
    "author": "Greg Colvin (@gcolvin)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-12-17",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7951-call-and-return-opcodes-for-the-evm/24615",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Greg Colvin",
          "email": "greg@colvin.org"
        }
      }
    ],
    "laymanDescription": "Introduces instructions to call and return from subroutines, which are missing from the EVM.  This lets compilers generate code with static control flow, which allows for more performant clients and quadradictally more efficient static analysis tools",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Increased security and more performant smart contract execution."
      },
      "appDevs": {
        "description": "Better tools.  Especially, better static analysis and formal verification."
      },
      "walletDevs": {
        "description": "No direct impact"
      },
      "toolingInfra": {
        "description": "Compilers must produce static, validated EVM code."
      },
      "layer2s": {
        "description": "Some Layer 2 and EVM-compatible chains could benefit from more performant client."
      },
      "stakersNodes": {
        "description": "No direct impact, but enables more clients to implement performance gains"
      },
      "clClients": {
        "description": "No changes required for consensus layer implementations."
      },
      "elClients": {
        "description": "Implementation of the instructions and validation is straightforward, and clients can better optimize their execution of validated code."
      }
    },
    "benefits": [
      "Makes static EVM control flow possible, which static analysis people have been requesting for many years.",
      "Static control flow can make static analysis and formal verification of EVM code quadratically more efficient.",
      "Static control flow makes linear-time translators of EVM code possible, including one-pass compilers to machine code and RISC-V.",
      "Clients can validate that deployed code cannot execute invalid instructions, jump to invalid locations, or misuse the stack.",
      "Maintains backwards compatibility, enabling a smooth transition.  Tools and developers can take up the new features as they become available."
    ]
  },
  {
    "id": 7981,
    "title": "EIP-7981: Increase access list cost",
    "status": "Draft",
    "description": "This EIP charges additional gas for non-zero and zero bytes in access lists to prevent circumvention of gas pricing rules and ensure fair costs.",
    "author": "Toni Wahrstätter (@nerolation)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-12-27",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7981-increase-access-list-cost/24680",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Toni Wahrstätter",
          "discord": "nero_eth"
        }
      }
    ],
    "laymanDescription": "Adjusts transaction costs for access lists to balance gas fees and prevent block size inflation.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Improves transaction fairness by standardizing costs based on data usage."
      },
      "appDevs": {
        "description": "Encourages efficient transaction design due to higher costs for larger access lists."
      },
      "walletDevs": {
        "description": "Could require updates to handle new cost structures in gas estimation."
      },
      "toolingInfra": {
        "description": "Need to adapt estimation tools for new access list pricing."
      },
      "layer2s": {
        "description": "Reduces potential for block size inflation leading to enhanced scalability."
      },
      "stakersNodes": {
        "description": "Minimal direct impact, but improved network health benefits all participants."
      },
      "clClients": {
        "description": "Adjustments required for gas cost calculations influencing consensus protocols."
      },
      "elClients": {
        "description": "Optimizes execution efficiency under new pricing impacting overall gas usage."
      }
    },
    "benefits": [
      "Enhances economic model by charging based on resource usage, which promotes efficient transaction design.",
      "Increases network stability by reducing maximum block size through reduced incentive to use large access lists.",
      "Encourages fairer transaction costs across users by preventing underutilization of pricing structures.",
      "Maintains compatibility with existing EIP-2930 while introducing necessary changes to the access list gas calculations."
    ]
  },
  {
    "id": 7997,
    "title": "EIP-7997: Deterministic Factory Predeploy",
    "status": "Draft",
    "description": "A minimal `CREATE2` factory shared by EVM chains.",
    "author": "Francisco Giordano (@frangio)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-08-03",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7997-deterministic-factory-predeploy/24998",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Francisco Giordano",
          "discord": "frangio_"
        }
      }
    ],
    "laymanDescription": "Enables developers to deploy smart contracts at identical addresses across EVM chains.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Complements the rollup-centric roadmap with a native and reliable mechanism for deployment of multi-chain contracts, including smart contract accounts."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Consistent addresses across chains reduce cognitive load and potential for error."
      },
      "appDevs": {
        "description": "Simplifies deployment of apps to multiple chains and development of apps that use cross-chain interop."
      },
      "walletDevs": {
        "description": "Provides a native solution to the problem of deploying multi-chain smart contract accounts."
      },
      "toolingInfra": {
        "description": "Tools will be able to replace their default CREATE2 factory with the canonical one, or one deployed from it."
      },
      "layer2s": {
        "description": "Need to adopt the EIP to make the factory widely available and materialize benefits for developers."
      },
      "stakersNodes": {
        "description": "No impact."
      },
      "clClients": {
        "description": "No consensus changes expected."
      },
      "elClients": {
        "description": "Need to implement a new kind of system contract that is not deployed via transaction but is not a precompile either. Conceptually simple but new in the EL."
      }
    },
    "benefits": [
      "Improves UX and mitigates risk of loss of funds for users of smart contract accounts.",
      "Simplifies multi-chain and cross-chain smart contracts by removing the need for per-chain parameterization or mappings.",
      "Reduces the number of addresses that multi-chain applications have to distribute.",
      "Addresses limitations of fragile workarounds currently in use by developers for this need, providing a native solution instead."
    ]
  },
  {
    "id": 7999,
    "title": "EIP-7999: Unified Multidimensional Fee Market",
    "status": "Draft",
    "description": "Proposes a unified fee market for Ethereum transactions enabling users to manage fees more efficiently with a single `max_fee` for various resources.",
    "author": "Anders Elowsson (@anderselowsson), Vitalik Buterin (@vbuterin)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-08-04",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7999-unified-multidimensional-fee-market/25010",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Withdrawn",
        "layer": "EL",
        "champion": {
          "name": "Anders Elowsson",
          "discord": "anderselowsson"
        }
      }
    ],
    "laymanDescription": "Simplifies fee management for transactions by allowing users to set one budget for various resources like storage and computation.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Improves transaction clarity and fee management."
      },
      "appDevs": {
        "description": "Enables easier budgeting for transaction costs, enhancing user experience."
      },
      "walletDevs": {
        "description": "Simplifies fee calculation in wallets, reducing development overhead."
      },
      "toolingInfra": {
        "description": "Integrates new fee structures into existing tools and infrastructure."
      },
      "layer2s": {
        "description": "Facilitates cross-chain transactions through a unified fee structure."
      },
      "stakersNodes": {
        "description": "Streamlines transaction validation processes with consistent fee mechanisms."
      },
      "clClients": {
        "description": "Enhances consensus algorithm efficiency by standardizing transaction fees."
      },
      "elClients": {
        "description": "Optimizes resource allocation and execution efficiency for transactions."
      }
    },
    "benefits": [
      "Standardizes fee management across various resources, promoting economic efficiency.",
      "Reduces user confusion by simplifying the process of setting transaction fees.",
      "Enhances resource allocation flexibility for developers, improving overall system efficiency.",
      "Facilitates future expansion into multiple resource dimensions seamlessly."
    ]
  },
  {
    "id": 8011,
    "title": "EIP-8011: Multidimensional Gas Metering",
    "status": "Draft",
    "description": "Proposal to measure gas usage across multiple resource dimensions, improving efficiency and control.",
    "author": "Maria Silva (@misilva73)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-08-22",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8011-multidimensional-gas-metering/25260",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Maria Silva",
          "discord": "misilva73"
        }
      }
    ],
    "laymanDescription": "Improves transaction handling by allowing separate metering for computation, data access, and storage, enhancing Ethereum's ability to handle transactions effectively.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Users experience no change in transaction behavior while enjoying improved efficiency in resource management."
      },
      "appDevs": {
        "description": "Developers can optimize contracts with resource-specific gas costs, needing to ensure compatibility with existing fee systems."
      },
      "walletDevs": {
        "description": "Minimal adjustments required; focus on ensuring wallets correctly reflect gas costs along different resource dimensions."
      },
      "toolingInfra": {
        "description": "Existing tools may need updates to accurately account for multidimensional gas metrics; mainly impacts monitoring tools."
      },
      "layer2s": {
        "description": "EVM-compatible L2s will need to adopt these changes, with routine updates and testing expected for gas accounting consistency."
      },
      "stakersNodes": {
        "description": "Node operators upgrade clients at the fork; normal operational behavior remains consistent with revised gas metrics."
      },
      "clClients": {
        "description": "No major consensus changes expected; only standard fork coordination without new serialization or signature rules."
      },
      "elClients": {
        "description": "Complex updates required to implement resource-specific gas accounting and compatibility with previous gas-related EIPs."
      }
    },
    "benefits": [
      "Enhances efficiency by decoupling resource metering from block congestion.",
      "Improved transaction handling without altering user experience.",
      "Finer control over excessive resource usage leads to fewer network overloads.",
      "Paves the way for advanced pricing models without major protocol disruptions."
    ]
  },
  {
    "id": 8024,
    "title": "EIP-8024: Backward compatible SWAPN, DUPN, EXCHANGE",
    "status": "Review",
    "description": "Introduce additional instructions for manipulating the stack which allow accessing the stack at higher depths.",
    "author": "Francisco Giordano (@frangio), Charles Cooper (@charles-cooper), Alex Beregszaszi (@axic)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-08-16",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8024-backward-compatible-swapn-dupn-exchange/25486",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Francisco Giordano",
          "discord": "frangio_"
        }
      }
    ],
    "laymanDescription": "Adds new instructions to increase the reachable elements of the stack.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Enables Solidity to easily solve the \"stack too deep\" error that frequently prevents smart contract developers from working effectively."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Cheaper transactions from more efficient bytecode."
      },
      "appDevs": {
        "description": "Once Solidity adopts it, no more workarounds will be necessary for \"stack too deep\" errors."
      },
      "walletDevs": {
        "description": "No impact."
      },
      "toolingInfra": {
        "description": "Must implement support for new instructions."
      },
      "layer2s": {
        "description": "Can adopt new instructions."
      },
      "stakersNodes": {
        "description": "No impact."
      },
      "clClients": {
        "description": "No impact."
      },
      "elClients": {
        "description": "Must implement new instructions."
      }
    },
    "benefits": [
      "Compilers can generate code more easily without the complexity of spilling.",
      "New EXCHANGE instruction can replace three instructions with a single one.",
      "Smart contracts are freer to make heavier use of the stack instead of resorting to memory."
    ]
  },
  {
    "id": 8030,
    "title": "EIP-8030: P256 transaction support",
    "status": "Draft",
    "description": "Adds an EIP-7932 algorithm type for P256 support of type `0x0`",
    "author": "James Kempton (@SirSpudlington)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-09-20",
    "discussionLink": "https://ethereum-magicians.org/t/discussion-topic-for-eip-8030/25557",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "SirSpudlington",
          "discord": "txtiger"
        }
      }
    ],
    "laymanDescription": "Adds P256 signatures to Ethereum transactions, improving security and compatibility with other technologies.",
    "northStarAlignment": {
      "improveUX": {
        "description": "Improves user experience by enabling transaction signature support for secp256r1, and improves EIP-7932 security by adding a test vector of a well-known algorithm."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Improves signature algorithm options for users and potentially enables native passkey / TPM support."
      },
      "appDevs": {
        "description": "Does not affect app developers under EIP-7932 framework."
      },
      "walletDevs": {
        "description": "Expands wallet capabilities to support new signature types."
      },
      "toolingInfra": {
        "description": "Requires a simple update to support P256 signature verification."
      },
      "layer2s": {
        "description": "Sequencers may utilize P256 for settling L1 proofs."
      },
      "stakersNodes": {
        "description": "Would have little effect on Node Operators."
      },
      "clClients": {
        "description": "No direct CL effects as this EIP only affects the execution layer."
      },
      "elClients": {
        "description": "Would require a minimal update to point the new EIP-7932 entry to the existing P256 precompile."
      }
    },
    "benefits": [
      "Increases security and flexibility in Ethereum transactions with P256 signatures.",
      "Provides a proven-secure algorithm for testing EIP-7932.",
      "Facilitates smoother interoperability with other blockchain technologies supporting P256.",
      "Helps maintain Ethereum's competitive edge by adapting to popular cryptographic standards."
    ]
  },
  {
    "id": 8032,
    "title": "EIP-8032: Size-Based Storage Gas Pricing ",
    "status": "Draft",
    "description": "Proposes dynamic pricing for SSTORE operations based on contract storage size, aimed at reducing state bloat.",
    "author": "Guillaume Ballet (@gballet)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-09-29",
    "discussionLink": "https://ethereum-magicians.org/t/the-case-for-eip-8032-in-glamsterdam-tree-depth-based-storage-gas-pricing/25619",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Guillaume Ballet",
          "discord": "gballet"
        }
      }
    ],
    "laymanDescription": "Adjusts gas costs for SSTORE operations based on how much data a contract holds, incentivizing efficient storage management.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Users experience potentially lower costs as inefficient contracts incur higher fees."
      },
      "appDevs": {
        "description": "Developers are motivated to optimize storage usage, leading to better resource management."
      },
      "walletDevs": {
        "description": "Wallets may see changes in cost calculations for contract interactions; minimal updates required."
      },
      "toolingInfra": {
        "description": "Tools need to adapt to new gas price calculations related to storage; ensures users are informed."
      },
      "layer2s": {
        "description": "L2s adopting this will align with mainnet behavior; expect similar updates and testing."
      },
      "stakersNodes": {
        "description": "Node operators update clients for enhanced gas calculations; no major disruptions expected."
      },
      "clClients": {
        "description": "No new consensus mechanisms; standard fork coordination suffices without serialization changes."
      },
      "elClients": {
        "description": "Implement updated gas calculations for SSTORE, ensuring compatibility with dynamic pricing changes."
      }
    },
    "benefits": [
      "Encourages efficient contract design and reduces state bloat.",
      "Aligns storage costs with actual usage, promoting healthier network sustainability.",
      "Facilitates better resource allocation across the Ethereum ecosystem.",
      "Simplifies decision-making for contract storage management."
    ]
  },
  {
    "id": 8037,
    "title": "EIP-8037: State Creation Gas Cost Increase",
    "status": "Draft",
    "description": "Proposes to increase gas costs for state creation to manage growth and improve Ethereum's scalability.",
    "author": "Maria Silva (@misilva73), Carlos Perez (@CPerezz), Jochem Brouwer (@jochem-brouwer), Ansgar Dietrichs (@adietrichs)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-10-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8037-state-creation-gas-cost-increase/25694",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Maria Silva",
          "discord": "misilva73"
        }
      }
    ],
    "laymanDescription": "Increases costs associated with creating new states, aiming to reduce excessive state growth and enhance scalability.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Users may experience higher transaction fees for creating new accounts and contracts, but improved scalability benefits all."
      },
      "appDevs": {
        "description": "Developers should anticipate increased deployment costs, necessitating adjustments to gas estimation tools and budget projections."
      },
      "walletDevs": {
        "description": "Wallet developers need to update gas estimations to reflect new costs; otherwise, minimal code changes are needed."
      },
      "toolingInfra": {
        "description": "Tooling and infrastructure must accommodate new pricing models for transaction estimates, with only minor changes to existing tools."
      },
      "layer2s": {
        "description": "L2s adopting this EIP will align with mainnet behaviors, requiring thorough testing and client updates for accurate operations."
      },
      "stakersNodes": {
        "description": "Node operators will need to update their clients for new gas parameters; otherwise, operations and validation remain unchanged."
      },
      "clClients": {
        "description": "Minimal changes expected for CL clients; primarily involves standard fork coordination with minimal complexity."
      },
      "elClients": {
        "description": "Must integrate new gas costs into transaction handling, requiring updates to gas accounting and ensuring compatibility with existing EIP standards."
      }
    },
    "benefits": [
      "Standardizes costs across all state creation operations, promoting fairness.",
      "Reduces excessive state growth, enhancing Ethereum's overall scalability.",
      "Improved user experience as scalability bottlenecks are addressed.",
      "Encourages developers to optimize contract designs due to increased costs."
    ]
  },
  {
    "id": 8038,
    "title": "EIP-8038: State-access gas cost increase",
    "status": "Draft",
    "description": "Proposes an increase in gas costs for state-access operations to reflect Ethereum's expanded state and performance needs.",
    "author": "Maria Silva (@misilva73), Wei Han Ng (@weiihann), Ansgar Dietrichs (@adietrichs)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-10-03",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8038-further-increase-in-state-access-costs/25693",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Maria Silva",
          "discord": "misilva73"
        }
      }
    ],
    "laymanDescription": "Increases gas costs for accessing state data to ensure alignment with current performance and resource needs, crucial for optimal network functionality.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Users may experience minor cost adjustments for transactions related to state access, ensuring smoother network performance."
      },
      "appDevs": {
        "description": "Developers must account for higher state access costs, potentially leading to adjustments in gas estimations during deployment."
      },
      "walletDevs": {
        "description": "Wallets need to update gas estimation logic to incorporate the new parameters, affecting the transaction success rate."
      },
      "toolingInfra": {
        "description": "Tools must adapt to new gas cost models to ensure accurate reporting and analysis of transaction behaviors."
      },
      "layer2s": {
        "description": "L2 implementations need to align with the updated state access costs; anticipate necessary updates to ensure compatibility."
      },
      "stakersNodes": {
        "description": "Node operators must upgrade to new client versions to accommodate updated gas pricing; minimal impact on runtime behavior."
      },
      "clClients": {
        "description": "No consensus changes expected for CL; only standard fork coordination. No new serialization or gossip rules necessitated by this proposal."
      },
      "elClients": {
        "description": "Adaptations required in gas accounting for state access operations; must ensure compatibility with previous gas models and EIP-2929."
      }
    },
    "benefits": [
      "Improved alignment of gas costs with actual state access performance.",
      "Enhanced network performance while maintaining optimal resource usage.",
      "Encourages more efficient smart contract design by reflecting true operational costs.",
      "Incentivizes developers to optimize state access patterns for better efficiency."
    ]
  },
  {
    "id": 8045,
    "title": "Exclude slashed validators from proposing",
    "status": "Draft",
    "description": "This EIP proposes a modification to the beacon chain proposer selection process to exclude slashed validators from being selected as proposers.",
    "author": "Francesco D'Amato (@fradamt), Barnabas Busa (@barnabasbusa)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-10-16",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8045-exclude-slashed-validators-from-proposing/25850",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "CL",
        "champion": {
          "name": "Barnabas Busa",
          "discord": "barnabasbusa"
        }
      }
    ],
    "laymanDescription": "After a slashing event, punished validators can still be scheduled to propose blocks, causing missed slots and slow recovery. This change simply skips slashed validators so healthy ones keep proposing and the chain keeps running.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Users should experience fewer stalled slots and better network responsiveness after large validator slashings, because only non-slashed validators will propose blocks."
      },
      "appDevs": {
        "description": "Application behavior during recovery from mass slashings becomes more predictable, with fewer missed blocks and smoother chain progress. No application changes required."
      },
      "walletDevs": {
        "description": "Wallets get more consistent head updates after slashings, reducing confusing gaps in block production. No direct wallet code changes are expected."
      },
      "toolingInfra": {
        "description": "Indexers, explorers, and relays see steadier block flow after slashings, easing incident handling. No protocol-facing changes required for these services."
      },
      "layer2s": {
        "description": "L2 sequencers relying on L1 data and finality benefit from steadier L1 block production after slashings, improving uptime. No L2 code impact."
      },
      "stakersNodes": {
        "description": "Once slashed, a validator immediately loses proposer eligibility. Node operators must account for skipped proposing duties but otherwise run unchanged software."
      },
      "clClients": {
        "description": "Consensus clients must update proposer selection logic to prefilter slashed validators using beacon state, integrate with EIP-7917 lookahead, and add tests."
      },
      "elClients": {
        "description": "Execution clients are unaffected because block proposer selection lives in the consensus layer; no modifications are required in execution code."
      }
    },
    "benefits": [
      "Maintains block production after mass slashing events.",
      "Improves chain resilience and recovery during network disruptions.",
      "Prevents wasting proposer slots on already slashed validators.",
      "Reduces prolonged degraded performance while slashed validators exit."
    ]
  },
  {
    "id": 8051,
    "title": "Precompile for ML-DSA signature verification",
    "status": "Draft",
    "description": "Introduces two precompiled contracts implementing NIST's ML-DSA and ML-DSA-ETH for post-quantum signature verification.",
    "author": "Renaud Dubois (@rdubois-crypto), Simon Masson (@simonmasson)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-10-15",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8051-ml-dsa-verification/25857",
    "reviewer": "expert",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Danno Ferrin",
          "discord": "_shemnon"
        }
      }
    ],
    "laymanDescription": "Adds two precompiles for signature verification that are safe against Quantum Computer analysis. One is an NIST standard FIPS-204 whereas the other replaces the XOF with Keccak, which is more accessible to EVM implementation.",
    "northStarAlignment": {
      "scaleL1": {
        "description": "Enables quantum-resistant signatures at the protocol level, supporting long-term security and ecosystem growth"
      },
      "improveUX": {
        "description": "Accessible implementation of FIPS-204, which is cost-prohibitive for the EVM."
      }
    },
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Access to Post-Quantum security."
      },
      "appDevs": {
        "description": "Provides cost-efficient access to post-quantum cryptography for dApps requiring quantum resistance"
      },
      "walletDevs": {
        "description": "Cheap PQ signatures for contract wallets. Will need to standardize HD key generation."
      },
      "toolingInfra": {
        "description": "Will need to add language and CLI access to Falcon signature verification, and generation."
      },
      "layer2s": {
        "description": "Will need to add to next L2 hard fork. May want to consider as an alternative wherever ecrecover is used."
      },
      "stakersNodes": {
        "description": "Invisible to stakers, leanConsensus is where PQC will be introduced to them."
      },
      "clClients": {
        "description": "Invisible to the consensus layer, leanConsensus is where PQC will be introduced to them."
      },
      "elClients": {
        "description": "Will integrate an external library (PQClean, PQ Code, etc) so the task will mostly be wiring up the library and gas metering."
      }
    },
    "benefits": [
      "NIST-standardized post-quantum cryptography (FIPS-204)",
      "Eth optimized variant of FIPS-206",
      "Hardness assumptions secure against quantum adversaries",
      "Integrates with EIP-7932 algorithmic transaction framework"
    ]
  },
  {
    "id": 8053,
    "title": "Milli-gas for High-precision Gas Metering",
    "status": "Draft",
    "description": "This proposal introduces the milli-gas counter as the EVM’s internal gas accounting. Gas costs are defined and tracked in milli_gas, then rounded up to gas at the end of execution. Gas limits and transaction fees continue to be computed and verified using the current gas_used counter, enabling more precise accounting of cheap compute without changing UX.",
    "author": "Maria Silva (@misilva73)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-10-17",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8053-milli-gas-counter-for-high-precision-gas-metering/25946",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Maria Silva",
          "discord": "misilva73"
        }
      }
    ],
    "laymanDescription": "Counts gas in thousandths (milli-gas) during EVM execution for finer precision, then rounds to normal gas at transaction end. Fees and limits stay the same, so users and apps shouldn’t notice changes.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "No UX or fee changes; gas limits and pricing remain computed with gas_used, so behavior and costs are unchanged."
      },
      "appDevs": {
        "description": "Contracts unaffected; no code changes expected since limits and fees still use gas_used rather than the new milli_gas counter."
      },
      "walletDevs": {
        "description": "Transaction fee estimation and validation remain tied to gas_used; no API surface changes described or wallet-side modifications expected."
      },
      "toolingInfra": {
        "description": "Tools using gas_used remain accurate; no explicit requirement to expose milli_gas since it is an internal accounting detail."
      },
      "layer2s": {
        "description": "No specific L2 impacts stated; proposal covers internal EVM accounting only, with fees and limits unchanged at transaction interface."
      },
      "stakersNodes": {
        "description": "Fee mechanics and limits remain as today; no staking or validator configuration changes are described in this proposal."
      },
      "clClients": {
        "description": "No consensus-layer changes are described; proposal targets EL metering, and CL client code modifications are not indicated."
      },
      "elClients": {
        "description": "Add a milli_gas counter; meter opcodes in milli_gas; round to gas at transaction end; keep gas_used for limits/fees. Block-level conversion would be a larger change."
      }
    },
    "benefits": [
      "More precise accounting for cheap compute",
      "Keeps fees and gas limits unchanged",
      "Preserves user and application UX",
      "Introduces precision without contract changes"
    ]
  },
  {
    "id": 8057,
    "title": "Inter-Block Temporal Locality Gas Discounts",
    "status": "Draft",
    "description": "Introduces a deterministic, multi-block discount for the first access to accounts and storage keys in a transaction. The discount decays to zero based on how many blocks have passed since the item was last touched. Intra-block warming is unchanged. The mechanism uses block-level access lists (EIP-7928) from prior blocks so a newly synced node can price the first block it validates without replaying historical execution.",
    "author": "Ben Adams (@benaadams), Toni Wahrstätter (@nerolation), Maria Inês Silva (@misilva73), Amirul Ashraf (@asdacap)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-10-20",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8057-block-temporal-locality-gas-discounts/25912",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Ben Adams",
          "discord": "ben_a_adams"
        }
      }
    ],
    "laymanDescription": "Ethereum clients already cache recently used state, so touching the same contracts again soon is cheaper in practice. This EIP updates gas costs to reflect that reality: if an account or storage slot was accessed in the last few blocks, the first access in a new transaction costs less gas. Nothing else about how transactions work changes.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Some transactions touching recently used contracts or storage may cost less gas, lowering typical fees without changing how users interact."
      },
      "appDevs": {
        "description": "Apps that reuse the same accounts or storage in nearby blocks pay less gas on first access. No opcode changes required."
      },
      "walletDevs": {
        "description": "Wallet gas estimators must include temporal discounts using recent block access lists. Pricing is deterministic from public chain data."
      },
      "toolingInfra": {
        "description": "Builders and searchers may batch related operations across back-to-back blocks to capture discounts. Tooling must report per-call gas using this rule."
      },
      "layer2s": {
        "description": "Rollup bridges and keepers reusing L1 state across nearby blocks pay less gas on first access. Rollup protocol rules remain unchanged."
      },
      "stakersNodes": {
        "description": "Validators must upgrade for the fork and maintain a short rolling index of recently accessed items to verify block gas charges."
      },
      "clClients": {
        "description": "Consensus clients mostly just activate the fork and accept payloads using the new gas schedule. No other logic changes."
      },
      "elClients": {
        "description": "Execution-layer clients must implement the new temporal discount logic, track prior-block access lists, and update gas accounting for first accesses."
      }
    },
    "benefits": [
      "Aligns gas costs with real client caching and hardware behavior.",
      "Lowers average per-access gas without increasing worst-case cost.",
      "Improves effective L1 throughput and block execution efficiency.",
      "Enables deterministic, provable pricing from recent block data, easing stateless validation."
    ]
  },
  {
    "id": 8058,
    "title": "EIP-8058: Contract Bytecode Deduplication Discount",
    "status": "Draft",
    "description": "Introduces a gas discount for deploying duplicate contract bytecode by leveraging EIP-2930 access lists.",
    "author": "Carlos Perez (@CPerezz), Wei Han Ng (@weiihann), Guillaume Ballet (@gballet)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-10-22",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8058-contract-bytecode-deduplication-discount/25933",
    "reviewer": "bot",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Carlos Perez",
          "discord": "CPerezz.eth"
        }
      }
    ],
    "laymanDescription": "If you deploy a contract that's exactly the same as one that already exists and you include that existing contract’s address in your transaction’s access list, you don’t pay the per-byte code deposit again—the new contract just points to the already-stored code.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Cheaper deployments for apps that spin up many identical contracts (e.g., factory wallets or clones); no change to how transactions are sent."
      },
      "appDevs": {
        "description": "Can cut deployment costs for factory/clone patterns by adding a reference contract address to the access list; update builders and deploy scripts to include access lists and handle cases without a discount."
      },
      "walletDevs": {
        "description": "Update gas estimation and access-list generation to surface potential deduplication discounts and clearly indicate when the discount will or won’t apply."
      },
      "toolingInfra": {
        "description": "Estimators, simulators, and tracers should build the CodeHash Access-Set from the access list at tx start and report when deduplication triggers; consider dual estimates (with/without discount)."
      },
      "layer2s": {
        "description": "Rollups mirroring L1 gas semantics may adopt this to lower duplicate deployment costs; coordinate with any increased GAS_CODE_DEPOSIT (e.g., per EIP-8037) and access-list handling in sequencers."
      },
      "stakersNodes": {
        "description": "Minimal runtime overhead; implement building the CodeHash Access-Set and conditional charging; no trie/schema changes. Same-block ordering effects are deterministic."
      },
      "clClients": {
        "description": "No consensus changes on the CL—standard fork coordination only."
      },
      "elClients": {
        "description": "Implement access-list–based set W, hash check on successful CREATE/CREATE2, and conditional code-deposit charging per EIP-2930/2929. Also, consider implementing a code -> address reverse index to avoid complexity to users on finding the required address."
      }
    },
    "benefits": [
      "Aligns gas costs with actual storage usage for duplicate deployments.",
      "Deterministic and consensus-safe: depends on access lists and current state, not local databases.",
      "No new transaction format or reverse indexes; reuses EIP-2930 infrastructure.",
      "Can yield major savings when GAS_CODE_DEPOSIT is high (e.g., under EIP-8037).",
      "Encourages bytecode reuse and efficient factory/clone patterns."
    ]
  },
  {
    "id": 8059,
    "title": "Gas Units Rebase for High-precision Metering",
    "status": "Draft",
    "description": "This proposal rebases Ethereum’s gas unit by a factor of 1,000 to enable high-precision metering without fractional gas. All gas-related parameters and variables are increased by that factor. This reduces rounding errors when repricing EVM operations and future-proofs gas costs as hardware improves and state access remains costly, while avoiding major internal EVM logic changes.",
    "author": "Maria Silva (@misilva73)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-10-22",
    "discussionLink": "https://ethereum-magicians.org/t/eip-8059-gas-rebase-for-high-precision-gas-metering/25945",
    "reviewer": "staff",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "layer": "EL",
        "champion": {
          "name": "Maria Silva",
          "discord": "misilva73"
        }
      }
    ],
    "laymanDescription": "Ethereum measures work in gas. This change multiplies the size of one gas unit by 1,000 so gas usage can be measured more precisely without decimals. The math inside clients is updated, but how transactions behave stays the same.",
    "stakeholderImpacts": {
      "endUsers": {
        "description": "Users may notice gas numbers change, since each unit is 1,000× smaller, but transaction behavior and protocol rules stay the same."
      },
      "appDevs": {
        "description": "App and contract developers must update hardcoded gas cost constants, tests, and benchmarks to the 1,000× unit. Contract bytecode semantics stay unchanged."
      },
      "walletDevs": {
        "description": "Wallets must update gas estimation, limit defaults, and UI displays to the rebased 1,000× unit so transactions include correct values."
      },
      "toolingInfra": {
        "description": "Explorers, profilers, and RPC analytics must revise gas accounting, reporting, and alerts to reflect the new 1,000× unit across all fields."
      },
      "layer2s": {
        "description": "Rollups and other L2s that follow Ethereum gas semantics must rescale gas metering, calldata pricing, and limits by 1,000× for L1 consistency."
      },
      "stakersNodes": {
        "description": "Validators and node operators must upgrade clients to enforce rebased gas accounting and block validation rules; normal operational workflows otherwise remain unchanged."
      },
      "clClients": {
        "description": "Consensus clients must update header checks for gas limit and gas used to the rebased scale; other fork choice and attestation code is unchanged."
      },
      "elClients": {
        "description": "Execution clients must apply the 1,000× factor across opcode costs, transaction validation, gas accounting, RPC exposure, and metering logic, touching many constants and tests."
      }
    },
    "benefits": [
      "Enables high-precision gas metering without fractional gas.",
      "Reduces rounding errors when repricing EVM operations.",
      "Future-proofs gas costs as hardware improves and state access stays costly.",
      "Avoids major changes to internal EVM logic."
    ]
  }
]
