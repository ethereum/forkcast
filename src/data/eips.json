[
  {
    "id": 2537,
    "title": "EIP-2537: Precompile for BLS12-381 curve operations",
    "status": "Final",
    "description": "Adds precompiled contracts for BLS12-381 curve operations to enable efficient cryptographic operations.",
    "author": "Alex Vlasov, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2020-02-21",
    "discussionLink": "https://ethereum-magicians.org/t/eip-2537-bls12-381-precompiles/4187",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 2935,
    "title": "EIP-2935: Save historical block hashes in state",
    "status": "Final",
    "description": "Saves historical block hashes in state to enable more efficient access to historical data.",
    "author": "Vitalik Buterin, Tomasz Stanczak",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2020-09-04",
    "discussionLink": "https://ethereum-magicians.org/t/eip-2935-save-historical-block-hashes-in-state/4565",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 4844,
    "title": "EIP-4844: Shard Blob Transactions",
    "status": "Final",
    "description": "Introduces a new transaction type for data blobs, to scale data-availability for L2s (aka proto-danksharding).",
    "author": "Vitalik Buterin, Dankrad Feist, Diederik Loerakker (protolambda), et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2021-11-25",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4844-shard-blob-transactions/7435",
    "forkRelationships": [
      {
        "forkName": "Cancun-Deneb",
        "status": "Included"
      }
    ]
  },
  {
    "id": 6110,
    "title": "EIP-6110: Supply validator deposits on chain",
    "status": "Final",
    "description": "Enables validator deposits to be processed directly on the execution layer, improving efficiency.",
    "author": "Mikhail Kalinin, Danny Ryan, Peter Davies",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-12-09",
    "discussionLink": "https://ethereum-magicians.org/t/eip-6110-supply-validator-deposits-on-chain/12072",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 7002,
    "title": "EIP-7002: Execution layer triggerable exits",
    "status": "Final",
    "description": "Allows validator exits to be triggered from the execution layer, improving validator management.",
    "author": "Danny Ryan, Mikhail Kalinin",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-05-09",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7002-execution-layer-triggerable-exits/14195",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 7251,
    "title": "EIP-7251: Increase the MAX_EFFECTIVE_BALANCE",
    "status": "Final",
    "description": "Increases the maximum effective balance for validators to improve staking efficiency.",
    "author": "mike, Francesco, dapplion, Mikhail, Aditya, casparschwa, Potuz, Hsiao-Wei",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-06-28",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7251-increase-the-max-effective-balance/14955",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 7549,
    "title": "EIP-7549: Move committee index outside Attestation",
    "status": "Final",
    "description": "Moves the committee index outside of attestations to improve consensus layer efficiency.",
    "author": "dapplion",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-11-09",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7549-move-committee-index-outside-attestation/15710",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 7594,
    "title": "EIP-7594: PeerDAS - Peer Data Availability Sampling",
    "status": "Draft",
    "description": "Introduces peer data availability sampling to improve data availability for Ethereum's scaling solutions.",
    "author": "Francesco D'Amato, Dankrad Feist, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-01-15",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7594-peerdas-peer-data-availability-sampling/18215",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled",
        "isHeadliner": true
      }
    ],
    "laymanDescription": "PeerDAS enables Ethereum nodes to specialize in storing different pieces of data while still verifying everything is available. This foundational change dramatically increases data capacity for Layer 2 networks while maintaining security.",
    "northStars": ["Scale L1", "Scale blobs"],
    "northStarAlignment": {
      "scaleL1": { "impact": "High", "description": "Essential foundation for scaling Ethereum's data capacity. Builds the infrastructure needed for full Danksharding, potentially increasing data throughput from ~375KB/s to several MB/s in future upgrades." },
      "scaleBlobs": { "impact": "High", "description": "Directly enables Layer 2 scaling by allowing nodes to efficiently handle much more data without overwhelming individual participants." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Medium", "description": "Benefits through much cheaper Layer 2 transactions and access to applications that need more data throughput." },
      "appDevs": { "impact": "Medium", "description": "Enables building applications with higher data requirements. Layer 2 developers benefit from reduced costs and higher capacity limits." },
      "walletDevs": { "impact": "Low", "description": "Minimal direct impact. Users benefit indirectly through better Layer 2 transaction reliability and lower costs." },
      "toolingInfra": { "impact": "High", "description": "Major updates needed for block explorers, indexers, and data availability APIs to handle the new sampling system and proof formats." },
      "layer2s": { "impact": "High", "description": "Game-changing for Layer 2 economics - dramatically reduces costs for posting transaction data and enables much higher throughput rollups." },
      "stakersNodes": { "impact": "High", "description": "Must implement the new specialized data storage and sampling system. Changes from downloading everything to participating in a coordinated verification network." },
      "clClients": { "impact": "High", "description": "Major implementation work required for the new data distribution system, sampling protocols, and coordination between nodes. This is a core infrastructure change." },
      "elClients": { "impact": "Medium", "description": "Need to update how blob transactions are handled and verified, including new proof formats and validation methods." }
    },
    "benefits": [
      "Dramatically reduces Layer 2 transaction costs",
      "Enables scaling to 128+ blobs per block over time",
      "Nodes only store a fraction of data while maintaining security",
      "Foundation for competing with high-speed blockchains",
      "Paves the way for full Danksharding"
    ]
  },
  {
    "id": 7600,
    "title": "EIP-7600: Hardfork Meta - Pectra",
    "status": "Last Call",
    "description": "Meta EIP listing the EIPs formally Scheduled for Inclusion in the Prague/Electra network upgrade.",
    "author": "Tim Beiko",
    "type": "Meta",
    "category": "Core",
    "createdDate": "2024-01-18",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7600-pectra-meta-eip/18400",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Included"
      }
    ]
  },
  {
    "id": 7607,
    "title": "EIP-7607: Hardfork Meta - Fusaka",
    "status": "Draft",
    "description": "Meta EIP listing the EIPs formally Proposed, Considered, Scheduled & Declined for Inclusion in the Fulu/Osaka network upgrade.",
    "author": "Tim Beiko",
    "type": "Meta",
    "category": "Core",
    "createdDate": "2024-02-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7607-fusaka-meta-eip/18439",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Included"
      }
    ]
  },
  {
    "id": 7623,
    "title": "EIP-7623: Increase calldata cost",
    "status": "Final",
    "description": "Increases the gas cost of calldata to better reflect its resource usage and improve network efficiency.",
    "author": "Toni Wahrst√§tter, Vitalik Buterin",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-02-13",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7623-increase-calldata-cost/18647",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 7642,
    "title": "EIP-7642: eth/69 - history expiry and simpler receipts",
    "status": "Draft",
    "description": "Adds history serving window and removes bloom filter in receipt",
    "author": "Marius van der Wijden (@MariusVanDerWijden), Felix Lange <fjl@ethereum.org>, Ahmad Bitar (@smartprogrammer93) <smartprogrammer@windowslive.com>",
    "type": "Standards Track",
    "category": "Networking",
    "createdDate": "2024-02-29",
    "discussionLink": "https://ethereum-magicians.org/t/eth-70-drop-pre-merge-fields-from-eth-protocol/19005",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      },
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This networking upgrade removes outdated data from node synchronization, saving approximately 530GB of bandwidth per sync. It also prepares for removing old blockchain history from new nodes starting in May 2025.",
    "northStars": ["Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Significant bandwidth reduction (530GB+ per sync) and improved networking efficiency through bloom filter removal and better historical data coordination." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Indirect benefits through faster node sync times and reduced bandwidth usage during initial sync." },
      "appDevs": { "impact": "None", "description": "No impact on smart contract development or execution environment." },
      "walletDevs": { "impact": "Low", "description": "Faster initial sync times when setting up new nodes, better reliability for historical data requests." },
      "toolingInfra": { "impact": "Medium", "description": "Historical data APIs and indexers need updates for new history serving windows and modified networking protocols." },
      "layer2s": { "impact": "Low", "description": "More efficient networking infrastructure provides a better foundation for Layer 2 operations." },
      "stakersNodes": { "impact": "Medium", "description": "Significant bandwidth savings during sync operations. Nodes serving historical data gain better tools for announcing their capabilities." },
      "clClients": { "impact": "Low", "description": "Minimal impact as this primarily affects execution layer networking protocols." },
      "elClients": { "impact": "High", "description": "Major implementation work required for new eth/69 protocol including history serving windows, bloom filter removal from receipts, and BlockRangeUpdate messaging." }
    },
    "benefits": [
      "Saves ~530GB of bandwidth per node sync",
      "Faster setup for new Ethereum nodes",
      "Reduces storage requirements for operators",
      "Prepares for streamlined history management"
    ]
  },
  {
    "id": 7685,
    "title": "EIP-7685: General purpose execution layer requests",
    "status": "Final",
    "description": "Introduces a general framework for execution layer requests to improve protocol extensibility.",
    "author": "lightclient",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-14",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7685-general-purpose-execution-layer-requests/19668",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 7691,
    "title": "EIP-7691: Blob throughput increase",
    "status": "Final",
    "description": "Increases blob throughput to improve data availability for Layer 2 solutions.",
    "author": "Ansgar Dietrichs, Dankrad Feist",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-17",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7691-blob-throughput-increase/19724",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 7702,
    "title": "EIP-7702: Set EOA account code",
    "status": "Final",
    "description": "Allows Externally Owned Accounts (EOAs) to temporarily set code, enabling account abstraction features.",
    "author": "Vitalik Buterin, Sam Wilson, Ansgar Dietrichs, Matt Garnett",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-20",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7702-set-eoa-account-code-for-one-transaction/19769",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 7823,
    "title": "EIP-7823: Set upper bounds for MODEXP",
    "status": "Review",
    "description": "Each input field is restricted to a maximum of 8192 bits",
    "author": "Alex Beregszaszi (@axic), Radoslaw Zagorowicz (@rodiazet)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-11-11",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7823-set-upper-bounds-for-modexp/21798",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This introduces a 8192-bit (1024 byte) limit on each input to the MODEXP cryptographic precompile. MODEXP has been a source of consensus bugs due to unbounded inputs. By setting practical limits that cover all real-world use cases (like RSA verification), this reduces the testing surface area and paves the way for future replacement with more efficient EVM code.",
    "northStars": ["Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Low", "description": "Improves network reliability by preventing consensus bugs and reducing testing complexity for a critical precompile." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "None", "description": "No impact - analysis shows no historical transactions would be affected by these limits." },
      "appDevs": { "impact": "Low", "description": "Applications using very large cryptographic operations (>8192 bits) would need to restructure, but no known use cases exist." },
      "walletDevs": { "impact": "None", "description": "No user-facing impact as limits exceed all practical cryptographic use cases." },
      "toolingInfra": { "impact": "Low", "description": "Gas estimation and fee calculation tools need updates for the new ModExp pricing formula." },
      "layer2s": { "impact": "Low", "description": "Provides more predictable gas costs for cryptographic operations in L2 smart contracts." },
      "stakersNodes": { "impact": "Low", "description": "Reduced risk of consensus bugs and more predictable resource usage for MODEXP operations." },
      "clClients": { "impact": "None", "description": "No changes required for consensus layer implementations." },
      "elClients": { "impact": "Medium", "description": "Must implement bounds checking for MODEXP inputs and handle new error conditions for oversized inputs." }
    },
    "benefits": [
      "Eliminates underpriced cryptographic operations",
      "Prevents potential DoS attacks",
      "Better compensation for computational work",
      "More consistent gas pricing"
    ]
  },
  {
    "id": 7825,
    "title": "EIP-7825: Transaction Gas Limit Cap",
    "status": "Stagnant",
    "description": "Introduce a protocol-level cap on the maximum gas used by a transaction to 30 million.",
    "author": "Giulio Rebuffo (@Giulio2002)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-11-23",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7825-transaction-gas-limit-cap/21848",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This introduces a 30 million gas cap for individual transactions, preventing any single transaction from consuming most of a block. The goal is to ensure fairer access to block space and improve network stability.",
    "northStars": ["Scale L1", "Improve UX"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Improves network stability and resilience against DoS attacks by preventing individual transactions from consuming excessive block space, enabling more predictable block validation times." },
      "improveUX": { "impact": "Medium", "description": "More predictable transaction inclusion and fairer access to block space, though may require some large applications to restructure their operations." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Most users unaffected as typical transactions use far less than 30M gas. Edge cases with very complex operations may need to restructure." },
      "appDevs": { "impact": "High", "description": "Applications with very large transactions (complex DeFi, large contract deployments) may need to split operations or redesign architecture to stay under the cap." },
      "walletDevs": { "impact": "Low", "description": "Need to enforce the gas cap in transaction creation, but most wallet operations are well below the limit." },
      "toolingInfra": { "impact": "Medium", "description": "Gas estimation tools, transaction builders, and deployment scripts need updates to enforce the 30M gas cap." },
      "layer2s": { "impact": "Medium", "description": "Could impact future L2 bundling strategies and settlement transaction designs. May conflict with efficient batch processing approaches." },
      "stakersNodes": { "impact": "Low", "description": "More predictable block processing times and reduced risk of validation bottlenecks from extremely large transactions." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer transaction validation." },
      "elClients": { "impact": "Medium", "description": "Need to implement transaction pool validation to reject transactions exceeding the gas cap and block validation to reject blocks containing invalid transactions." }
    },
    "benefits": [
      "Prevents single transactions from hogging block space",
      "Ensures fairer access for all users",
      "Reduces network instability risks",
      "Enables safer block capacity increases"
    ]
  },
  {
    "id": 7840,
    "title": "EIP-7840: Add blob schedule to EL config files",
    "status": "Final",
    "description": "Adds blob schedule configuration to execution layer config files for better blob management.",
    "author": "lightclient",
    "type": "Informational",
    "category": "Interface",
    "createdDate": "2024-05-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7840-add-blob-schedule-to-el-config-files/20100",
    "forkRelationships": [
      {
        "forkName": "Pectra",
        "status": "Scheduled"
      }
    ]
  },
  {
    "id": 7883,
    "title": "EIP-7883: ModExp Gas Cost Increase",
    "status": "Draft",
    "description": "Increases cost of ModExp precompile",
    "author": "Marcin Sobczak (@marcindsobczak), Marek Moraczy≈Ñski (@MarekM25), Marcos Maceo (@stdevMac)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-02-11",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7883-modexp-gas-cost-increase/22841",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This increases the gas cost of the ModExp cryptographic precompile to address underpriced operations. It raises the minimum cost from 200 to 500 gas and doubles costs for large inputs over 32 bytes.",
    "northStars": ["Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Low", "description": "Improves network economic sustainability by ensuring cryptographic precompiles are properly priced, preventing potential DoS vectors from underpriced operations." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Most users unaffected. Applications using ModExp with large inputs (>32 bytes) will see increased gas costs." },
      "appDevs": { "impact": "Medium", "description": "Applications using RSA verification, large modular exponentiation, or cryptographic protocols with big numbers may need to optimize or budget for higher costs." },
      "walletDevs": { "impact": "None", "description": "No impact as wallets typically don't use ModExp precompile directly." },
      "toolingInfra": { "impact": "Low", "description": "Gas estimation and fee calculation tools need updates for the new ModExp pricing formula." },
      "layer2s": { "impact": "Low", "description": "L2s using ModExp precompile for cryptographic operations will see increased costs for large input operations." },
      "stakersNodes": { "impact": "Low", "description": "Better compensation alignment for computational work, reduced risk of DoS attacks through underpriced operations." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer precompile pricing." },
      "elClients": { "impact": "Medium", "description": "Need to implement the updated ModExp pricing formula with new minimum costs and scaling factors for large inputs." }
    },
    "benefits": [
      "Fixes underpriced ModExp operations that cost less than simpler precompiles",
      "Ensures ModExp pricing reflects actual computational cost",
      "Prevents potential DoS from cheap complex operations",
      "Aligns gas costs with performance benchmarks"
    ]
  },
  {
    "id": 7892,
    "title": "EIP-7892: Blob Parameter Only ('BPO') Hardforks",
    "status": "Draft",
    "description": "Enables hardforks that only modify blob-related parameters without requiring a new fork-version or changing any other consensus rules.",
    "author": "Mark Mackey (@ethDreamer), Ra√∫l Kripalani (@raulk)",
    "type": "Informational",
    "createdDate": "2025-02-28",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7892-blob-parameter-only-hardforks/23018",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This creates a new lightweight process to adjust blob storage parameters. Instead of waiting for a major upgrade, Ethereum can make smaller, more frequent adjustments to blob capacity to accommodate changing demand from Layer 2s.",
    "northStars": ["Scale blobs", "Improve UX"],
    "northStarAlignment": {
      "scaleBlobs": { "impact": "High", "description": "Directly addresses the rapid growth in L2 data availability demand by enabling more frequent, incremental blob capacity increases to prevent sustained saturation." },
      "improveUX": { "impact": "Medium", "description": "Provides predictable scaling framework that gives L2 builders confidence to commit to Ethereum over alternative DA solutions." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Indirect benefits through more responsive blob capacity scaling leading to lower and more stable L2 transaction costs." },
      "appDevs": { "impact": "Medium", "description": "More predictable data availability scaling gives developers confidence to build applications requiring consistent blob capacity growth." },
      "walletDevs": { "impact": "Low", "description": "Minimal direct impact. Benefits indirectly through improved L2 scaling economics and more stable transaction costs." },
      "toolingInfra": { "impact": "High", "description": "Major updates needed for upgrade tracking, blob parameter monitoring, and tooling to handle the new BPO fork mechanism." },
      "layer2s": { "impact": "High", "description": "Critical for L2 growth strategy - enables continuous scaling of data availability capacity to match rapidly growing demand without waiting for major hard forks." },
      "stakersNodes": { "impact": "Medium", "description": "Need to handle more frequent but lighter-weight network upgrades. Simplified upgrade process reduces operational overhead compared to full hard forks." },
      "clClients": { "impact": "High", "description": "Significant changes needed for blob schedule management, modified compute_fork_digest implementation, and P2P networking updates including ENR extensions." },
      "elClients": { "impact": "High", "description": "Major implementation work required for blob schedule configuration management, activation timestamp handling, and coordination with consensus layer blob parameter changes." }
    },
    "benefits": [
      "Faster response to Layer 2 data demand growth",
      "Lighter coordination than full network upgrades",
      "Predictable scaling roadmap for builders",
      "Safer capacity increases through smaller steps"
    ]
  },
  {
    "id": 7918,
    "title": "EIP-7918: Blob base fee bounded by execution cost",
    "status": "Review",
    "description": "Imposes that the price for GAS_PER_BLOB is greater than the price for BLOB_BASE_COST",
    "author": "Anders Elowsson (@anderselowsson), Ben Adams (@benaadams), Francesco D'Amato (@fradamt)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-25",
    "discussionLink": "https://ethereum-magicians.org/t/eip-blob-base-fee-bounded-by-price-of-blob-carrying-transaction/23271",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This addresses blob fee market problems by introducing a reserve price tied to execution costs. When Layer 2 execution costs dominate blob costs, this prevents the blob fee market from becoming ineffective at 1 wei. See a storybook-style explanation [here](https://notes.ethereum.org/@anderselowsson/AIG)!",
    "northStars": ["Scale blobs"],
    "northStarAlignment": {
      "scaleBlobs": { "impact": "High", "description": "Critical for L2 economics - ensures sustainable blob pricing that reflects true costs and maintains effective price discovery as L2 usage scales." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Medium", "description": "More stable and predictable Layer 2 transaction costs, avoiding dramatic fee spikes when blob market becomes inelastic." },
      "appDevs": { "impact": "Low", "description": "More predictable blob cost modeling for applications, especially those with consistent data posting patterns." },
      "walletDevs": { "impact": "Low", "description": "More predictable fee estimation for Layer 2 transactions due to improved blob pricing stability." },
      "toolingInfra": { "impact": "Medium", "description": "Blob fee estimation tools and Layer 2 cost analysis dashboards need updates for the new reserve price mechanism." },
      "layer2s": { "impact": "High", "description": "Fundamental improvement to blob economics - prevents scenarios where blob fees become insignificant relative to execution costs, ensuring healthy fee market dynamics." },
      "stakersNodes": { "impact": "Medium", "description": "Ensures fair compensation for KZG proof verification compute costs through minimum blob pricing tied to execution base fee." },
      "clClients": { "impact": "Low", "description": "Minimal impact as this primarily affects execution layer blob fee calculation mechanisms." },
      "elClients": { "impact": "Medium", "description": "Need to implement modified calc_excess_blob_gas() function with new reserve price logic and BLOB_BASE_COST parameter." }
    },
    "benefits": [
      "Prevents blob fee market collapse",
      "Maintains effective price discovery",
      "Ensures blob consumers pay fair market price for compute",
      "Reduces dramatic fee spikes"
    ]
  },
  {
    "id": 7935,
    "title": "EIP-7935: Set default gas limit to XX0M",
    "status": "Draft",
    "description": "Recommend a new gas limit value for Fusaka and update execution layer client default configs",
    "author": "Sophia Gold (@sophia-gold), Parithosh Jayanthi (@parithoshj), Toni Wahrst√§tter (@nerolation), Carl Beekhuizen (@CarlBeek), Ansgar Dietrichs (@adietrichs), Dankrad Feist (@dankrad), Alex Stokes (@ralexstokes), Josh Rudolph (@jrudolph), Giulio Rebuffo (@Giulio2002), Storm Slivkoff (@sslivkoff)",
    "type": "Informational",
    "createdDate": "2025-04-22",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7935-set-default-gas-limit-to-xx0m/23789",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This proposes increasing the gas limit from 36M to a higher value (specific amount TBD) to scale L1 execution capacity. While this change does not require a hard fork (gas limit is a validator-chosen parameter), it requires extensive testing to ensure network stability at higher computational loads and so inclusion of the EIP in the hard fork ensures that this work is prioritized and ongoing.",
    "northStars": ["Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "High", "description": "Directly increases overall network throughput by allowing more computation per block, the most straightforward way to scale L1 execution capacity." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Medium", "description": "Benefits from higher throughput and faster transaction processing, but potential risks if inadequately tested or if RPC infrastructure can't keep up." },
      "appDevs": { "impact": "High", "description": "Can build more sophisticated applications without hitting gas limits, but need to be aware that the specific limit value is still TBD." },
      "walletDevs": { "impact": "Medium", "description": "Better user experience with faster confirmations, but RPC node performance impacts could affect wallet reliability." },
      "toolingInfra": { "impact": "High", "description": "RPC providers, indexers, and monitoring tools need significant updates to handle larger blocks and higher computational loads." },
      "layer2s": { "impact": "Low", "description": "More block space available for settlement transactions, but coordination needed with EIP-7825's 30M transaction cap." },
      "stakersNodes": { "impact": "High", "description": "Need significantly more computational power to process larger blocks. Validator hardware requirements may increase substantially." },
      "clClients": { "impact": "Medium", "description": "Must handle larger execution payloads and ensure consensus layer can propagate larger blocks within gossip limits." },
      "elClients": { "impact": "High", "description": "Major testing and bug-fixing effort required to handle larger blocks safely. Must update default gas limit configurations and ensure stability at higher computational loads." }
    },
    "benefits": [
      "Directly increases mainnet throughput",
      "Enables more complex smart contracts",
      "Reduces transaction queuing during high demand",
      "Improves confirmation times"
    ]
  },
  {
    "id": 5920,
    "title": "EIP-5920: PAY opcode",
    "status": "Review",
    "description": "Introduces a new opcode, PAY, to send ether to an address without calling any of its functions",
    "author": "Gavin John (@Pandapip1), Zainan Victor Zhou (@xinbenlv), Sam Wilson (@SamWilsn), Jochem Brouwer (@jochem-brouwer), Charles Cooper (@charles-cooper)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-03-14",
    "discussionLink": "https://ethereum-magicians.org/t/eip-5920-pay-opcode/11717",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces a new PAY opcode that transfers ETH without executing recipient code, solving critical security issues with current transfer methods. It prevents reentrancy attacks and eliminates DoS vectors from malicious recipient contracts.",
    "northStars": ["Improve UX", "Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Low", "description": "Minor gas efficiency improvements for ETH transfers by avoiding unnecessary code execution and removing security overhead." },
      "improveUX": { "impact": "Medium", "description": "Significantly improves smart contract security by eliminating reentrancy vectors and DoS attacks from ETH transfers, enabling safer application development." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Indirect benefits through safer smart contract interactions and potentially lower gas costs for ETH transfers." },
      "appDevs": { "impact": "High", "description": "Major security improvement - eliminates reentrancy attack vectors from ETH transfers and enables new safe transfer patterns, but need to understand bypass of fallback functions." },
      "walletDevs": { "impact": "Medium", "description": "Can implement more efficient withdrawal and transfer mechanisms, especially for smart contract wallets avoiding reentrancy concerns." },
      "toolingInfra": { "impact": "Medium", "description": "Transaction analysis tools, debuggers, and smart contract libraries need updates to support the new PAY opcode." },
      "layer2s": { "impact": "Low", "description": "More efficient and secure ETH handling in Layer 2 smart contracts and bridge protocols." },
      "stakersNodes": { "impact": "Low", "description": "Slightly more efficient transaction processing due to reduced code execution for simple ETH transfers." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer opcodes." },
      "elClients": { "impact": "Medium", "description": "Need to implement new PAY opcode (0xfc) with proper gas accounting using EIP-2929 warm/cold access patterns and new account creation costs." }
    },
    "benefits": [
      "Eliminates reentrancy attacks from ETH transfers",
      "Prevents malicious contracts from blocking payments",
      "Reduces gas costs for simple transfers",
      "Essential safety for advanced account types"
    ]
  },
  {
    "id": 7907,
    "title": "EIP-7907: Meter Contract Code Size And Increase Limit",
    "status": "Draft",
    "description": "Increases the contract code size limit introduced in EIP-170 and adds a gas metering to code loading",
    "author": "Charles Cooper (@charles-cooper), Qi Zhou (@qizhou)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-14",
    "discussionLink": "https://ethereum-magicians.org/t/eip-remove-contract-size-limit/23156",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This increases the contract code size limit from 24KB to 256KB and introduces gas metering for larger contracts. The change eliminates the need for complex architectural workarounds and enables more sophisticated single-contract applications.",
    "northStars": ["Improve UX", "Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Low", "description": "Better resource management and gas metering for large contracts while maintaining network efficiency and preventing DoS attacks." },
      "improveUX": { "impact": "High", "description": "Major developer experience improvement - eliminates need for complex architectural patterns like Diamond Standard, reduces deployment complexity, and enables single-contract solutions." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Indirect benefits through access to more sophisticated single-contract applications and potentially lower gas costs from reduced cross-contract calls." },
      "appDevs": { "impact": "High", "description": "Eliminates major architectural constraints - can build larger, more complex contracts without splitting logic across multiple contracts or using proxy patterns." },
      "walletDevs": { "impact": "Low", "description": "Can interact with more sophisticated single-contract applications, but need to handle higher gas costs for large contract interactions." },
      "toolingInfra": { "impact": "Medium", "description": "Contract verification tools, static analysis, and deployment infrastructure need updates to handle larger contracts and new gas metering." },
      "layer2s": { "impact": "Low", "description": "Can deploy larger, more sophisticated infrastructure contracts without hitting size limits." },
      "stakersNodes": { "impact": "Medium", "description": "Need updated client implementations with proper gas metering and efficient codesize indexing. Larger contracts may increase storage and processing requirements." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer contract deployment and metering." },
      "elClients": { "impact": "Medium", "description": "Need to implement new gas metering for code-loading operations, warm/cold code access tracking, and efficient codesize indexing to avoid DoS attacks from large contract loads." }
    },
    "benefits": [
      "Enables much larger smart contracts (10x size increase)",
      "Eliminates complex multi-contract workarounds",
      "Reduces gas costs from cross-contract calls",
      "Makes development more accessible"
    ]
  },
  {
    "id": 7951,
    "title": "EIP-7951: Precompile for secp256r1 Curve Support",
    "status": "Draft",
    "description": "Add precompiled contract for secp256r1 ECDSA signature verification with proper security checks",
    "author": "Carl Beekhuizen (@carlbeek), Ula≈ü Erdoƒüan (@ulerdogan), Doƒüan Alpaslan (@doganalpaslan)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-05-27",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7951-precompile-for-secp256r1-curve-support/24360",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This adds support for a widely-used cryptographic curve called secp256r1 (also known as P-256) to Ethereum. Currently, Ethereum only supports the secp256k1 curve for signatures, but many devices and systems use secp256r1. This change allows Ethereum to verify signatures from devices like iPhones, Android phones, hardware wallets, and other systems that use this standard curve, making it easier to integrate with existing infrastructure. Note: This EIP supercedes [RIP-7212](https://github.com/ethereum/RIPs/blob/master/RIPS/rip-7212.md).",
    "northStars": ["Improve UX"],
    "northStarAlignment": {
      "improveUX": { "impact": "High", "description": "Dramatically improves user experience by enabling native integration with billions of devices that use secp256r1, eliminating the need for complex signature conversion or additional infrastructure." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "High", "description": "Can use their existing devices (phones, hardware wallets) to sign Ethereum transactions without additional software or conversion steps." },
      "appDevs": { "impact": "Medium", "description": "Can integrate with existing secp256r1-based systems and devices more easily, reducing development complexity for authentication and signing flows." },
      "walletDevs": { "impact": "High", "description": "Can support native signing from devices that use secp256r1, improving wallet compatibility and user experience across different platforms." },
      "toolingInfra": { "impact": "Medium", "description": "Need to implement secp256r1 signature verification in tooling, but gain ability to work with broader ecosystem of devices and systems." },
      "layer2s": { "impact": "Low", "description": "Can leverage secp256r1 signatures for Layer 2 operations, improving compatibility with existing infrastructure." },
      "stakersNodes": { "impact": "Low", "description": "Minimal impact as this primarily affects transaction validation and doesn't change consensus or staking mechanics." },
      "clClients": { "impact": "None", "description": "No impact on consensus layer as this affects execution layer transaction validation." },
      "elClients": { "impact": "Medium", "description": "Need to implement secp256r1 precompile for efficient signature verification, but this is a well-established cryptographic standard." }
    },
    "benefits": [
      "Enables native integration with billions of secp256r1 devices",
      "Eliminates need for signature conversion or additional infrastructure",
      "Improves user experience for mobile and hardware wallet users",
      "Reduces development complexity for authentication systems",
      "Enables compliance with existing security standards"
    ]
  },
  {
    "id": 7917,
    "title": "EIP-7917: Deterministic proposer lookahead",
    "status": "Draft",
    "description": "Pre-calculate and store a deterministic proposer lookahead in the beacon state at the start of every epoch",
    "author": "Lin Oshitani (@linoscope) <lin@nethermind.io>, Justin Drake (@JustinDrake) <justin@ethereum.org>",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-24",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7917-deterministic-proposer-lookahead/23259",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This makes Ethereum's block proposer schedule completely predictable ahead of time. Currently, validators can't know who will propose blocks in the next epoch until it starts, which creates uncertainty for MEV mitigation and preconfirmation protocols. This change pre-calculates and stores the proposer schedule for future epochs, making it deterministic and accessible to applications.",
    "northStars": ["Improve UX"],
    "northStarAlignment": {
      "improveUX": { "impact": "High", "description": "Enables reliable preconfirmation services and improved transaction ordering predictability." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Medium", "description": "Better protection from MEV extraction through improved preconfirmation services and more predictable transaction ordering." },
      "appDevs": { "impact": "High", "description": "Can build more sophisticated MEV mitigation strategies and preconfirmation protocols with predictable proposer schedules." },
      "walletDevs": { "impact": "Medium", "description": "Can implement better MEV protection features and more reliable transaction timing predictions for users." },
      "toolingInfra": { "impact": "High", "description": "MEV analysis tools, preconfirmation services, and block builder infrastructure need updates to leverage predictable proposer schedules." },
      "layer2s": { "impact": "Medium", "description": "More predictable L1 block production timing improves Layer 2 settlement coordination and transaction scheduling." },
      "stakersNodes": { "impact": "Low", "description": "Minimal impact on validator operations, but provides better visibility into future proposer assignments." },
      "clClients": { "impact": "Medium", "description": "Need to implement proposer lookahead calculation and storage in beacon state, with additional computation at epoch boundaries." },
      "elClients": { "impact": "Low", "description": "Minimal impact as this primarily affects consensus layer proposer scheduling and beacon state management." }
    },
    "benefits": [
      "Improves predictability for based preconfirmation protocols",
      "Makes block proposer schedule deterministic"
    ]
  },
  {
    "id": 7934,
    "title": "EIP-7934: RLP Execution Block Size Limit",
    "status": "Draft",
    "description": "Introduce a protocol-level cap on the maximum RLP-encoded block size to 10 MiB, including a 2 MiB margin for beacon block size.",
    "author": "Giulio Rebuffo (@Giulio2002), Ben Adams (@benaadams), Storm Slivkoff (@sslivkoff)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-04-16",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7934-add-bytesize-limit-to-blocks/23589",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This adds a maximum size limit of 10MB to Ethereum blocks to prevent network instability and denial-of-service attacks. Currently, blocks can grow very large, which slows down network propagation and increases the risk of temporary forks. This limit ensures blocks stay within a reasonable size that the network can efficiently process and propagate.",
    "northStars": ["Scale L1"],
    "northStarAlignment": {
      "improveUX": { "impact": "Low", "description": "Improves network reliability and reduces the risk of temporary forks, leading to more consistent transaction confirmation times." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "More reliable network with reduced risk of temporary forks and more consistent transaction confirmation times." },
      "appDevs": { "impact": "Low", "description": "More predictable block propagation and reduced risk of network instability affecting transaction processing." },
      "walletDevs": { "impact": "Low", "description": "More reliable transaction confirmation times and reduced risk of network issues affecting wallet operations." },
      "toolingInfra": { "impact": "Low", "description": "More predictable block sizes and network behavior, simplifying infrastructure planning and monitoring." },
      "layer2s": { "impact": "Low", "description": "More reliable base layer for settlement transactions with reduced risk of network instability." },
      "stakersNodes": { "impact": "Medium", "description": "Need to implement block size validation, but benefit from more stable network propagation and reduced DoS risks." },
      "clClients": { "impact": "Low", "description": "Minimal impact as this primarily affects execution layer block validation and propagation." },
      "elClients": { "impact": "Medium", "description": "Need to implement block size validation logic and ensure block construction respects the new size limits." }
    },
    "benefits": [
      "Prevents network instability from oversized blocks",
      "Reduces risk of denial-of-service attacks",
      "Improves block propagation efficiency",
      "Ensures compatibility with consensus layer limits"
    ]
  },
  {
    "id": 4762,
    "title": "EIP-4762: Statelessness gas cost changes",
    "status": "Draft",
    "description": "Adjusts gas costs to support stateless execution and Verkle tree state transitions.",
    "author": "Guillaume Ballet, Vitalik Buterin, Dankrad Feist",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-01-13",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4762-statelessness-gas-cost-changes/8714",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This restructures how gas costs work to prepare for stateless clients - nodes that can validate blocks without storing the entire blockchain state. The changes ensure gas costs accurately reflect the new computational model.",
    "northStars": ["Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "High", "description": "Essential foundation for stateless clients, which enable massive improvements in node syncing speed and storage requirements. Enables nodes to validate without storing full state." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Indirect benefits through improved network decentralization and faster node syncing, but gas cost changes may affect some transaction patterns." },
      "appDevs": { "impact": "Medium", "description": "Some operations may have different gas costs, requiring optimization of smart contracts for the new stateless execution model." },
      "walletDevs": { "impact": "Low", "description": "Need to update gas estimation for transactions affected by the new cost model, but most operations remain similar." },
      "toolingInfra": { "impact": "High", "description": "Major updates needed for gas estimation, transaction simulation, and stateless proof generation. Block explorers need stateless verification capabilities." },
      "layer2s": { "impact": "Medium", "description": "May need to adjust for new gas costs in settlement transactions and state access patterns." },
      "stakersNodes": { "impact": "High", "description": "Can run much lighter nodes using stateless validation, dramatically reducing storage and syncing requirements while maintaining security." },
      "clClients": { "impact": "Low", "description": "Minimal impact as this primarily affects execution layer gas metering and state access patterns." },
      "elClients": { "impact": "High", "description": "Major implementation work required for new gas metering model, stateless execution environment, and witness data handling." }
    },
    "benefits": [
      "Enables stateless client operation with dramatically faster sync",
      "Reduces storage requirements for node operators",
      "Improves network decentralization through lower barriers",
      "Foundation for Verkle tree state transition"
    ]
  },
  {
    "id": 6800,
    "title": "EIP-6800: Ethereum state using a unified verkle tree",
    "status": "Draft",
    "description": "Migrates Ethereum's state from Merkle Patricia tries to Verkle trees for improved efficiency and statelessness support.",
    "author": "Guillaume Ballet, Verkle Team",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-03-20",
    "discussionLink": "https://ethereum-magicians.org/t/eip-6800-ethereum-state-using-a-unified-verkle-tree/13734",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This proposes transitioning Ethereum's entire state system from Merkle Patricia tries to Verkle trees. This foundational change would enable stateless clients, dramatically faster syncing, and better scalability while maintaining security. However, it's competing with other major proposals for Glamsterdam.",
    "northStars": ["Scale L1", "Improve UX"],
    "northStarAlignment": {
      "scaleL1": { "impact": "High", "description": "Revolutionary improvement to state management enabling stateless clients, faster state access, and much more efficient proof sizes. This is foundational infrastructure for long-term scaling." },
      "improveUX": { "impact": "High", "description": "Enables instant node syncing through stateless operation, dramatically reducing barriers to running Ethereum infrastructure and improving decentralization." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "High", "description": "Revolutionary improvement in node syncing speed (from hours/days to minutes), better network decentralization, and more reliable access to Ethereum services." },
      "appDevs": { "impact": "Medium", "description": "More efficient state access patterns and improved proof verification, though most smart contract logic remains unchanged." },
      "walletDevs": { "impact": "Medium", "description": "Can implement much faster light clients and improve wallet syncing speed through stateless verification capabilities." },
      "toolingInfra": { "impact": "High", "description": "Complete overhaul needed for state management, proof generation, indexing systems, and block explorers to handle Verkle tree proofs." },
      "layer2s": { "impact": "Medium", "description": "More efficient state root verification and improved cross-chain proof mechanisms using Verkle tree cryptography." },
      "stakersNodes": { "impact": "High", "description": "Can operate with dramatically reduced storage requirements and near-instant syncing through stateless validation, lowering barriers to participation." },
      "clClients": { "impact": "Low", "description": "Minimal direct impact as this primarily affects execution layer state management and proof structures." },
      "elClients": { "impact": "High", "description": "Complete state system rewrite required including Verkle tree implementation, state migration logic, and new proof generation/verification systems." }
    },
    "benefits": [
      "Enables instant node syncing through stateless operation",
      "Dramatically reduces storage requirements for validators",
      "Improves network decentralization through lower barriers",
      "More efficient cryptographic proofs (smaller size)",
      "Foundation for future scalability improvements"
    ],
    "isHeadliner": false
  },
  {
    "id": 6873,
    "title": "EIP-6873: Preimage retention",
    "status": "Draft",
    "description": "Specifies preimage retention requirements for Verkle tree state transitions and stateless execution.",
    "author": "Guillaume Ballet",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-04-11",
    "discussionLink": "https://ethereum-magicians.org/t/eip-6873-preimage-retention/13766",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This ensures that the data needed to reconstruct Verkle tree proofs is properly preserved during the transition. It's a crucial technical requirement that maintains data availability while migrating to the new tree structure.",
    "northStars": ["Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Essential infrastructure component for Verkle tree transition, ensuring data integrity and availability during the state system migration." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "None", "description": "No direct user-facing impact - this is purely infrastructure maintenance during the Verkle transition." },
      "appDevs": { "impact": "None", "description": "No impact on smart contract development as this handles backend state management during migration." },
      "walletDevs": { "impact": "None", "description": "No impact on wallet development as preimage retention is handled transparently by the protocol." },
      "toolingInfra": { "impact": "Medium", "description": "Infrastructure providers need to understand preimage retention requirements for proper state reconstruction and proof generation." },
      "layer2s": { "impact": "None", "description": "No direct impact on Layer 2 operations as this manages execution layer state transition details." },
      "stakersNodes": { "impact": "Medium", "description": "Need to properly handle preimage data during the Verkle tree migration to maintain state verification capabilities." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer state management." },
      "elClients": { "impact": "High", "description": "Must implement proper preimage retention mechanisms during state tree migration to ensure continuity of state verification." }
    },
    "benefits": [
      "Ensures data integrity during Verkle tree transition",
      "Maintains historical state accessibility",
      "Prevents data loss during migration",
      "Supports smooth transition to stateless model"
    ]
  },
  {
    "id": 7545,
    "title": "EIP-7545: Verkle proof verification precompile",
    "status": "Draft",
    "description": "Adds a precompiled contract for efficient verification of Verkle tree proofs to support stateless execution.",
    "author": "Guillaume Ballet, Verkle Team",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-11-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7545-verkle-proof-verification-precompile/15665",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This adds efficient built-in verification for Verkle tree cryptographic proofs. Instead of expensive smart contract computations, this precompile enables fast and cheap verification of the new proof system.",
    "northStars": ["Scale L1", "Improve UX"],
    "northStarAlignment": {
      "scaleL1": { "impact": "High", "description": "Essential for efficient Verkle tree proof verification within smart contracts, enabling advanced stateless applications and cross-chain verification." },
      "improveUX": { "impact": "Medium", "description": "Enables new applications requiring state proof verification at much lower gas costs than pure smart contract implementations." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Benefits through cheaper applications that need to verify state proofs, enabling new use cases like efficient cross-chain bridges." },
      "appDevs": { "impact": "High", "description": "Enables building applications that efficiently verify Verkle proofs, opening up new possibilities for cross-chain protocols and state-dependent applications." },
      "walletDevs": { "impact": "Medium", "description": "Can implement more efficient state verification in light clients and improve cross-chain transaction validation." },
      "toolingInfra": { "impact": "Medium", "description": "Infrastructure services can leverage efficient proof verification for state-dependent queries and cross-chain data verification." },
      "layer2s": { "impact": "High", "description": "Critical for Layer 2 systems that need to verify L1 state efficiently, enabling better bridge security and state synchronization." },
      "stakersNodes": { "impact": "Low", "description": "Indirect benefits through more efficient proof verification reducing overall network computational load." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer precompile functionality." },
      "elClients": { "impact": "High", "description": "Must implement the Verkle proof verification precompile with proper gas accounting and cryptographic verification algorithms." }
    },
    "benefits": [
      "Enables cheap verification of Verkle proofs in smart contracts",
      "Unlocks new cross-chain application possibilities",
      "Reduces gas costs for state proof verification",
      "Essential infrastructure for stateless applications"
    ]
  },
  {
    "id": 7667,
    "title": "EIP-7667: Raise gas costs of hash functions",
    "status": "Draft",
    "description": "Increases gas costs for hash function operations to better reflect computational costs in Verkle tree environments.",
    "author": "Verkle Team",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-03-26",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7667-raise-gas-costs-of-hash-functions/19123",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Considered"
      }
    ],
    "laymanDescription": "This increases gas costs for hash operations to better reflect their computational cost in the Verkle tree environment. The adjustment ensures fair pricing as the protocol transitions to new cryptographic primitives.",
    "northStars": ["Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Low", "description": "Ensures sustainable economics for hash operations in the Verkle tree environment and prevents potential DoS vectors from underpriced operations." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Most users unaffected, but hash-intensive applications may see slightly increased transaction costs." },
      "appDevs": { "impact": "Medium", "description": "Applications using extensive hash operations (like Merkle tree verification) may need to optimize or budget for higher gas costs." },
      "walletDevs": { "impact": "None", "description": "Minimal impact as wallets typically don't perform extensive hash operations directly." },
      "toolingInfra": { "impact": "Low", "description": "Gas estimation tools need updates for the new hash function pricing, but changes are straightforward." },
      "layer2s": { "impact": "Low", "description": "Layer 2 systems using hash-intensive operations may see increased costs for certain proof verification patterns." },
      "stakersNodes": { "impact": "Low", "description": "Better compensation alignment for computational work performed during hash operations in the new environment." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer gas pricing." },
      "elClients": { "impact": "Medium", "description": "Need to implement updated gas costs for hash functions with proper metering for the Verkle tree computational model." }
    },
    "benefits": [
      "Ensures fair pricing for hash operations",
      "Prevents DoS attacks through underpriced computation",
      "Aligns gas costs with Verkle tree computational model",
      "Maintains network economic sustainability"
    ]
  },
  {
    "id": 7793,
    "title": "EIP-7793: Conditional Transactions",
    "status": "Draft",
    "description": "Transactions that only executes at a specific index and slot.",
    "author": "Marc Harvey-Hill (@Marchhill), Ahmad Bitar (@smartprogrammer93)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-10-17",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7793-asserttxindex-opcode/21513",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed"
      }
    ],
    "laymanDescription": "This introduces smart transactions that only execute when specific conditions are met on-chain. Instead of failed transactions wasting gas, these transactions wait for the right conditions or don't execute at all.",
    "northStars": ["Improve UX", "Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Reduces wasted computation from failed transactions and enables more efficient transaction patterns that only execute when conditions are optimal." },
      "improveUX": { "impact": "High", "description": "Dramatically improves user experience by eliminating failed transactions that waste gas, enabling more sophisticated automation and better transaction success rates." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "High", "description": "Major improvement - no more paying gas for failed transactions. Enables setting up automated transactions that wait for optimal conditions." },
      "appDevs": { "impact": "High", "description": "Enables building much more sophisticated automated applications with conditional logic, reducing complexity in smart contracts and improving reliability." },
      "walletDevs": { "impact": "High", "description": "Can implement smart transaction features like \"execute when price reaches X\" or \"submit when gas is low\" improving user experience significantly." },
      "toolingInfra": { "impact": "High", "description": "Transaction monitoring, mempool analysis, and automation tools need major updates to handle conditional transaction logic and execution patterns." },
      "layer2s": { "impact": "Medium", "description": "Can implement more efficient settlement patterns and conditional execution logic in Layer 2 protocols." },
      "stakersNodes": { "impact": "Medium", "description": "Reduced computational waste from failed transactions, though need to handle conditional transaction evaluation and storage." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer transaction processing." },
      "elClients": { "impact": "High", "description": "Major implementation work required for conditional transaction evaluation, mempool management, and new transaction types with condition checking." }
    },
    "benefits": [
      "Eliminates wasted gas from failed transactions",
      "Enables sophisticated transaction automation",
      "Improves transaction success rates",
      "Reduces user frustration with failed transactions"
    ]
  },
  {
    "id": 7843,
    "title": "EIP-7843: SLOTNUM opcode",
    "status": "Review",
    "description": "Opcode to get the current slot number.",
    "author": "Marc Harvey-Hill (@Marchhill)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-12-06",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7843-slotnum-opcode/22234",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed"
      }
    ],
    "laymanDescription": "This adds a simple but powerful new opcode that lets smart contracts know the current slot number (Ethereum's 12-second time unit). This enables precise time-based logic without relying on block timestamps.",
    "northStars": ["Improve UX"],
    "northStarAlignment": {
      "improveUX": { "impact": "Medium", "description": "Enables more reliable time-based smart contracts and better coordination between consensus and execution layers." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Indirect benefits through more reliable time-based applications like vesting contracts, auctions, and time-locked features." },
      "appDevs": { "impact": "High", "description": "Provides precise, reliable timing mechanism for smart contracts, enabling better auction systems, vesting schedules, and time-dependent logic." },
      "walletDevs": { "impact": "Low", "description": "Can implement more accurate time-based features and better estimation of when time-locked transactions will execute." },
      "toolingInfra": { "impact": "Low", "description": "Development tools and debuggers need to support the new SLOTNUM opcode for smart contract development and testing." },
      "layer2s": { "impact": "Low", "description": "Layer 2 systems can use more precise timing coordination with L1 consensus through slot number access." },
      "stakersNodes": { "impact": "None", "description": "No impact on node operation as this is a simple opcode addition that returns existing consensus layer information." },
      "clClients": { "impact": "Low", "description": "May need to expose slot number information to execution layer, but this is minimal coordination work." },
      "elClients": { "impact": "Low", "description": "Simple implementation - just need to add the SLOTNUM opcode that returns the current consensus layer slot number." }
    },
    "benefits": [
      "Enables precise time-based smart contract logic",
      "Better coordination between consensus and execution layers",
      "More reliable auction and vesting mechanisms",
      "Simpler implementation than timestamp-based alternatives"
    ]
  },
  {
    "id": 7732,
    "title": "EIP-7732: enshrined Proposer-Builder separation (ePBS)",
    "status": "Draft",
    "description": "Enshrines proposer-builder separation at the protocol level to improve MEV resistance and block production efficiency.",
    "author": "Potuz, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-07-15",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7732-enshrined-proposer-builder-separation-epbs/20329",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7732-the-case-for-inclusion-in-glamsterdam/24306",
        "layer": "CL"
      }
    ],
    "laymanDescription": "Proposes the decoupling of the consensus block from the execution payload, both in broadcast and validation. This feature enables L1 scaling by significantly changing the time required to both broadcast and executing the payload together with all the blob data, from the current ~2 seconds to aproximately ~9 seconds. It allows for a maximum portion of the slot to be spent in propagation large data.",
    "northStars": ["Scale L1", "Scale blobs", "Improve UX"],
    "northStarAlignment": {
      "scaleL1": { "impact": "High", "description": "Enables for much larger payloads by removing the broadcast and the execution from the hot path of block validation." },
      "scaleBlobs": { "impact": "Medium", "description": "Enables for much larger number of blobs by removing the broadcast and data availability sampling from the hot path of block validation." },
      "improveUX": { "impact": "High", "description": "Second order effect of lower prices and higher tx throughput. Slight delay in minimal tx iclusion time from 0 to ~2 seconds." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "High", "description": "Second order effect of lower prices and higher tx throughput." },
      "appDevs": { "impact": "Medium", "description": "No direct impact. It enables applications to leverage previous builder information, something that is not currently available. It enables trustless preconfirmation schemes." },
      "walletDevs": { "impact": "Medium", "description": "No direct impact. It enables wallets to send encrypted txs to anonymous builders." },
      "toolingInfra": { "impact": "High", "description": "Explorers and block monitors need updates to handle the separation of the beacon block from the payload." },
      "layer2s": { "impact": "Medium", "description": "Second order effect of higher blob count being possible." },
      "stakersNodes": { "impact": "High", "description": "Major changes and updates are needed for trustless monitoring in staking pools. Staking UX is improved by a refined builder picking and monitoring." },
      "clClients": { "impact": "High", "description": "Major changes for CL clients" },
      "elClients": { "impact": "High", "description": "No changes for EL clients." }
    },
    "benefits": [
      "Better slot utilization getting close to 100% utilization for broadcasting + execution",
      "Removal of most of the heavy work from the hot path of block validation.",
      "Removal of trust assumptions for proposers and builders.",
      "Removal of trust assumptions on off-protocol closed source software."
    ]
  },
  {
    "id": 7782,
    "title": "EIP-7782: Reduce Block Latency (6-second slots)",
    "status": "Draft",
    "description": "Reduce Ethereum's slot time from 12s to 6s to decrease latency by 50%, distribute bandwidth usage, and improve UX.",
    "author": "Ben Adams (@benaadams), Dankrad Feist (@dankrad), Julian Ma (@Ma-Julian), Barnab√© Monnot (@barnabemonnot)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-10-05",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7782-reduce-block-latency/21271",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7782-the-case-for-2x-shorter-slot-times-in-glamsterdam/24616",
        "layer": "CL"
      }
    ],
    "laymanDescription": "This reduces Ethereum's slot time from 12 seconds to 6 seconds, making Ethereum a better confirmation engine for apps and rollups. Everyone benefits: users get faster confirmations with better censorship resistance, DeFi gets more efficient trading with lower fees, stakers get lower reward variability, and nodes get better resource utilization with smoother bandwidth usage.",
    "northStars": ["Improve UX", "Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "High", "description": "Makes Ethereum a superior confirmation engine by doubling proposer frequency while maintaining throughput. Improves censorship resistance through 2x more proposers per unit time." },
      "improveUX": { "impact": "High", "description": "Wallets display fresher data with 6-second confirmations. DeFi exchanges become more efficient with frequent price updates, reducing arbitrage losses and attracting more liquidity." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "High", "description": "Transaction confirmations in 3 seconds (on average) instead of 6, with better censorship resistance from 2x more proposers per second. DeFi users enjoy lower trading fees and reduced slippage from more efficient exchanges with frequent price updates." },
      "appDevs": { "impact": "High", "description": "Can build more responsive applications with frequent data triggers reducing staleness. DeFi protocols benefit from tighter spreads, reduced arbitrage losses, and flywheel effects attracting more liquidity and traders." },
      "walletDevs": { "impact": "High", "description": "Can display fresher chain data following transaction inclusion with 6-second head updates. Need to update timing assumptions but deliver significantly improved user responsiveness." },
      "toolingInfra": { "impact": "High", "description": "Block explorers and infrastructure need conditional logic for slot times to handle historical 12s blocks and new 6s blocks. Must implement millisecond-precision timing instead of seconds." },
      "layer2s": { "impact": "High", "description": "Receive L1 finality, safe confirmations, and block inclusion all twice as fast. Based rollups see their sequencing clock move twice as fast. Interoperability protocols get quicker actionable signals." },
      "stakersNodes": { "impact": "High", "description": "Lower reward variability from smaller, more frequent rewards reducing pooling incentives. Better resource utilization with smoother bandwidth usage, but must handle doubled consensus message frequency and new subslot timing (3s/1.5s/1.5s)." },
      "clClients": { "impact": "High", "description": "Major implementation for conditional slot timing logic, new subslot schedules (3s block proposal, 1.5s attestations, 1.5s aggregation), and doubled consensus message processing while maintaining validator participation." },
      "elClients": { "impact": "Medium", "description": "Gas limit votes halved to maintain \"gas per 12 seconds\" throughput semantics. Blob targets and limits halved. May need investigation of contracts assuming fixed 12-second slot times." }
    },
    "benefits": [
      "Halves transaction confirmation time from maximum 12s to maximum 6s with better censorship resistance",
      "Makes DeFi exchanges more efficient with frequent price updates and reduced arbitrage losses",
      "Creates healthier block construction markets with more frequent, smaller auction opportunities",
      "Improves interoperability with faster L1 finality for rollups and bridges",
      "Reduces staking reward variability, benefiting solo stakers and home operators",
      "Smooths bandwidth usage with better resource utilization for node operators",
      "Enables flywheel effects attracting more liquidity and traders to Ethereum",
      "Maintains current throughput while doubling proposer frequency per unit time"
    ]
  },
  {
    "id": 7937,
    "title": "EIP-7937: 64-bit mode opcodes for EVM",
    "status": "Draft",
    "description": "Introduces 64-bit arithmetic and operations to the EVM for improved performance and expanded computational capabilities.",
    "author": "Wei Tang, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-08-20",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7937-64-bit-mode-opcodes-for-evm/21050",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-evm64/24311",
        "layer": "EL"
      }
    ],
    "laymanDescription": "This is the core EIP of the EVM64 collection, introducing 64-bit arithmetic operations to the EVM. The full EVM64 suite includes multiple EIPs enabling much more efficient mathematical computations by adding 64-bit operations alongside existing 256-bit ones.",
    "northStars": ["Scale L1", "Improve UX"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Significantly improves computational efficiency for mathematical operations, reducing gas costs and enabling more complex on-chain calculations." },
      "improveUX": { "impact": "Medium", "description": "Cheaper and faster mathematical operations enable more sophisticated on-chain applications and reduce gas costs for computation-heavy smart contracts." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Medium", "description": "Lower gas costs for applications requiring mathematical computations like DeFi protocols, gaming, and scientific applications." },
      "appDevs": { "impact": "High", "description": "Can build much more efficient mathematical applications, implement better algorithms on-chain, and reduce gas costs for computation-intensive smart contracts." },
      "walletDevs": { "impact": "Low", "description": "Indirect benefits through lower gas costs for mathematical operations in wallet-related smart contracts." },
      "toolingInfra": { "impact": "Medium", "description": "Development tools, debuggers, and gas estimation systems need updates to support 64-bit operations and their gas costs." },
      "layer2s": { "impact": "Medium", "description": "More efficient mathematical operations benefit Layer 2 proof generation and verification systems." },
      "stakersNodes": { "impact": "Low", "description": "More efficient computation reduces overall network computational load for mathematical operations." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer computational capabilities." },
      "elClients": { "impact": "High", "description": "Major implementation work required for new 64-bit opcodes, proper gas accounting, and ensuring compatibility with existing 256-bit operations." }
    },
    "benefits": [
      "Dramatically reduces gas costs for mathematical operations",
      "Enables more sophisticated on-chain calculations",
      "Improves performance for DeFi and gaming applications",
      "Makes the EVM more competitive with other smart contract platforms"
    ]
  },
  {
    "id": 7919,
    "title": "EIP-7919: Pureth - Provable RPC responses",
    "status": "Draft",
    "description": "Enables provable RPC responses to eliminate trust requirements in data access and improve decentralization.",
    "author": "Etan Kissling, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-09-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7919-pureth-provable-rpc-responses/21180",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-pureth/24459",
        "layer": "EL"
      }
    ],
    "laymanDescription": "This enables Ethereum nodes to provide cryptographic proofs with their responses, eliminating the need to trust RPC providers. Users can verify that data from any source is authentic without running their own full node.",
    "northStars": ["Improve UX", "Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Improves network decentralization by reducing reliance on trusted RPC providers and enabling more efficient light client verification." },
      "improveUX": { "impact": "High", "description": "Eliminates trust requirements for data access, enables secure light clients, and dramatically improves decentralization of the application ecosystem." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "High", "description": "Can use any RPC provider securely without trust, access verified blockchain data from lightweight applications, and reduced dependence on centralized services." },
      "appDevs": { "impact": "High", "description": "Can build truly decentralized applications without requiring users to run full nodes, implement secure light clients, and verify data from any source." },
      "walletDevs": { "impact": "High", "description": "Can implement secure light wallets that verify all data cryptographically, reducing infrastructure costs while maintaining security guarantees." },
      "toolingInfra": { "impact": "High", "description": "RPC providers need major updates to support proof generation, block explorers can provide verifiable data, and new verification tooling needs development." },
      "layer2s": { "impact": "Medium", "description": "Can implement more secure light clients for Layer 2 networks and improve cross-chain data verification mechanisms." },
      "stakersNodes": { "impact": "Medium", "description": "Need to generate cryptographic proofs for data responses, though this enables lighter infrastructure for many use cases." },
      "clClients": { "impact": "Low", "description": "May need some coordination for proof generation, but this primarily affects execution layer data structures." },
      "elClients": { "impact": "High", "description": "Major implementation work required for proof generation systems, new data structures, and RPC response verification mechanisms." }
    },
    "benefits": [
      "Eliminates need to trust RPC providers",
      "Enables secure light clients for wallets and dApps",
      "Dramatically improves application decentralization",
      "Reduces infrastructure requirements for verified data access"
    ]
  },
  {
    "id": 7942,
    "title": "EIP-7942: Available Attestation",
    "status": "Draft",
    "description": "A comprehensive solution to address all known reorganization attacks in Ethereum PoS through available attestation mechanisms.",
    "author": "Mingfei Zhang, et al.",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-29",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7942-available-attestation-a-reorg-resilient-solution-for-ethereum/23927",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-available-attestation/24377",
        "layer": "CL"
      }
    ],
    "laymanDescription": "This is a comprehensive solution to eliminate all known reorganization attacks on Ethereum. Instead of fixing attacks one-by-one, Available Attestation redesigns how consensus works to make reorg attacks fundamentally impossible.",
    "northStars": ["Scale L1", "Improve UX"],
    "northStarAlignment": {
      "scaleL1": { "impact": "High", "description": "Eliminates all known reorg attacks, dramatically improving network security and enabling more aggressive scaling optimizations without security trade-offs." },
      "improveUX": { "impact": "High", "description": "Eliminates transaction reordering attacks, provides guaranteed inclusion properties, and dramatically improves user confidence in transaction finality." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "High", "description": "Eliminates the possibility of transaction censorship and reorg attacks, providing guaranteed transaction inclusion and much stronger finality guarantees." },
      "appDevs": { "impact": "High", "description": "Can build applications with stronger security assumptions, eliminate MEV-related edge cases, and provide users with guaranteed transaction execution properties." },
      "walletDevs": { "impact": "Medium", "description": "Can provide stronger transaction finality guarantees and eliminate concerns about transaction reordering after inclusion." },
      "toolingInfra": { "impact": "High", "description": "Major updates needed for consensus monitoring, reorg detection systems, and fork choice analysis tools to handle the new attestation mechanisms." },
      "layer2s": { "impact": "High", "description": "Dramatically improves bridge security by eliminating L1 reorg risks and enables more aggressive optimization of settlement mechanisms." },
      "stakersNodes": { "impact": "High", "description": "Fundamental changes to attestation behavior and fork choice logic, but eliminates complex reorg-related edge cases in validator operations." },
      "clClients": { "impact": "High", "description": "Major implementation work required for new attestation mechanisms, modified fork choice logic, and consensus layer protocol changes." },
      "elClients": { "impact": "Medium", "description": "Need to coordinate with new consensus mechanisms but most changes are in the consensus layer attestation logic." }
    },
    "benefits": [
      "Eliminates all known reorganization attacks permanently",
      "Provides formal security guarantees with mathematical proofs",
      "Strengthens transaction inclusion and finality properties",
      "Enables more aggressive scaling without security trade-offs"
    ]
  },
  {
    "id": 7886,
    "title": "EIP-7886: Delayed Execution",
    "status": "Draft",
    "description": "Separate block validation from execution.",
    "author": "Francesco D'Amato (@fradamt), Toni Wahrst√§tter (@nerolation)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-02-18",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7886-delayed-execution/22890",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7886-delayed-execution-the-case-for-glamsterdam/24500",
        "layer": "EL"
      }
    ],
    "laymanDescription": "Lets validators attest before execution by deferring execution outputs, improving throughput headroom.",
    "northStars": ["Scale L1"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Reduces validation latency and can enable higher block gas limits, contributing to L1 throughput." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Medium", "description": "Largely transparent; faster attestations possible, but no guaranteed MEV/fairness changes. Same-block funding patterns may fail due to pre-checks." },
      "appDevs": { "impact": "Medium", "description": "Must handle deferred receipts/logs in the child header and possible payload reversion; core application semantics and APIs remain unchanged." },
      "walletDevs": { "impact": "Medium", "description": "Adapt UX for attestation-before-execution, surfacing pending states; enforce nonce/balance prechecks and warn about same-block funding limitations." },
      "toolingInfra": { "impact": "High", "description": "Indexers, explorers, and RPCs must track deferred execution outputs, the execution_reverted flag, and updated base-fee behavior for reverted parents." },
      "layer2s": { "impact": "Medium", "description": "Bridges and settlement relying on L1 receipts should accommodate one-block deferral and detect reverted-parent semantics; data availability rules remain unchanged." },
      "stakersNodes": { "impact": "Medium", "description": "Validators/proposers attest earlier after static checks; need new header validation, deferred-output tracking, and off-critical-path execution scheduling." },
      "clClients": { "impact": "Medium", "description": "Must process new header fields and parent flags, manage EL request deferrals, and integrate with EL without changing fork-choice rules." },
      "elClients": { "impact": "High", "description": "Significant work: split static validation from execution, implement sender pre-charging, snapshots/reversion, new chain-state tracking, and base-fee handling for reverts." }
    },
    "benefits": [
      "Asynchronous attestation before execution reduces the critical path, enabling higher gas limits and overall network throughput.",
      "Minimal checks using previous state and parent outputs let validators deem blocks valid without executing transactions.",
      "Senders are pre-charged maximum fees and balances/nonces verified, significantly reducing execution-time failures and fragile same-block dependencies.",
      "Snapshot-and-revert preserves liveness: mismatched gas used resets receipts, logs, and execution outputs without discarding blocks from the chain.",
      "Base-fee dynamics remain fair: reverted parents count as zero gas used, preventing fee-market manipulation via overdeclared usage."
    ]
  },
  {
    "id": 7928,
    "title": "EIP-7928: Block-level Access Lists",
    "status": "Draft",
    "description": "Enforced block access lists with storage locations and state diffs.",
    "author": "Toni Wahrst√§tter (@nerolation), Dankrad Feist (@dankrad), Francesco D'Amato (@fradamt), Jochem Brouwer (@jochem-brouwer), Ignacio Hagopian (@jsign)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7928-block-level-access-lists/23337",
    "forkRelationships": [
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7928-block-level-access-lists-the-case-for-glamsterdam/24343",
        "layer": "EL"
      }
    ],
    "laymanDescription": "This introduces access lists at the block level rather than individual transactions, dramatically reducing gas costs for applications that access similar state and enabling new optimization patterns.",
    "northStars": ["Scale L1", "Improve UX"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Significantly reduces gas costs for state access through block-level optimization, improving overall network efficiency and throughput." },
      "improveUX": { "impact": "Medium", "description": "Lower gas costs for complex applications and improved predictability for applications with similar state access patterns." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Medium", "description": "Lower gas costs for complex applications, especially DeFi protocols and applications that access similar state across multiple transactions." },
      "appDevs": { "impact": "High", "description": "Can optimize applications for block-level access patterns, significantly reduce gas costs for state-heavy applications, and enable new design patterns." },
      "walletDevs": { "impact": "Low", "description": "Indirect benefits through lower gas costs for applications, but minimal direct impact on wallet development." },
      "toolingInfra": { "impact": "Medium", "description": "Gas estimation tools, transaction simulation, and optimization analysis need updates to handle block-level access list patterns." },
      "layer2s": { "impact": "Low", "description": "More efficient state access in Layer 2 settlement transactions and optimized bridge operations." },
      "stakersNodes": { "impact": "Low", "description": "More efficient block processing due to optimized state access patterns, reducing computational overhead." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer state access optimization." },
      "elClients": { "impact": "High", "description": "Significant implementation work required for block-level access list management, state access optimization, and gas accounting updates." }
    },
    "benefits": [
      "Dramatically reduces gas costs for state-heavy applications",
      "Enables new optimization patterns for developers",
      "Improves block processing efficiency",
      "Provides more predictable gas costs for complex applications"
    ]
  },
  {
    "id": 7805,
    "title": "EIP-7805: Fork-Choice Inclusion Lists (FOCIL)",
    "status": "Draft",
    "description": "Fork-Choice enforced Inclusion Lists improve improve censorship resistance by enable multiple proposer to force-include transactions in Ethereum blocks.",
    "author": "Thomas Thiery (@soispoke) <thomas.thiery@ethereum.org>, Francesco D'Amato <francesco.damato@ethereum.org>, Julian Ma <julian.ma@ethereum.org>, Barnab√É¬© Monnot <barnabe.monnot@ethereum.org>, Terence Tsao <ttsao@offchainlabs.com>, Jacob Kaufmann <jacob.kaufmann@ethereum.org>, Jihoon Song <jihoonsong.dev@gmail.com>",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-05-15",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7805-committee-based-fork-choice-enforced-inclusion-lists-focil/21578",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/eip-7805-fork-choice-inclusion-lists-focil-as-a-candidate-for-glamsterdam/24342",
        "layer": "CL"
      }
    ],
    "laymanDescription": "FOCIL empowers multiple validators to mandate the inclusion of specific transactions in each block, thereby improving the network's censorship resistance properties.",
    "northStars": ["Improve UX", "Scale L1", "Scale blobs"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Ethereum currently relies on local block builders to preserve censorship resistance. However, depending on local block builders comes at a cost to performance and incentives, which may conflict with scaling throughput. FOCIL is crucial in L1 scaling because it helps decouple local block building from censorship resistance." },
      "scaleBlobs": { "impact": "Low", "description": "A more censorship-resistant L1 provides better foundation for Layer 2 settlement guarantees, and allows to shorten the exit time window for optimistic rollups." },
      "improveUX": { "impact": "High", "description": "Provides strong guarantees against transaction censorship and ensures fair access to block space for all users regardless of transaction content." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "High", "description": "Strong protection against transaction censorship for all end users, guaranteed inclusion for valid transactions, and improved confidence in Ethereum's credible neutrality." },
      "appDevs": { "impact": "Medium", "description": "Can build applications with stronger inclusion guarantees and reduced concerns about application-specific censorship." },
      "walletDevs": { "impact": "Medium", "description": "Can provide users with stronger transaction inclusion guarantees and better protection against selective censorship." },
      "toolingInfra": { "impact": "High", "description": "Censorship monitoring tools, inclusion list analysis, and validator behavior tracking systems need major updates after FOCIL implementation." },
      "layer2s": { "impact": "Medium", "description": "More censorship-resistant L1 settlement provides stronger guarantees for Layer 2 transaction processing, bridge operations, and reduces rollup challenge period risks." },
      "stakersNodes": { "impact": "High", "description": "Validators must now build inclusion lists according to the protocol rules, and attesters must enforce inclusion lists conditions are satisfied before voting for a block." },
      "clClients": { "impact": "High", "description": "Major implementation work required for inclusion lists propagation and enforcement, including fork-choice modifications." },
      "elClients": { "impact": "Medium", "description": "Need build inclusion lists, to update the execution payload with inclusion list transactions, and communicate with the consensus layer." }
    },
    "benefits": [
      "Provides strong censorship resistance guarantees",
      "Ensures fair access to block space for all users",
      "Strengthens Ethereum's credible neutrality"
    ]
  },
  {
    "id": 7692,
    "title": "EIP-7692: EVM Object Format (EOFv1) Meta",
    "status": "Review",
    "description": "Meta EIP listing the EIPs belonging to the EVM Object Format (EOF) proposal in its first version, enabling code versioning and paving the way for RISC-V execution environments.",
    "author": "Alex Beregszaszi (@axic), Pawe≈Ç Bylica (@chfast), Andrei Maiboroda (@gumb0), Piotr Dobaczewski (@pdobacz), Danno Ferrin (@shemnon)",
    "type": "Meta",
    "category": "Core",
    "createdDate": "2024-04-17",
    "discussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-eof/21271",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      },
      {
        "forkName": "Glamsterdam",
        "status": "Proposed",
        "isHeadliner": true,
        "headlinerDiscussionLink": "https://ethereum-magicians.org/t/glamsterdam-headliner-proposal-eof/24464",
        "layer": "EL"
      }
    ],
    "laymanDescription": "This introduces a new container format for EVM bytecode that enables code versioning, removes complex jump analysis, and paves the way for new execution environments like RISC-V and EVM64 within the same contract. This EIP was Declined for Inclusion from Fusaka on [April 28th](https://blog.ethereum.org/2025/04/29/checkpoint-2#eof) due to a lack of consensus on implementation details and the resulting potential slowdown of shipping PeerDAS. It has been re-proposed as a headlining feature in Glamsterdam with multiple variants to address community concerns.",
    "northStars": ["Scale L1", "Improve UX"],
    "northStarAlignment": {
      "scaleL1": { "impact": "High", "description": "Enables incremental deployment of more efficient execution environments like RISC-V and EVM64 for computationally intensive tasks while maintaining EVM compatibility. Removes JUMPDEST analysis overhead." },
      "improveUX": { "impact": "Medium", "description": "Provides better developer tools through improved code analysis, versioning capabilities, and performance improvements for computationally intensive applications." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Medium", "description": "Indirect benefits from improved contract performance and reduced gas costs for computationally intensive operations. Better reliability from enhanced code validation." },
      "appDevs": { "impact": "High", "description": "Can use multiple execution environments within same contract - write normal logic in EVM and intensive computations in EVM64/RISC-V. Better code analysis tools and function support improve development experience." },
      "walletDevs": { "impact": "Low", "description": "Minimal direct impact on wallet development, though improved contract reliability and performance benefit user experience indirectly." },
      "toolingInfra": { "impact": "High", "description": "Major updates needed for debuggers, analyzers, and development tools to support EOF containers, multiple execution environments, and new bytecode format. Better analysis capabilities once implemented." },
      "layer2s": { "impact": "Medium", "description": "Can leverage more efficient execution environments for proof generation and validation. Better code analysis aids in rollup optimization and security verification." },
      "stakersNodes": { "impact": "Medium", "description": "Reduced computational overhead from eliminating JUMPDEST analysis. Potential increased complexity from supporting multiple execution environments within contracts." },
      "clClients": { "impact": "Low", "description": "Minimal direct impact on consensus layer operations as this primarily affects execution layer bytecode processing and validation." },
      "elClients": { "impact": "High", "description": "Major implementation work for new bytecode container format, multiple execution environments, enhanced validation, and maintaining backwards compatibility with legacy bytecode." }
    },
    "benefits": [
      "Enables incremental adoption of RISC-V and EVM64 within existing contracts",
      "Removes complex JUMPDEST analysis improving execution efficiency",
      "Provides code versioning for backward-incompatible protocol changes",
      "Enables better code analysis and development tooling",
      "Introduces first-class function support improving analysis opportunities",
      "Addresses multiple EVM pain points through container format",
      "Paves the way for maintaining existing toolchain while adding new capabilities",
      "Enables 'both EVM and RISC-V' rather than 'either EVM or RISC-V' approach"
    ]
  },
  {
    "id": 7939,
    "title": "EIP-7939: Count leading zeros (CLZ) opcode",
    "status": "Draft",
    "description": "Opcode to count the number of leading zero bits in a 256-bit word",
    "author": "Vectorized (@Vectorized), Georgios Konstantopoulos (@gakonst), Jochem Brouwer (@jochem-brouwer), Ben Adams (@benaadams), Giulio Rebuffo (@Giulio2002)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-04-28",
    "discussionLink": "https://ethereum-magicians.org/t/create-a-new-opcode-for-counting-leading-zeros-clz/10805",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Scheduled"
      }
    ],
    "laymanDescription": "This adds a new CLZ (Count Leading Zeros) opcode to the EVM that efficiently counts the number of zero bits at the start of a 256-bit number. This is a fundamental mathematical operation used in many algorithms, especially for mathematical computations, data compression, and cryptographic operations. Currently, implementing this operation in Solidity requires complex and expensive code - this opcode makes it much cheaper and faster.",
    "northStars": ["Scale L1", "Improve UX"],
    "northStarAlignment": {
      "scaleL1": { "impact": "Medium", "description": "Significantly reduces gas costs for mathematical operations that require bit manipulation, improving computational efficiency and enabling more complex on-chain calculations." },
      "improveUX": { "impact": "Medium", "description": "Enables cheaper and more efficient mathematical operations, benefiting DeFi protocols, gaming applications, and any contracts requiring complex mathematical computations." }
    },
    "stakeholderImpacts": {
      "endUsers": { "impact": "Low", "description": "Indirect benefits through lower gas costs for applications using mathematical operations, compression algorithms, and advanced cryptographic schemes." },
      "appDevs": { "impact": "High", "description": "Can implement much more efficient mathematical algorithms, compression schemes, and bitmap operations. Particularly beneficial for DeFi protocols requiring complex mathematical operations and ZK-proving applications." },
      "walletDevs": { "impact": "Low", "description": "Minimal direct impact, though benefits indirectly from more efficient mathematical operations in smart contracts." },
      "toolingInfra": { "impact": "Low", "description": "Development tools and debuggers need to support the new CLZ opcode, but this is a straightforward addition." },
      "layer2s": { "impact": "Medium", "description": "More efficient mathematical operations benefit ZK-proof generation and verification systems, reducing proving costs especially for RISC-V based proving systems." },
      "stakersNodes": { "impact": "Low", "description": "More efficient computation reduces overall network computational load for mathematical operations." },
      "clClients": { "impact": "None", "description": "No direct impact on consensus layer operations as this affects execution layer computational capabilities." },
      "elClients": { "impact": "Low", "description": "Simple implementation - just need to add the CLZ opcode (0x1e) with proper gas accounting. Benchmarked to have similar computational cost to ADD." }
    },
    "benefits": [
      "Dramatically reduces gas costs for bit manipulation operations",
      "Enables more efficient mathematical algorithms on-chain",
      "Particularly beneficial for ZK-proving applications",
      "Reduces bytecode size for mathematical operations",
      "Enables efficient compression and decompression algorithms",
      "Essential building block for advanced cryptographic schemes"
    ]
  },
  {
    "id": 663,
    "title": "EIP-663: SWAPN, DUPN and EXCHANGE instructions",
    "status": "Review",
    "description": "Introduce additional instructions for manipulating the stack which allow accessing the stack at higher depths",
    "author": "Alex Beregszaszi (@axic), Charles Cooper (@charles-cooper), Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2017-07-03",
    "discussionLink": "https://ethereum-magicians.org/t/eip-663-swapn-dupn-and-exchange-instructions/3346",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds three new EVM instructions (DUPN, SWAPN, and EXCHANGE) that allow smart contracts to access and manipulate stack items beyond the current 16-item limit, reaching up to 256 items deep. Currently, the EVM stack can hold 1024 items but only the top 16 are easily accessible. These new instructions help compilers write more efficient code for complex functions with many variables by providing better stack management capabilities. The feature only works with the new EOF bytecode format, not legacy contracts."
  },
  {
    "id": 3540,
    "title": "EIP-3540: EOF - EVM Object Format v1",
    "status": "Review",
    "description": "EOF is an extensible and versioned container format for EVM bytecode with a once-off validation at deploy time.",
    "author": "Alex Beregszaszi (@axic), Pawe≈Ç Bylica (@chfast), Andrei Maiboroda (@gumb0), Matt Garnett (@lightclient), Piotr Dobaczewski (@pdobacz)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2021-03-16",
    "discussionLink": "https://ethereum-magicians.org/t/evm-object-format-eof/5727",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces EVM Object Format (EOF), a new standardized container for smart contract bytecode that gets validated once when deployed rather than every time it runs. EOF separates code from data, making contracts more structured and analyzable. It enables future EVM improvements like better jump instructions, multibyte opcodes, and function representations. The format is extensible and versioned, allowing gradual introduction of new features. Only new contracts can use EOF - existing contracts remain unchanged. This is the foundation that makes other EOF-related improvements possible."
  },
  {
    "id": 3670,
    "title": "EIP-3670: EOF - Code Validation",
    "status": "Review",
    "description": "Validate EOF bytecode for correctness at the time of deployment.",
    "author": "Alex Beregszaszi (@axic), Andrei Maiboroda (@gumb0), Pawe≈Ç Bylica (@chfast)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2021-06-23",
    "discussionLink": "https://ethereum-magicians.org/t/eip-3670-eof-code-validation/6693",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds strict validation rules for EOF smart contracts when they're deployed. It rejects contracts with invalid bytecode, such as incomplete PUSH instructions or undefined opcodes. It also removes deprecated instructions like CALLCODE and SELFDESTRUCT from EOF contracts. This validation only happens once at deployment time and only affects new EOF contracts - existing legacy contracts remain unchanged. The goal is to make bytecode more predictable and easier to reason about, while ensuring all EVM implementations handle code the same way."
  },
  {
    "id": 4200,
    "title": "EIP-4200: EOF - Static relative jumps",
    "status": "Review",
    "description": "RJUMP, RJUMPI and RJUMPV instructions with a signed immediate encoding the jump destination",
    "author": "Alex Beregszaszi (@axic), Andrei Maiboroda (@gumb0), Pawe≈Ç Bylica (@chfast)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2021-07-16",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4200-eof-static-relative-jumps/7108",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces three new jump instructions (RJUMP, RJUMPI, and RJUMPV) for EOF contracts that use relative addressing instead of absolute addressing. These instructions are more gas-efficient than traditional JUMP/JUMPI instructions, don't require JUMPDEST markers, and make code analysis easier. RJUMP does unconditional jumps, RJUMPI does conditional jumps, and RJUMPV provides jump tables for switch-case scenarios. The relative addressing means code can be moved around without breaking, and the static nature allows for better optimization and validation at deployment time."
  },
  {
    "id": 4750,
    "title": "EIP-4750: EOF - Functions",
    "status": "Review",
    "description": "Individual sections for functions with `CALLF` and `RETF` instructions",
    "author": "Andrei Maiboroda (@gumb0), Alex Beregszaszi (@axic), Pawe≈Ç Bylica (@chfast)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-01-10",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4750-eof-functions/8195",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces proper function support to EOF contracts by allowing multiple code sections, each representing a separate function. It adds two new instructions: CALLF to call functions and RETF to return from them. Functions have defined input/output parameters and their own isolated stack, improving code organization and analysis. Dynamic jumps (JUMP/JUMPI) are completely removed in favor of static function calls, making contracts more predictable and easier to optimize. A return stack tracks function call history, and JUMPDEST becomes a simple NOP instruction since jump analysis is no longer needed."
  },
  {
    "id": 5450,
    "title": "EIP-5450: EOF - Stack Validation",
    "status": "Review",
    "description": "Deploy-time validation of stack usage for EOF functions.",
    "author": "Andrei Maiboroda (@gumb0), Pawe≈Ç Bylica (@chfast), Alex Beregszaszi (@axic), Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-08-12",
    "discussionLink": "https://ethereum-magicians.org/t/eip-5450-eof-stack-validation/10410",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds comprehensive stack validation to EOF contracts at deployment time, ensuring that stack underflow and overflow cannot happen during execution. By analyzing all possible code paths and tracking stack heights, it eliminates the need for most runtime stack checks, making execution faster and more predictable. Only CALLF and JUMPF instructions need runtime stack overflow checks. The validation also prevents deployment of unreachable code and ensures proper function termination. This creates guarantees that enable better compiler optimizations and ahead-of-time compilation while maintaining linear validation complexity."
  },
  {
    "id": 6206,
    "title": "EIP-6206: EOF - JUMPF and non-returning functions",
    "status": "Review",
    "description": "Introduces instruction for chaining function calls.",
    "author": "Andrei Maiboroda (@gumb0), Alex Beregszaszi (@axic), Pawe≈Ç Bylica (@chfast), Matt Garnett (@lightclient)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2022-12-21",
    "discussionLink": "https://ethereum-magicians.org/t/eip-4750-eof-functions/8195",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces the JUMPF instruction for EOF contracts, enabling tail call optimization by jumping to code sections without adding return stack frames. It also introduces non-returning functions - sections that never return control to their caller. This is particularly efficient for error handling helpers that end with REVERT, allowing compilers to generate more optimal code with reduced gas costs and smaller bytecode size. Functions can jump to other functions with fewer outputs, and non-returning functions don't need to clean up extra stack items before terminating."
  },
  {
    "id": 7069,
    "title": "EIP-7069: Revamped CALL instructions",
    "status": "Draft",
    "description": "Introduce EXTCALL, EXTDELEGATECALL and EXTSTATICCALL with simplified semantics",
    "author": "Alex Beregszaszi (@axic), Pawe≈Ç Bylica (@chfast), Danno Ferrin (@shemnon), Andrei Maiboroda (@gumb0), Charles Cooper (@charles-cooper)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-05-05",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7069-revamped-call-instructions/14432",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces three new call instructions (EXTCALL, EXTDELEGATECALL, EXTSTATICCALL) for EOF contracts that remove gas observability and simplify call semantics. Unlike legacy CALL instructions, these don't allow specifying gas limits - they use the 63/64th rule automatically. They return extensible status codes (0=success, 1=revert, 2=failure) instead of boolean values, remove output buffer complexity in favor of RETURNDATACOPY, and add RETURNDATALOAD for efficient return data access. This makes contracts more resilient to future gas repricing and eliminates many gas-related attack vectors while simplifying the calling mechanism."
  },
  {
    "id": 7480,
    "title": "EIP-7480: EOF - Data section access instructions",
    "status": "Draft",
    "description": "Instructions to read data section of EOF container",
    "author": "Andrei Maiboroda (@gumb0), Alex Beregszaszi (@axic), Pawe≈Ç Bylica (@chfast)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2023-08-11",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7480-eof-data-section-access-instructions/15414",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces four new instructions for EOF contracts to access their data section: DATALOAD (loads 32-byte word), DATALOADN (optimized version with compile-time offset), DATASIZE (returns data section size), and DATACOPY (copies data to memory). These replace the deprecated CODECOPY instruction for data access in EOF contracts, enabling proper separation between code and data. The instructions follow the same pattern as existing data access instructions like those for calldata and returndata, with zero-padding for out-of-bounds access and validation to ensure safe operation."
  },
  {
    "id": 7620,
    "title": "EIP-7620: EOF Contract Creation",
    "status": "Draft",
    "description": "Introduce `EOFCREATE` and `RETURNCODE` instructions",
    "author": "Alex Beregszaszi (@axic), Pawe≈Ç Bylica (@chfast), Andrei Maiboroda (@gumb0), Piotr Dobaczewski (@pdobacz)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-02-12",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7620-eof-contract-creation/18590",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces new contract creation instructions for EOF contracts: EOFCREATE and RETURNCODE, which replace the legacy CREATE/CREATE2 instructions. Since EOF removes code observability (the ability to inspect and manipulate code), the old creation methods don't work. EOFCREATE creates contracts using pre-validated subcontainers within the factory contract, maintaining security while enabling factory patterns. RETURNCODE allows the initialization code to specify which subcontainer becomes the deployed contract and append additional data. This preserves the factory contract use case while maintaining EOF's code non-observability guarantees."
  },
  {
    "id": 7698,
    "title": "EIP-7698: EOF - Creation transaction",
    "status": "Review",
    "description": "Deploy EOF contracts using creation transactions",
    "author": "Piotr Dobaczewski (@pdobacz), Andrei Maiboroda (@gumb0), Pawe≈Ç Bylica (@chfast), Alex Beregszaszi (@axic)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-24",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7698-eof-creation-transaction/19784",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This enables deploying EOF contracts using regular creation transactions (transactions with empty 'to' field). Since legacy CREATE and CREATE2 instructions cannot deploy EOF code, creation transactions are the only way to get the first EOF contracts on-chain. The transaction data contains an EOF initcontainer followed by calldata for constructor arguments. This approach allows existing deployment tooling to work without modification - developers can deploy EOF contracts the same way they deploy legacy contracts, just by concatenating constructor arguments with the initcontainer. The execution ends with a RETURNCODE instruction that specifies which subcontainer becomes the deployed contract."
  },
  {
    "id": 7873,
    "title": "EIP-7873: EOF - TXCREATE and InitcodeTransaction type",
    "status": "Review",
    "description": "Adds a `TXCREATE` instruction to EOF and an accompanying transaction type allowing to create EOF contracts from transaction data",
    "author": "Piotr Dobaczewski (@pdobacz), Andrei Maiboroda (@gumb0), Pawe≈Ç Bylica (@chfast), Alex Beregszaszi (@axic), Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-01-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7873-eof-txcreate-instruction-and-initcodetransaction-type/22765",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces a new way to deploy EOF contracts by adding a TXCREATE instruction and a special InitcodeTransaction type. The problem it solves is that EOF removes the traditional CREATE and CREATE2 instructions used to deploy contracts. With this EIP, both regular users (EOAs) and smart contracts can deploy EOF contracts by including the contract code directly in transaction data and using TXCREATE to deploy it. This works alongside the existing EOFCREATE instruction, giving developers all the contract creation capabilities they had before EOF. The TXCREATE instruction can also deploy legacy contracts, making it a universal bootstrapping mechanism for getting EOF contracts onto the blockchain."
  },
  {
    "id": 7834,
    "title": "EIP-7834: Separate Metadata Section for EOF",
    "status": "Review",
    "description": "Introduce a new separate metadata section to the EOF",
    "author": "Kaan Uzdogan (@kuzdogan), Marco Castignoli (@marcocastignoli), Manuel Wedler (@manuelwedler)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-12-06",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7834-separate-metadata-section-for-eof/22138",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds a dedicated metadata section to EOF contracts that is completely separate from executable code and data. Currently, compilers include metadata (like compiler versions, IPFS hashes of source files) by mixing it with contract data, which creates problems for source code verification and causes different bytecode when metadata changes. The new metadata section solves these issues by being unreachable by contract execution, unchanging after deployment, and clearly separated from functional code. This makes source code verification much easier and ensures that contracts with identical logic but different metadata will have the same executable bytecode."
  },
  {
    "id": 7761,
    "title": "EIP-7761: EXTCODETYPE instruction",
    "status": "Review",
    "description": "Add EXTCODETYPE instruction to EOF to address common uses of EXTCODE* instructions",
    "author": "Andrei Maiboroda (@gumb0), Piotr Dobaczewski (@pdobacz), Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-09-01",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7761-is-contract-instruction/20936",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds an EXTCODETYPE instruction to EOF contracts to distinguish between different account types. EOF removes code introspection capabilities like EXTCODESIZE, but this creates problems for ERC-721 and ERC-1155 tokens that need to know whether a recipient is an EOA (externally owned account) or a contract to implement safe transfers correctly. EXTCODETYPE returns 0 for no code (EOA), 1 for legacy contracts, and 2 for EOF contracts. This enables proper implementation of token standards in EOF while also helping proxy contracts verify that their upgrade targets are safe to call with EXTDELEGATECALL."
  },
  {
    "id": 7880,
    "title": "EIP-7880: EOF - EXTCODEADDRESS instruction",
    "status": "Review",
    "description": "Add EXTCODEADDRESS instruction to EOF to address code delegation use cases",
    "author": "Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-02-08",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7880-eof-extcodeaddress-instruction/22845",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds a new EXTCODEADDRESS instruction to EOF contracts that helps them work with EIP-7702 delegation accounts without breaking EOF's no-code-introspection rule. The problem it solves is that EOF removes the ability to read raw contract code, but contracts still need to know when an account is delegating execution to another address. This instruction takes an address and returns the actual address that will execute the code - for regular accounts it returns the same address, but for delegated accounts it returns the address they're delegating to. This enables important use cases like managed proxy contracts ensuring they don't delegate to unsafe addresses, sponsorship contracts verifying delegation hasn't changed during a transaction, and security-conscious contracts that only accept specific delegation targets."
  },
  {
    "id": 7762,
    "title": "EIP-7762: Increase MIN_BASE_FEE_PER_BLOB_GAS",
    "status": "Review",
    "description": "Adjust the MIN_BASE_FEE_PER_BLOB_GAS to speed up price discovery on blob space",
    "author": "Max Resnick (@MaxResnick), Davide Crapis (@dcrapis), Ansgar Dietrichs (@adietrichs)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-08-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7762-increase-min-base-fee-per-blob-gas/20949",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This increases the minimum blob base fee from 1 wei to 2^25 wei (about 33 million times higher) to speed up blob price discovery. Currently, when blob demand exceeds supply, it takes too long for prices to climb from the extremely low minimum to actual market rates. The new minimum corresponds to about 1 cent at current ETH prices, similar to the cost of a simple transaction when gas fees are low. The change also resets excess blob gas to zero to prevent a sudden price spike when the upgrade activates. This helps blob-based rollups reach appropriate pricing faster during high-demand periods."
  },
  {
    "id": 7666,
    "title": "EIP-7666: EVM-ify the identity precompile",
    "status": "Stagnant",
    "description": "Remove the identity precompile, and put into place a piece of EVM code that has equivalent functionality",
    "author": "Vitalik Buterin (@vbuterin)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-03-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7561-evm-ify-the-identity-precompile/19445",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This removes the identity precompile (at address 0x04) and replaces it with actual EVM code that does the same thing - simply copying input data to output data. The identity precompile was originally needed because there was no direct way to copy memory, but since the MCOPY opcode was introduced, this precompile is no longer necessary. Removing it reduces maintenance burden and complexity for Ethereum clients, including ZK-EVMs. This serves as a template for potentially removing other underused precompiles in the future, like certain hash functions."
  },
  {
    "id": 7668,
    "title": "EIP-7668: Remove bloom filters",
    "status": "Stagnant",
    "description": "Remove bloom filters from the execution block",
    "author": "Vitalik Buterin (@vbuterin)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-03-31",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7653-remove-bloom-filters/19447",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This removes bloom filters from Ethereum blocks and transaction receipts by requiring them to be empty. Bloom filters were originally designed to help applications quickly find relevant log events in blockchain history, but in practice they're too slow and have high false positive rates. Most applications now use centralized indexing services instead. Removing bloom filters simplifies the protocol and reduces client complexity, while encouraging development of decentralized alternatives using ZK-SNARKs for provable log indexing."
  },
  {
    "id": 7688,
    "title": "EIP-7688: Forward compatible consensus data structures",
    "status": "Draft",
    "description": "Transition consensus SSZ data structures to ProgressiveContainer",
    "author": "Etan Kissling (@etan-status), Cayman (@wemeetagain)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-04-15",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7688-forward-compatible-consensus-data-structures/19673",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This makes Ethereum's consensus data structures forward compatible by transitioning to ProgressiveContainer, which maintains stable merkleization schemes across forks. Currently, when Ethereum adds or removes features in forks, existing verifier implementations (like smart contracts that check validator slashing) break because the merkleization changes. With ProgressiveContainer, these verifiers will continue working even when unrelated features are modified, eliminating the need to update smart contracts, hardware wallets, and other systems in lockstep with every Ethereum fork. This is particularly valuable for decentralized staking pools and off-chain verification systems."
  },
  {
    "id": 7791,
    "title": "EIP-7791: GAS2ETH opcode",
    "status": "Draft",
    "description": "Introduces a new opcode, `GAS2ETH`, to convert gas to ETH",
    "author": "Charles Cooper (@charles-cooper), Pascal Caversaccio (@pcaversaccio)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-08-13",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7791-gas2eth-opcode/21418",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces a new GAS2ETH opcode that allows smart contracts to convert gas directly into ETH and send it to a specified address. It provides a new monetization mechanism for smart contract authors and public goods projects that scales with network usage. Instead of complex fee structures or token schemes, developers can charge gas (which users already understand) and receive proportional compensation during high network activity periods. The opcode takes a target address and gas amount, deducts the gas from the transaction, calculates the ETH value using the current gas price, and transfers that ETH to the specified address."
  },
  {
    "id": 7819,
    "title": "EIP-7819: SETDELEGATE instruction",
    "status": "Draft",
    "description": "Introduce a new instruction allowing contracts to create clones using EIP-7702 delegation designations",
    "author": "Hadrien Croubois (@amxx), Danno Ferrin (@shemnon)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2024-11-18",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7819-create-delegate/21763",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This introduces a new SETDELEGATE instruction that allows smart contracts to create delegation accounts using EIP-7702's design. These work like ERC-1167 clones but with significant advantages: they delegate execution at the protocol level rather than through EVM code, avoiding calldata copying costs and EOF/legacy compatibility issues. The instruction takes a target address and salt, creates a delegation account at a computed address, and makes it delegate all calls to the target. This provides upgradeability without storage lookups, better efficiency than traditional proxies, and seamless compatibility between code versions."
  },
  {
    "id": 7783,
    "title": "EIP-7783: Add Controlled Gas Limit Increase Strategy",
    "status": "Draft",
    "description": "Adds a controlled gas limit increase strategy.",
    "author": "Giulio Rebuffo (@Giulio2002)",
    "type": "Informational",
    "category": "Core",
    "createdDate": "2024-10-06",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7783-add-controlled-gas-limit-increase-strategy/21282",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This proposes automatic, controlled gas limit increases over time instead of relying on manual adjustments by validators. Currently, gas limits change unpredictably based on individual validator decisions, which can cause network performance issues. The EIP offers three strategies: linear (fixed increase per block), stepwise (increases in steps), and exponential (doubling over intervals). Each includes safeguards like deactivation blocks to prevent indefinite growth. This provides predictable network scaling while giving the ecosystem time to adapt to larger block sizes, and validators retain the ability to halt increases if problems arise."
  },
  {
    "id": 7889,
    "title": "EIP-7889: Emit log on revert",
    "status": "Draft",
    "description": "Top level reverts emit a log with revert message",
    "author": "Shoham Chakraborty (@shohamc1), Alex Forshtat (@forshtat)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-02-20",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7889-emit-log-on-revert/22918",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This automatically makes error messages from failed transactions easily accessible by emitting them as logs. Currently, when a transaction fails (reverts), the error message explaining why it failed is hard to get - you need to request expensive transaction tracing to access it. This creates overhead for users who want to understand why their transaction failed and for nodes that have to replay entire transactions just to extract small error messages. This EIP solves the problem by automatically emitting a log containing the revert message whenever the REVERT opcode is called. This makes error messages accessible through standard RPC calls without any tracing, helping wallets, block explorers, and other tools display helpful error messages to users. It's completely backward compatible and doesn't require any new opcodes or RPC methods."
  },
  {
    "id": 7898,
    "title": "EIP-7898: Uncouple execution payload from beacon block",
    "status": "Draft",
    "description": "Separates the execution payload from beacon block to independently transmit them",
    "author": "Gajinder Singh (@g11tech)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-01",
    "discussionLink": "https://ethereum-magicians.org/t/uncouple-execution-payload-from-beacon-block/23029",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This addresses a fundamental scalability bottleneck by separating transaction data from consensus data in Ethereum blocks. Currently, beacon blocks contain all transaction data embedded within them, but as Ethereum aims to increase block sizes (potentially by 10x), this creates serious networking and processing problems. Larger transaction payloads cause higher latencies for block transmission, increased bandwidth requirements, and longer block processing times that hurt validator performance. This EIP solves these issues by replacing the full transaction data in beacon blocks with just a header, while transmitting the actual transaction data separately. This allows the consensus layer to process blocks quickly while handling much larger transaction payloads independently. Additional benefits include reduced storage requirements for beacon nodes, more efficient proposer-builder separation, and laying groundwork for future innovations like ZK-proof-based execution validation where transaction data could be handled similarly to blobs with data availability sampling."
  },
  {
    "id": 7903,
    "title": "EIP-7903: Remove Initcode Size Limit",
    "status": "Draft",
    "description": "Removes the initcode size limit introduced in EIP-3860",
    "author": "Charles Cooper (@charles-cooper)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-05",
    "discussionLink": "https://ethereum-magicians.org/t/remove-initcode-size-limit/23066",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This removes the 49,152-byte limit on initialization code (initcode) that was introduced by EIP-3860. The problem this solves is that the current limit makes it unnecessarily difficult to deploy large, complex smart contracts that need to create multiple sub-contracts in a single transaction. For example, if you want to deploy a sophisticated DeFi protocol that consists of several interconnected contracts, you might hit the initcode limit even though each final contract stays under the 24KB deployed code limit (EIP-170). This forces developers to split deployments across multiple transactions, which is more expensive, less efficient, and breaks the clean abstractions that high-level programming languages try to provide. By removing this artificial limit, the EIP allows for more flexible deployment patterns while still maintaining security through existing gas costs that scale with initcode size. The per-block gas limit already naturally restricts initcode to reasonable sizes (around 16MB at current gas limits), making the 49KB cap redundant. This change is fully backward compatible and only removes restrictions without changing how contracts work."
  },
  {
    "id": 7912,
    "title": "EIP-7912: Pragmatic stack manipulation tools",
    "status": "Draft",
    "description": "Add additional SWAP and DUP operations for deeper stack access",
    "author": "lightclient (@lightclient)",
    "type": "Standards Track",
    "category": "Core",
    "createdDate": "2025-03-25",
    "discussionLink": "https://ethereum-magicians.org/t/eip-7912-pragmatic-expansion-of-stack-manipulation-tools/23826",
    "forkRelationships": [
      {
        "forkName": "Fusaka",
        "status": "Declined"
      }
    ],
    "laymanDescription": "This adds practical stack manipulation tools to the EVM without requiring the complex EOF format. It extends the existing SWAP and DUP instructions to reach deeper stack positions (up to 24 positions), adds dynamic SWAPN and DUPN instructions for variable depth access, and introduces an EXCHANGE instruction that can swap any two arbitrary stack positions. These tools help compilers generate more efficient code when dealing with complex functions that have many local variables, reducing gas costs and bytecode size. Unlike previous attempts that required new code formats, this proposal works with existing legacy contracts by requiring specific PUSH instructions before the dynamic operations, making it a pragmatic solution that provides better stack access without breaking backward compatibility."
  }
]
